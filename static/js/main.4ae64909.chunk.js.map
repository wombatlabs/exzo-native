{"version":3,"sources":["providers/cluster.tsx","utils/index.tsx","utils/sentry.ts","pages/inspector/SimulatorCard.tsx","components/common/TableCardBody.tsx","utils/url.ts","serumMarketRegistry.ts","utils/tx.ts","components/common/Overlay.tsx","components/ClusterModal.tsx","utils/date.ts","components/MessageBanner.tsx","img/logos-solana/dark-explorer-logo.svg","components/ClusterStatusButton.tsx","components/Navbar.tsx","providers/mints/token-registry.tsx","components/SearchBar.tsx","providers/cache.tsx","providers/accounts/history.tsx","validators/pubkey.ts","validators/accounts/token.ts","providers/accounts/tokens.tsx","validators/index.ts","validators/bignum.ts","validators/accounts/stake.ts","validators/accounts/vote.ts","validators/accounts/nonce.ts","validators/accounts/sysvar.ts","validators/accounts/config.ts","providers/accounts/flagged-accounts.tsx","validators/accounts/upgradeable-program.ts","providers/block.tsx","providers/accounts/rewards.tsx","providers/accounts/index.tsx","components/common/Copyable.tsx","components/common/Address.tsx","components/account/StakeAccountSection.tsx","components/account/UnknownAccountCard.tsx","utils/coingecko.tsx","components/common/LoadingCard.tsx","components/account/TokenAccountSection.tsx","components/common/ErrorCard.tsx","components/common/Identicon.tsx","components/account/OwnedTokensCard.tsx","components/common/Signature.tsx","components/common/Slot.tsx","providers/transactions/parsed.tsx","components/instruction/token-swap/types.ts","components/instruction/token-lending/types.ts","components/instruction/serum/types.ts","components/instruction/bonfida-bot/types.ts","providers/transactions/raw.tsx","providers/transactions/index.tsx","components/common/InfoTooltip.tsx","components/common/BalanceDelta.tsx","components/transaction/TokenBalancesCard.tsx","components/instruction/RawDetails.tsx","components/instruction/RawParsedDetails.tsx","components/instruction/InstructionCard.tsx","components/instruction/bpf-loader/types.ts","components/instruction/UnknownDetailsCard.tsx","components/instruction/bpf-loader/BpfLoaderDetailsCard.tsx","components/instruction/MemoDetailsCard.tsx","components/instruction/serum/NewOrderDetailsCard.tsx","components/instruction/serum/MatchOrdersDetailsCard.tsx","components/instruction/serum/InitializeMarketDetailsCard.tsx","components/instruction/serum/ConsumeEventsDetails.tsx","components/instruction/serum/CancelOrderDetails.tsx","components/instruction/serum/CancelOrderByClientIdDetails.tsx","components/instruction/serum/SettleFundsDetailsCard.tsx","components/instruction/SerumDetailsCard.tsx","components/instruction/stake/InitializeDetailsCard.tsx","components/instruction/stake/DelegateDetailsCard.tsx","components/instruction/stake/AuthorizeDetailsCard.tsx","components/instruction/stake/SplitDetailsCard.tsx","components/instruction/stake/WithdrawDetailsCard.tsx","components/instruction/stake/DeactivateDetailsCard.tsx","components/instruction/stake/types.ts","components/instruction/stake/MergeDetailsCard.tsx","components/instruction/stake/StakeDetailsCard.tsx","components/instruction/system/TransferDetailsCard.tsx","components/instruction/system/AllocateDetailsCard.tsx","components/instruction/system/AllocateWithSeedDetailsCard.tsx","components/instruction/system/AssignDetailsCard.tsx","components/instruction/system/AssignWithSeedDetailsCard.tsx","components/instruction/system/CreateDetailsCard.tsx","components/instruction/system/CreateWithSeedDetailsCard.tsx","components/instruction/system/NonceInitializeDetailsCard.tsx","components/instruction/system/NonceAdvanceDetailsCard.tsx","components/instruction/system/NonceWithdrawDetailsCard.tsx","components/instruction/system/NonceAuthorizeDetailsCard.tsx","components/instruction/system/TransferWithSeedDetailsCard.tsx","components/instruction/system/types.ts","components/instruction/system/SystemDetailsCard.tsx","components/instruction/token/types.ts","components/instruction/token/TokenDetailsCard.tsx","components/instruction/TokenLendingDetailsCard.tsx","components/instruction/TokenSwapDetailsCard.tsx","components/instruction/wormhole/types.ts","components/instruction/WormholeDetailsCard.tsx","components/instruction/bonfida-bot/CancelOrderDetails.tsx","components/instruction/bonfida-bot/CollectFeesDetails.tsx","components/instruction/bonfida-bot/CreateBotDetails.tsx","components/instruction/bonfida-bot/DepositDetails.tsx","components/instruction/bonfida-bot/InitializeBotDetails.tsx","components/instruction/bonfida-bot/RedeemDetails.tsx","components/instruction/bonfida-bot/SettleFundsDetails.tsx","components/instruction/bonfida-bot/CreateOrderDetails.tsx","components/instruction/BonfidaBotDetails.tsx","components/instruction/bpf-upgradeable-loader/types.ts","components/instruction/bpf-upgradeable-loader/BpfUpgradeableLoaderDetailsCard.tsx","components/instruction/vote/types.ts","components/instruction/vote/VoteDetailsCard.tsx","components/instruction/AssociatedTokenDetailsCard.tsx","components/instruction/mango/types.ts","components/instruction/mango/AddOracleDetailsCard.tsx","components/instruction/mango/AddPerpMarketDetailsCard.tsx","components/instruction/mango/AddSpotMarketDetailsCard.tsx","components/instruction/mango/CancelPerpOrderDetailsCard.tsx","components/instruction/mango/CancelSpotOrderDetailsCard.tsx","components/instruction/mango/ChangePerpMarketParamsDetailsCard.tsx","components/instruction/mango/ConsumeEventsDetailsCard.tsx","components/instruction/mango/GenericMngoAccountDetailsCard.tsx","components/instruction/mango/GenericPerpMngoDetailsCard.tsx","components/instruction/mango/GenericSpotMngoDetailsCard.tsx","components/instruction/mango/PlacePerpOrderDetailsCard.tsx","components/instruction/mango/PlaceSpotOrderDetailsCard.tsx","components/instruction/MangoDetails.tsx","components/transaction/InstructionsSection.tsx","components/transaction/ProgramLogSection.tsx","pages/TransactionDetailsPage.tsx","utils/instruction.ts","components/account/TokenHistoryCard.tsx","providers/mints/largest.tsx","components/account/TokenLargestAccountsCard.tsx","components/common/Account.tsx","components/account/VoteAccountSection.tsx","components/account/NonceAccountSection.tsx","components/account/VotesCard.tsx","components/account/SysvarAccountSection.tsx","components/account/SlotHashesCard.tsx","components/account/StakeHistoryCard.tsx","components/account/BlockhashesCard.tsx","components/account/ConfigAccountSection.tsx","components/account/UpgradeableLoaderAccountSection.tsx","components/account/HistoryCardComponents.tsx","components/account/history/TransactionHistoryCard.tsx","components/account/history/common.tsx","components/account/history/TokenTransfersCard.tsx","components/account/history/TokenInstructionsCard.tsx","components/account/RewardsCard.tsx","pages/AccountDetailsPage.tsx","pages/inspector/SignaturesCard.tsx","pages/inspector/AddressWithContext.tsx","pages/inspector/AccountsCard.tsx","pages/inspector/RawInputCard.tsx","pages/inspector/InstructionsSection.tsx","pages/inspector/InspectorPage.tsx","providers/stats/solanaDashboardInfo.tsx","providers/stats/solanaPerformanceInfo.tsx","providers/stats/solanaClusterStats.tsx","components/TpsCard.tsx","providers/supply.tsx","pages/ClusterStatsPage.tsx","providers/accounts/vote-accounts.tsx","providers/richList.tsx","components/TopAccountsCard.tsx","components/SupplyCard.tsx","pages/SupplyPage.tsx","components/block/BlockHistoryCard.tsx","components/block/BlockRewardsCard.tsx","components/block/BlockProgramsCard.tsx","components/block/BlockAccountsCard.tsx","components/block/BlockOverviewCard.tsx","pages/BlockDetailsPage.tsx","App.tsx","providers/stats/index.tsx","providers/mints/index.tsx","index.tsx"],"names":["ClusterStatus","Cluster","clusterApiUrl","cluster","CLUSTERS","MainnetBeta","Testnet","Devnet","Custom","clusterSlug","clusterName","MAINNET_BETA_URL","TESTNET_URL","DEVNET_URL","clusterUrl","customUrl","replace","DEFAULT_CLUSTER","clusterReducer","state","action","status","Connected","Failure","Connecting","ModalContext","React","createContext","undefined","StateContext","DispatchContext","ClusterProvider","children","useReducer","dispatch","useState","showModal","setShowModal","query","useQuery","get","parseQuery","enableCustomUrl","localStorageIsAvailable","localStorage","getItem","history","useHistory","location","useLocation","useEffect","has","delete","push","search","toString","length","updateCluster","Provider","value","a","connection","Connection","getFirstAvailableBlock","firstAvailableBlock","reportError","useUpdateCustomUrl","useContext","Error","useCluster","context","url","name","useClusterModal","assertUnreachable","x","normalizeTokenAmount","raw","decimals","parseInt","Math","pow","lamportsToSol","lamports","abs","signMultiplier","isNeg","lamportsString","padStart","splitIndex","solString","slice","parseFloat","lamportsToSolString","maximumFractionDigits","sol","Intl","NumberFormat","format","SolBalance","className","HUMANIZER","HumanizeDuration","HumanizeDurationLanguage","slotsToHumanString","slots","slotTime","humanize","wrap","input","result","substr","join","test","setItem","removeItem","e","camelToTitleCase","str","charAt","toUpperCase","abbreviatedNumber","fixed","toFixed","setOptions","language","spacer","delimiter","round","units","largest","addLanguage","y","mo","w","d","h","m","s","ms","decimal","err","tags","console","error","message","Sentry","DEFAULT_SIGNATURE","bs58","encode","Buffer","alloc","fill","SimulatorCard","simulating","setSimulating","logs","setLogs","setError","simulate","useCallback","tx","Transaction","populate","Array","header","numRequiredSignatures","simulateTransaction","resp","depth","instructionLogs","prefixBuilder","responseLogs","responseErr","JSON","stringify","ixError","index","instructionError","forEach","log","startsWith","prefix","text","style","regex","matches","matchAll","programAddress","programName","programLabel","failed","includes","instructionLog","indexOf","failedIx","simulationLogs","simulationError","useSimulator","onClick","instructions","map","ix","programId","accountKeys","programIdIndex","toBase58","programLogs","badgeColor","key","TableCardBody","URLSearchParams","clusterPath","pathname","params","newParams","urlParams","set","pickClusterParams","MARKET_REGISTRY","PROGRAM_NAMES","SerumMarketRegistry","address","ALL_CLUSTERS","LIVE_CLUSTERS","MAINNET_ONLY","PROGRAM_DEPLOYMENTS","CONFIG","STAKE","SYSTEM","VOTE","SECP256K1","ASSOCIATED_TOKEN","FEATURE_PROPOSAL","LENDING","MEMO","MEMO_2","SWAP","TOKEN","WORMHOLE","BONFIDA_POOL","BREAK_SOLANA","RAYDIUM_LIQUIDITY_1","RAYDIUM_LIQUIDITY_2","RAYDIUM_STAKING","SERUM_1","SERUM_2","SERUM_3","MANGO_3","PROGRAM_NAME_BY_ID","Config1111111111111111111111111111111111111","StakeProgram","SystemProgram","VOTE_PROGRAM_ID","Secp256k1Program","LOADER_IDS","MoveLdr111111111111111111111111111111111111","NativeLoader1111111111111111111111111111111","BPF_LOADER_DEPRECATED_PROGRAM_ID","BPF_LOADER_PROGRAM_ID","SPECIAL_IDS","Sysvar1111111111111111111111111111111111111","SYSVAR_IDS","SYSVAR_CLOCK_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","addressLabel","tokenRegistry","tokenInfo","symbol","tokenLabel","displayAddress","intoTransactionInstruction","instruction","keys","accounts","account","accountKey","find","pubkey","equals","isSigner","signer","isWritable","writable","TransactionInstruction","data","decode","Overlay","show","ClusterModal","setShow","onClose","showDeveloperSettings","stopPropagation","ClusterToggle","type","defaultChecked","id","onChange","target","checked","htmlFor","CustomClusterInput","activeSuffix","active","updateCustomUrl","editing","setEditing","customClass","onUrlInput","useDebounceCallback","inputTextClass","to","clusterLocation","defaultValue","onFocus","onBlur","onInput","currentTarget","net","btnClass","slug","displayTimestamp","unixTimestamp","shortTimeZoneName","expireDate","Date","dateString","DateTimeFormat","year","month","day","timeString","hour","minute","second","hourCycle","timeZoneName","displayTimestampUtc","timeZone","displayTimestampWithoutDate","announcements","Map","MessageBanner","announcement","timeframe","start","end","estimate","now","getTime","ClusterStatusBanner","Button","ClusterStatusButton","statusName","btnClasses","variant","role","aria-hidden","Navbar","collapse","setCollapse","src","Logo","height","alt","exact","href","rel","TokenRegistryContext","TokenRegistryProvider","setTokenRegistry","TokenListProvider","resolve","then","tokens","tokenList","filterByClusterSlug","getList","reduce","item","useTokenRegistry","SearchBar","setSearch","selectRef","useRef","ref","current","options","buildOptions","noOptionsMessage","placeholder","inputValue","blurInputOnSelect","onMenuClose","blur","meta","styles","pointerEvents","width","onInputChange","components","DropdownIndicator","classNamePrefix","SEARCHABLE_LOADERS","rawSearch","trim","programOptions","matchedPrograms","Object","entries","filter","toLowerCase","label","buildProgramOptions","loaderOptions","matchedLoaders","buildLoaderOptions","sysvarOptions","matchedSysvars","buildSysvarOptions","specialOptions","matchedSpecialIds","buildSpecialOptions","tokenOptions","matchedTokens","from","details","searchLower","buildTokenOptions","isNaN","Number","decoded","FetchStatus","ActionType","defaultReconciler","entry","update","defaultReducer","reducer","useCustomReducer","reconciler","customReducer","useMemo","Clear","Update","combineFetched","fetched","before","findIndex","f","signature","concat","reconcile","transactionMap","foundOldest","HistoryProvider","Cache","fetchParsedTransactions","transactionSignatures","signatures","splice","getParsedConfirmedTransactions","parsed","fetchAccountHistory","fetchTransactions","additionalSignatures","Fetching","getConfirmedSignaturesForAddress2","limit","Fetched","FetchFailed","useAccountHistory","useFetchAccountHistory","refresh","existingMap","signatureInfo","getUnfetchedSignatures","oldest","PublicKeyFromString","coerce","instance","PublicKey","string","TokenAccountType","enums","AccountState","TokenAmount","number","uiAmountString","amount","TokenAccountInfo","mint","owner","tokenAmount","delegate","optional","isNative","boolean","rentExemptReserve","delegatedAmount","closeAuthority","MintAccountInfo","mintAuthority","nullable","supply","isInitialized","freezeAuthority","MultisigAccountInfo","numRequiredSigners","numValidSigners","signers","array","TokenAccount","info","any","TokensProvider","TOKEN_PROGRAM_ID","getParsedTokenAccountsByOwner","accountInfo","parsedInfo","create","useAccountOwnedTokens","useFetchAccountOwnedTokens","fetchAccountTokens","ParsedInfo","BigNumFromString","BN","StakeAccountType","StakeMeta","authorized","staker","withdrawer","lockup","epoch","custodian","StakeAccountInfo","stake","delegation","voter","activationEpoch","deactivationEpoch","warmupCooldownRate","creditsObserved","StakeAccount","VoteAccountType","AuthorizedVoter","authorizedVoter","PriorVoter","authorizedPubkey","epochOfLastAuthorizedSwitch","targetEpoch","EpochCredits","credits","previousCredits","Vote","slot","confirmationCount","VoteAccountInfo","authorizedVoters","authorizedWithdrawer","commission","epochCredits","lastTimestamp","timestamp","nodePubkey","priorVoters","rootSlot","votes","VoteAccount","NonceAccountType","NonceAccountInfo","authority","blockhash","feeCalculator","lamportsPerSignature","NonceAccount","ClockAccountInfo","leaderScheduleEpoch","SysvarClockAccount","literal","EpochScheduleInfo","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","SysvarEpochScheduleAccount","FeesInfo","SysvarFeesAccount","RecentBlockhashesEntry","RecentBlockhashesInfo","SysvarRecentBlockhashesAccount","RentInfo","lamportsPerByteYear","exemptionThreshold","burnPercent","SysvarRentAccount","RewardsInfo","validatorPointValue","SysvarRewardsAccount","SlotHashEntry","hash","SlotHashesInfo","SysvarSlotHashesAccount","SlotHistoryInfo","nextSlot","bits","SysvarSlotHistoryAccount","StakeHistoryEntryItem","effective","activating","deactivating","StakeHistoryEntry","stakeHistory","StakeHistoryInfo","SysvarStakeHistoryAccount","SysvarAccount","union","StakeConfigInfo","slashPenalty","ConfigKey","ValidatorInfoConfigData","record","ValidatorInfoConfigInfo","configData","ValidatorInfoAccount","StakeConfigInfoAccount","ConfigAccount","FlaggedContext","FlaggedAccountsProvider","flaggedAccounts","setFlaggedAccounts","fetch","res","body","split","ProgramAccountInfo","programData","ProgramAccount","ProgramDataAccountInfo","ProgramDataAccount","ProgramBufferAccountInfo","ProgramBufferAccount","ProgramUninitializedAccountInfo","ProgramUninitializedAccount","UpgradeableLoaderAccount","BlockProvider","getBlock","block","useFetchBlock","fetchBlock","REWARDS_AVAILABLE_EPOCH","rewards","combined","highestFetchedEpoch","lowestFetchedEpoch","RewardsProvider","fetchRewards","fromEpoch","highestEpoch","lowestAvailableEpoch","getEpochInfo","epochInfo","getInflationReward","requests","i","Promise","all","results","AccountsProvider","getParsedAccountInfo","space","program","getStakeActivation","activation","executable","fetchStatus","useAccountInfo","useMintAccountInfo","useFetchAccountInfo","fetchAccountInfo","Copyable","replaceText","setState","handleClick","navigator","clipboard","writeText","setTimeout","CopyIcon","title","textColor","PrependCopyIcon","ReplaceWithMessage","Address","alignRight","link","truncate","truncateUnknown","truncateChars","content","MAX_EPOCH","sub","StakeAccountSection","stakeAccount","stakeAccountType","hideDelegation","isFullyInactivated","LockupCard","OverviewCard","DelegationCard","AuthoritiesCard","prettyTimestamp","TYPE_NAMES","uninitialized","initialized","delegated","rewardsPool","displayStatus","activationState","voterPubkey","eq","inactive","hasLockup","UnknownAccountCard","CoingeckoStatus","CoinGeckoClient","CoinGecko","LoadingCard","getEthAddress","extractEth","match","TokenAccountSection","tokenAccount","MintAccountCard","TokenAccountCard","MultisigAccountCard","tokenPriceInfo","mintAddress","fetchInfo","bridgeContractAddress","extensions","bridgeContract","assetContractAddress","assetContract","coinInfo","coinId","setCoinInfo","interval","getCoinInfo","Loading","coins","price","market_data","current_price","usd","volume_24","total_volume","market_cap","market_cap_rank","price_change_percentage_24h","last_updated","Success","catch","setInterval","clearInterval","useCoinGecko","coingeckoId","toLocaleString","minimumFractionDigits","website","unit","balance","BigNumber","toFormat","ErrorCard","retry","retryText","subtext","buttonText","Identicon","props","innerHTML","appendChild","Jazzicon","OwnedTokensCard","ownedTokens","showDropdown","setDropdown","display","useQueryDisplay","toggle","HoldingsDetailTable","HoldingsSummaryTable","detailsList","showLogos","some","t","logoURI","tokenDetails","mappedTokens","token","totalByMint","plus","DisplayDropdown","displayOption","buildLocation","Signature","signatureLabel","Slot","DetailsProvider","getParsedConfirmedTransaction","transaction","useFetchTransactionDetails","fetchDetails","useTransactionDetails","PROGRAM_IDS","INSTRUCTION_LOOKUP","0","1","2","3","4","5","isTokenSwapInstruction","parseTokenSwapInstructionTitle","code","6","7","8","isTokenLendingInstruction","parseTokenLendingInstructionTitle","SERUM_PROGRAM_IDS","Side","OrderType","InitializeMarketDecode","baseLotSize","quoteLotSize","feeRateBps","quoteDustThreshold","vaultSignerNonce","decodeInitializeMarket","decodeInstruction","initializeMarket","market","requestQueue","eventQueue","bids","asks","baseVault","quoteVault","baseMint","quoteMint","NewOrderDecode","side","limitPrice","maxQuantity","orderType","clientId","feeDiscountPubkey","decodeNewOrder","newOrder","openOrders","payer","MatchOrdersDecode","decodeMatchOrders","matchOrders","ConsumeEventsDecode","decodeConsumeEvents","consumeEvents","openOrdersAccounts","k","CancelOrderDecode","orderId","openOrdersSlot","decodeCancelOrder","cancelOrder","CancelOrderByClientIdDecode","decodeCancelOrderByClientId","cancelOrderByClientId","decodeSettleFunds","settleFunds","baseWallet","quoteWallet","vaultSigner","referrerQuoteWallet","isSerumInstruction","MARKETS","SERUM_CODE_LOOKUP","9","10","11","12","13","14","15","parseSerumInstructionCode","readUInt32LE","parseSerumInstructionTitle","PublicKeyToString","InitializeBotDecode","poolSeed","maxNumberOfAsset","numberOfMarkets","decodeInitializeBot","Instruction","Init","systemProgramAccount","rentSysvarAccount","splTokenProgramAccount","poolAccount","mintAccount","payerAccount","CreateBotDecode","feeCollectionPeriod","feeRatio","depositAmounts","markets","decodeCreateBot","Create","splTokenProgramId","clockSysvarKey","mintKey","poolKey","targetPoolTokenKey","serumProgramId","signalProviderKey","DepositDecode","poolTokenAmount","decodeDeposit","Deposit","sigProviderFeeReceiverKey","bonfidaFeeReceiverKey","bonfidaBuyAndBurnKey","CreateDecode","ratioOfPoolAssetsToTrade","coinLotSize","pcLotSize","targetMint","decodeCreateOrder","CreateOrder","payerPoolAssetKey","openOrdersKey","serumRequestQueue","serumEventQueue","serumMarketBids","serumMarketAsks","coinVaultKey","pcVaultKey","dexProgramKey","rentProgramId","srmReferrerKey","CancelOrder","SettleFundsDecode","pcIndex","SettleFunds","poolMintKey","coinPoolAssetKey","pcPoolAssetKey","vaultSignerKey","RedeemDecode","decodeRedeem","Redeem","sourcePoolTokenOwnerKey","sourcePoolTokenKey","CollectFeesDecode","decodeCollectFees","CollectFees","signalProviderPoolTokenKey","bonfidaFeePoolTokenKey","bonfidaBnBPTKey","isBonfidaBotInstruction","BONFIDABOT_PROGRAM_ID","parseBonfidaBotInstructionTitle","RawDetailsProvider","useRawTransactionDetails","getTransaction","response","useFetchRawTransaction","fetchRawTransaction","TransactionsProvider","getSignatureStatus","searchTransactionHistory","confirmations","blockTime","getBlockTime","confirmationStatus","useTransactionStatus","useFetchTransactionStatus","fetchTransactionStatus","Popover","bottom","right","InfoTooltip","justify","onMouseOver","onMouseOut","BalanceDelta","sols","delta","isSol","toNumber","gt","lt","TokenBalancesCard","preTokenBalances","postTokenBalances","rows","preBalanceMap","accountIndex","uiTokenAmount","preBalance","uiAmount","minus","sort","b","generateTokenBalanceRows","accountRows","RawDetails","keyIndex","RawParsedDetails","InstructionCard","defaultRaw","innerCards","childIndex","isArray","errorIndex","isInteger","ixResult","resultClass","showRaw","setShowRaw","SignatureContext","rawDetails","fetchRaw","disabled","r","colSpan","WriteInfo","bytes","offset","FinalizeInfo","UnknownDetailsCard","BpfLoaderDetailsCard","BpfLoaderWriteDetailsCard","BpfLoaderFinalizeDetailsCard","MemoDetailsCard","NewOrderDetailsCard","MatchOrdersDetailsCard","InitializeMarketDetailsCard","ConsumeEventsDetailsCard","CancelOrderDetailsCard","CancelOrderByClientIdDetailsCard","SettleFundsDetailsCard","SerumDetailsCard","parseSerumInstructionKey","InitializeDetailsCard","DelegateDetailsCard","voteAccount","stakeAuthority","AuthorizeDetailsCard","newAuthority","authorityType","SplitDetailsCard","newSplitAccount","WithdrawDetailsCard","withdrawAuthority","destination","DeactivateDetailsCard","InitializeInfo","DelegateInfo","AuthorizeInfo","SplitInfo","WithdrawInfo","DeactivateInfo","MergeInfo","source","stakeHistorySysvar","clockSysvar","MergeDetailsCard","StakeDetailsCard","TransferDetailsCard","AllocateDetailsCard","AllocateWithSeedDetailsCard","base","seed","AssignDetailsCard","AssignWithSeedDetailsCard","CreateDetailsCard","newAccount","CreateWithSeedDetailsCard","NonceInitializeDetailsCard","nonceAccount","nonceAuthority","NonceAdvanceDetailsCard","NonceWithdrawDetailsCard","NonceAuthorizeDetailsCard","newAuthorized","TransferWithSeedDetailsCard","sourceBase","sourceSeed","sourceOwner","CreateAccountInfo","AssignInfo","TransferInfo","CreateAccountWithSeedInfo","AdvanceNonceInfo","WithdrawNonceInfo","InitializeNonceInfo","AuthorizeNonceInfo","AllocateInfo","AllocateWithSeedInfo","AssignWithSeedInfo","TransferWithSeedInfo","SystemDetailsCard","TokenAmountUi","InitializeMint","rentSysvar","InitializeAccount","InitializeMultisig","multisig","Transfer","multisigAuthority","Approve","multisigOwner","Revoke","AuthorityType","SetAuthority","MintTo","multisigMintAuthority","Burn","CloseAccount","FreezeAccount","multisigFreezeAuthority","ThawAccount","TransferChecked","ApproveChecked","MintToChecked","BurnChecked","TokenInstructionType","IX_STRUCTS","initializeMint","initializeAccount","initializeMultisig","transfer","approve","revoke","setAuthority","mintTo","burn","closeAccount","freezeAccount","thawAccount","transfer2","approve2","mintTo2","burn2","transferChecked","approveChecked","mintToChecked","burnChecked","IX_TITLES","TokenDetailsCard","rawType","created","TokenInstruction","tokenAddress","infoMintAddress","useTokenAccountInfo","mintInfo","attributes","tokenSymbol","every","v","publicKey","tag","labelSuffix","TokenLendingDetailsCard","TokenSwapDetailsCard","WormholeDetailsCard","parsWormholeInstructionTitle","CollectFeesDetailsCard","CreateBotDetailsCard","DepositDetailsCard","InitializeBotDetailsCard","RedeemDetailsCard","CreateOrderDetailsCard","BonfidaBotDetailsCard","InitializeBufferInfo","UpgradeInfo","programDataAccount","programAccount","bufferAccount","spillAccount","SetAuthorityInfo","DeployWithMaxDataLenInfo","systemProgram","maxDataLen","BpfUpgradeableLoaderDetailsCard","renderDetails","struct","node","VoteInfo","slotHashesSysvar","voteAuthority","vote","UpdateValidatorInfo","newValidatorIdentity","UpdateCommissionInfo","VoteSwitchInfo","VoteDetailsCard","AssociatedTokenDetailsCard","wallet","mangoGroups","Config","ids","groups","group","accountInfoCache","getAccountInfo","accountInfoPromise","findGroupConfig","filtered","mangoProgramId","isMangoInstruction","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","parseMangoInstructionTitle","decodePlaceSpotOrder","MangoInstructionLayout","PlaceSpotOrder","maxBaseQuantity","maxQuoteQuantity","selfTradeBehavior","decodeCancelSpotOrder","CancelSpotOrder","decodePlacePerpOrder","PlacePerpOrder","quantity","clientOrderId","decodeCancelPerpOrder","CancelPerpOrder","invalidIdOk","decodeChangePerpMarketParams","maintLeverageOption","ChangePerpMarketParams","maintLeverage","initLeverageOption","initLeverage","liquidationFeeOption","liquidationFee","makerFeeOption","makerFee","takerFeeOption","takerFee","rateOption","rate","maxDepthBpsOption","maxDepthBps","targetPeriodLengthOption","targetPeriodLength","mngoPerPeriodOption","mngoPerPeriod","decodeAddSpotMarket","marketIndex","AddSpotMarket","optimalUtil","optimalRate","maxRate","decodeAddPerpMarket","AddPerpMarket","getSpotMarketFromInstruction","spotMarket","groupConfig","spotMarketConfigs","spotMarkets","mangoSpotMarket","getSpotMarketFromSpotMarketConfig","mangoSpotMarketConfig","Market","load","getPerpMarketFromInstruction","perpMarket","perpMarketConfigs","perpMarkets","mangoPerpMarket","getPerpMarketFromPerpMarketConfig","mangoPerpMarketConfig","acc","PerpMarketLayout","PerpMarket","baseDecimals","quoteDecimals","spotMarketFromIndex","spotMarketConfig","AddOracleDetailsCard","AddPerpMarketDetailsCard","moment","duration","AddSpotMarketDetailsCard","CancelPerpOrderDetailsCard","mangoAccount","perpMarketAccountMeta","CancelSpotOrderDetailsCard","spotMarketAccountMeta","ChangePerpMarketParamsDetailsCard","setTargetPeriodLength","liquidityMiningInfo","getTargetPeriodLength","GenericMngoAccountDetailsCard","mangoAccountKeyLocation","GenericPerpMngoDetailsCard","perpMarketKeyLocation","GenericSpotMngoDetailsCard","accountKeyLocation","spotMarketkeyLocation","PlacePerpOrderDetailsCard","orderLotDetails","setOrderLotDetails","baseLotsToNumber","priceLotsToNumber","size","getOrderLotDetails","PlaceSpotOrderDetailsCard","baseSizeLotsToNumber","MangoDetailsCard","InstructionsSection","innerInstructions","INNER_INSTRUCTIONS_START_SLOT","instructionDetails","renderInstructionCard","transactionIx","transactionErrorMessage","instructionErrorMessage","getTransactionError","out","innerError","getInstructionError","ProgramLogSection","logMessages","transactionError","AutoRefresh","TransactionDetailsPage","zeroConfirmationRetries","setZeroConfirmationRetries","autoRefresh","Inactive","BailedOut","Active","retries","StatusCard","AccountsCard","clusterStatus","intervalHandle","fee","recentBlockhash","isNonce","SystemInstruction","decodeInstructionType","statusClass","statusText","renderResult","pre","preBalances","post","postBalances","InstructionContainer","parsedTransaction","this","inner","getTokenProgramInstructionName","getTokenInstructionName","transactionInstruction","TokenHistoryCard","TokenHistoryTable","accountHistories","useAccountHistories","transactionDetailsCache","useTransactionDetailsCache","filteredTokens","fetchHistories","allFoundOldest","allFetchedSome","oldestSlot","earliest","max","fetching","sigSet","Set","mintAndTxs","flatMap","add","TokenTransactionRow","FilterDropdown","filterOptions","nameLookup","formatTokenName","filterOption","memo","tokenInstructionNames","instructionType","InstructionDetails","expanded","setExpanded","instructionTypes","preventDefault","LargestAccountsProvider","getTokenLargestAccounts","createParsedAccountInfo","useFetchTokenLargestAccounts","fetchLargestAccounts","parsedData","TokenLargestAccountsCard","largestAccounts","useTokenLargestTokens","refreshLargest","unitLabel","balanceFixedPoint","prev","decimalIndex","supplyTotal","renderAccountRow","percent","uiAmountPercent","times","dividedBy","AccountHeader","AccountAddressRow","AccountBalanceRow","VoteAccountSection","NonceAccountSection","VotesCard","reverse","SysvarAccountSection","sysvarAccount","SysvarAccountClockCard","SysvarAccountRentCard","SysvarAccountRewardsCard","SysvarAccountEpochScheduleCard","SysvarAccountFeesCard","SysvarAccountRecentBlockhashesCard","SysvarAccountSlotHashes","SysvarAccountSlotHistory","SysvarAccountStakeHistory","val","validatorPointValueFormatted","maximumSignificantDigits","SlotHashesCard","slotHashes","StakeHistoryCard","BlockhashesCard","blockhashes","MAX_SLASH_PENALTY","ConfigAccountSection","configAccount","StakeConfigCard","ValidatorInfoCard","warmupCooldownFormatted","slashPenaltyFormatted","keybaseUsername","UpgradeableLoaderAccountSection","UpgradeableProgramSection","UpgradeableProgramDataSection","UpgradeableProgramBufferSection","programBuffer","HistoryCardHeader","HistoryCardFooter","loadMore","getTransactionRows","transactions","transactionRows","slotTransactions","slotTransaction","TransactionHistoryCard","hasTimestamps","element","date","fromNow","extractMintDetails","mintMap","TokenTransfersCard","mintDetails","detailedHistoryMap","transfers","getTransfer","sourceKey","destinationKey","amountString","TokenInstructionsCard","isRelevantInstruction","instructionName","RewardsCard","useRewards","useFetchRewards","rewardsList","reward","effectiveSlot","postBalance","rewardsFound","TABS_LOOKUP","path","TOKEN_TABS_HIDDEN","AccountDetailsPage","tab","fetchAccount","DetailsSections","isToken","useFlaggedAccounts","tabs","programTypeKey","getTabs","moreTab","InfoSection","MoreSection","TransactionSignatures","rawMessage","signatureRows","verified","toBytes","rawSignature","nacl","detached","verify","verifySignature","SignatureRow","programValidator","AddressWithContext","validator","AccountInfo","errorMessage","ownerAddress","ownerLabel","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","validMessage","readOnly","AccountRow","MAX_TRANSACTION_SIGNATURES","floor","RawInput","setTransactionData","rawTransactionInput","setRows","base64","buffer","min","Uint8Array","atob","c","charCodeAt","signaturesLen","base58","Message","deserializeTransaction","serialize","chunks","hexString","isAccountWritable","decodeParam","param","decodeURIComponent","decodeUrlParams","messageParam","signaturesParam","refreshUrl","parse","validSignatures","decodeSignatures","TransactionInspectorPage","setTransaction","paramString","setParamString","shouldRefreshUrl","encodeURIComponent","btoa","String","fromCharCode","apply","newParam","reset","PermalinkView","LoadedView","onClear","fetchTransaction","DashboardInfoActionType","PerformanceInfoActionType","DEFAULT_FEES","feeLamports","feePayerValidator","PACKET_DATA_SIZE","dashboardInfoReducer","SetLastBlockTime","lastBlockTime","SetPerfSamples","samples","sample","numSlots","samplePeriodSecs","samplesInHour","avgSlotTime_1h","sum","cur","absoluteSlot","ClusterStatsStatus","Ready","avgSlotTime_1min","SetEpochInfo","SetError","Reset","performanceInfoReducer","short","numTransactions","avgTps","medium","downsampleByFactor","long","perfHistory","historyMaxTps","transactionCount","SetTransactionCount","series","factor","num","downsampledIndex","mean","differential","n","initialPerformanceInfo","initialDashboardInfo","blockHeight","slotIndex","slotsInEpoch","StatsProviderContext","DashboardContext","PerformanceContext","SolanaClusterStatsProvider","setActive","dashboardInfo","dispatchDashboardInfo","performanceInfo","dispatchPerformanceInfo","resetData","getConnection","lastSlot","getPerformanceSamples","getRecentPerformanceSamples","getTransactionCount","performanceInterval","transactionCountInterval","epochInfoInterval","blockTimeInterval","setTimedOut","useStatsProvider","usePerformanceInfo","TpsCard","TpsCardBody","StatsNotReady","TpsBarChart","Status","SERIES","SERIES_INFO","CUSTOM_TOOLTIP","tooltipModel","tooltipEl","document","getElementById","createElement","opacity","dataPoints","tooltipContent","querySelector","innerHtml","position","_chart","canvas","getBoundingClientRect","left","window","pageXOffset","caretX","top","pageYOffset","caretY","setSeries","averageTps","AnimatedTransactionCount","seriesData","chartOptions","tooltips","intersect","enabled","custom","legend","scales","xAxes","ticks","gridLines","yAxes","stepSize","fontSize","fontColor","beginAtZero","suggestedMax","animation","hover","animationDuration","responsiveAnimationDuration","CHART_OPTIONS","seriesLength","chartData","labels","datasets","backgroundColor","hoverBackgroundColor","borderWidth","classNames","txCountRef","countUp","period","lastUpdate","txCount","elapsedPeriods","countUpEnd","PERF_UPDATE_SEC","delay","useEasing","preserveValue","separator","SupplyProvider","Idle","Disconnected","getSupply","useSupply","useFetchSupply","setVoteAccounts","getVoteAccounts","useVoteAccounts","voteAccounts","fetchVoteAccounts","STAKE_HISTORY_ACCOUNT","ClusterStatsPage","StakingComponent","StatsCardBody","fetchSupply","stakeInfo","fetchData","deliquentStake","delinquent","activatedStake","delinquentStakePercentage","solanaInfo","circulatingPercentage","circulating","total","displayLamports","useDashboardInfo","hourlySlotTime","averageSlotTime","currentEpoch","epochProgress","epochTimeRemaining","timedOut","clearTimeout","RichListProvider","getLargestAccounts","nonCirculating","TopAccountsCard","supplyCount","richList","useRichList","fetchRichList","useFetchRichList","useQueryFilter","filterTitle","SupplyCard","renderHeader","SupplyPage","BlockHistoryCard","numDisplayed","setNumDisplayed","displayed","BlockRewardsCard","rewardsDisplayed","setRewardsDisplayed","percentChange","rewardType","BlockProgramsCard","totalTransactions","txSuccesses","txFrequency","ixFrequency","totalInstructions","programUsed","trackProgram","frequency","innerIx","successful","count","programEntries","txFreq","ixFreq","successes","BlockAccountsCard","accountStats","statsMap","txSet","stats","reads","writes","accountEntries","aCount","bCount","BlockOverviewCard","confirmedBlock","useBlock","committedTxs","parentSlot","previousBlockhash","TABS","BlockDetailsPage","slotNumber","output","ADDRESS_ALIASES","TX_ALIASES","App","render","StatsProvider","MintsProvider","dsn","ReactDOM"],"mappings":"6bAoBYA,EAMAC,E,qGAnBL,SAASC,EAAcC,GAC5B,OAAQA,GACN,IAAK,eACH,MAAO,sCACT,IAAK,UACH,MAAO,sCACT,IAAK,SACH,MAAO,qCACT,QACE,MAAO,wC,SAIDH,O,yBAAAA,I,2BAAAA,I,sBAAAA,M,cAMAC,O,6BAAAA,I,qBAAAA,I,mBAAAA,I,oBAAAA,M,KAOL,IAAMG,EAAW,CACtBH,EAAQI,YACRJ,EAAQK,QACRL,EAAQM,OACRN,EAAQO,QAGH,SAASC,EAAYN,GAC1B,OAAQA,GACN,KAAKF,EAAQI,YACX,MAAO,eACT,KAAKJ,EAAQK,QACX,MAAO,UACT,KAAKL,EAAQM,OACX,MAAO,SACT,KAAKN,EAAQO,OACX,MAAO,UAIN,SAASE,EAAYP,GAC1B,OAAQA,GACN,KAAKF,EAAQI,YACX,MAAO,UACT,KAAKJ,EAAQK,QACX,MAAO,UACT,KAAKL,EAAQM,OACX,MAAO,SACT,KAAKN,EAAQO,OACX,MAAO,UAIN,IAAMG,EAAmBT,EAAc,gBACjCU,EAAcV,EAAc,WAC5BW,EAAaX,EAAc,UAEjC,SAASY,EAAWX,EAAkBY,GAC3C,OAAQZ,GACN,KAAKF,EAAQM,OACX,OAAOM,EAAWG,QAAQ,MAAO,gBACnC,KAAKf,EAAQI,YACX,OAAOM,EAAiBK,QAAQ,MAAO,gBACzC,KAAKf,EAAQK,QACX,OAAOM,EAAYI,QAAQ,MAAO,gBACpC,KAAKf,EAAQO,OACX,OAAOO,GAIN,IAAME,EAAkBhB,EAAQI,YAkBvC,SAASa,EAAeC,EAAcC,GACpC,OAAQA,EAAOC,QACb,KAAKrB,EAAcsB,UACnB,KAAKtB,EAAcuB,QACjB,OACEJ,EAAMhB,UAAYiB,EAAOjB,SACzBgB,EAAMJ,YAAcK,EAAOL,UAEpBI,EACFC,EAET,KAAKpB,EAAcwB,WACjB,OAAOJ,GAqBb,IAAMK,EAAeC,IAAMC,mBACzBC,GAEIC,EAAeH,IAAMC,mBAAiCC,GACtDE,EAAkBJ,IAAMC,mBAAoCC,GAG3D,SAASG,EAAT,GAA8D,IAAnCC,EAAkC,EAAlCA,SAAkC,EACxCN,IAAMO,WAAWf,EAAgB,CACzDf,QAASc,EACTF,UAAW,GACXM,OAAQrB,EAAcwB,aAJ0C,mBAC3DL,EAD2D,KACpDe,EADoD,OAMhCR,IAAMS,UAAS,GANiB,mBAM3DC,EAN2D,KAMhDC,EANgD,KAO5DC,EAAQC,cACRpC,EA/BR,SAAoBmC,GAElB,OADqBA,EAAME,IAAI,YAE7B,IAAK,SACH,OAAOvC,EAAQO,OACjB,IAAK,SACH,OAAOP,EAAQM,OACjB,IAAK,UACH,OAAON,EAAQK,QACjB,IAAK,eACL,QACE,OAAOL,EAAQI,aAoBHoC,CAAWH,GACrBI,EACJC,eAC4C,OAA5CC,aAAaC,QAAQ,mBACjB9B,EAAY2B,EACdJ,EAAME,IAAI,cAAgB,GAC1BrB,EAAMJ,UACJ+B,EAAUC,cACVC,EAAWC,cAwBjB,OArBAvB,IAAMwB,WAAU,YACTR,GAAmBJ,EAAMa,IAAI,eAChCb,EAAMc,OAAO,aACbN,EAAQO,KAAR,2BAAkBL,GAAlB,IAA4BM,OAAQhB,EAAMiB,iBAE3C,CAACb,IAGJhB,IAAMwB,WAAU,WACd,GAAI/C,IAAYF,EAAQO,QAEG,IAArBO,EAAUyC,OAGZ,OAFAlB,EAAMc,OAAO,gBACbN,EAAQO,KAAR,2BAAkBL,GAAlB,IAA4BM,OAAQhB,EAAMiB,cAK9CE,EAAcvB,EAAU/B,EAASY,KAChC,CAACZ,EAASY,IAGX,cAACc,EAAa6B,SAAd,CAAuBC,MAAOxC,EAA9B,SACE,cAACW,EAAgB4B,SAAjB,CAA0BC,MAAOzB,EAAjC,SACE,cAACT,EAAaiC,SAAd,CAAuBC,MAAO,CAACvB,EAAWC,GAA1C,SACGL,Q,SAOIyB,E,kFAAf,WACEvB,EACA/B,EACAY,GAHF,iBAAA6C,EAAA,6DAKE1B,EAAS,CACPb,OAAQrB,EAAcwB,WACtBrB,UACAY,cARJ,SAYU8C,EAAa,IAAIC,IAAWhD,EAAWX,EAASY,IAZ1D,SAasC8C,EAAWE,yBAbjD,OAaUC,EAbV,OAcI9B,EAAS,CACPb,OAAQrB,EAAcsB,UACtBnB,UACAY,YACAiD,wBAlBN,gDAqBQ7D,IAAYF,EAAQO,QACtByD,YAAY,EAAD,GAAQ,CAAEnD,WAAYA,EAAWX,EAASY,KAEvDmB,EAAS,CACPb,OAAQrB,EAAcuB,QACtBpB,UACAY,cA3BN,0D,sBAgCO,SAASmD,IACd,IAAMhC,EAAWR,IAAMyC,WAAWrC,GAClC,IAAKI,EACH,MAAM,IAAIkC,MAAJ,4DAGR,OAAO,SAACrD,GACN0C,EAAcvB,EAAUjC,EAAQO,OAAQO,IAIrC,SAASsD,IACd,IAAMC,EAAU5C,IAAMyC,WAAWtC,GACjC,IAAKyC,EACH,MAAM,IAAIF,MAAJ,oDAER,OAAO,2BACFE,GADL,IAEEC,IAAKzD,EAAWwD,EAAQnE,QAASmE,EAAQvD,WACzCyD,KAAM9D,EAAY4D,EAAQnE,WAIvB,SAASsE,IACd,IAAMH,EAAU5C,IAAMyC,WAAW1C,GACjC,IAAK6C,EACH,MAAM,IAAIF,MAAJ,yDAER,OAAOE,I,gCC5PT,6WAgBO,SAASI,EAAkBC,GAChC,MAAM,IAAIP,MAAM,gBAGX,SAASQ,EACdC,EACAC,GAKA,OAFmB,kBAARD,EAA8BE,SAASF,GACjCA,GACEG,KAAKC,IAAI,GAAIH,GAG3B,SAASI,EAAcC,GAC5B,GAAwB,kBAAbA,EACT,OAAOH,KAAKI,IAAID,GAxBY,IA2B9B,IAAIE,EAAiB,EACjBF,EAASG,UACXD,GAAkB,GAGpB,IACME,EADcJ,EAASC,MACM7B,SAAS,IAAIiC,SAAS,GAAI,KACvDC,EAAaF,EAAe/B,OAAS,EACrCkC,EACJH,EAAeI,MAAM,EAAGF,GACxB,IACAF,EAAeI,MAAMF,GACvB,OAAOJ,EAAiBO,WAAWF,GAG9B,SAASG,EACdV,GAES,IADTW,EACQ,uDADwB,EAE1BC,EAAMb,EAAcC,GAC1B,OAAO,IAAIa,KAAKC,aAAa,QAAS,CAAEH,0BAAyBI,OAAOH,GAGnE,SAASI,EAAT,GAMH,IALFhB,EAKC,EALDA,SAKC,IAJDW,6BAIC,MAJuB,EAIvB,EACD,OACE,0CAEE,sBAAMM,UAAU,iBAAhB,SACGP,EAAoBV,EAAUW,QAMvC,IAAMO,EAAY,IAAIC,IAAiB,IAAIC,KAqBpC,SAASC,EACdC,GAES,IADTC,EACQ,uDArFiB,IAsFzB,OAAOL,EAAUM,SAASF,EAAQC,GAG7B,SAASE,EAAKC,EAAerD,GAElC,IADA,IAAIsD,EAAS,GACND,EAAMrD,QACXsD,EAAOzD,KAAKwD,EAAME,OAAO,EAAGvD,IAC5BqD,EAAQA,EAAME,OAAOvD,GAEvB,OAAOsD,EAAOE,KAAK,MAGd,SAASrE,IACd,IAAMsE,EAAO,OACb,IAGE,OAFArE,aAAasE,QAAQD,EAAMA,GAC3BrE,aAAauE,WAAWF,IACjB,EACP,MAAOG,GACP,OAAO,GAIJ,SAASC,EAAiBC,GAC/B,IAAMR,EAASQ,EAAItG,QAAQ,WAAY,OACvC,OAAO8F,EAAOS,OAAO,GAAGC,cAAgBV,EAAOnB,MAAM,GAGhD,SAAS8B,EAAkB9D,GAA2B,IAAZ+D,EAAW,uDAAH,EACvD,OAAI/D,EAAQ,IAAYA,EACpBA,GAAS,KAAOA,EAAQ,MAAcA,EAAQ,KAAKgE,QAAQD,GAAS,IACpE/D,GAAS,KAAOA,EAAQ,MAAcA,EAAQ,KAAKgE,QAAQD,GAAS,IACpE/D,GAAS,KAAOA,EAAQ,OAAeA,EAAQ,KAAKgE,QAAQD,GAAS,IACrE/D,GAAS,OAAeA,EAAQ,MAAMgE,QAAQD,GAAS,SAA3D,EAzDFrB,EAAUuB,WAAW,CACnBC,SAAU,QACVC,OAAQ,GACRC,UAAW,IACXC,OAAO,EACPC,MAAO,CAAC,IAAK,IAAK,IAAK,KACvBC,QAAS,IAEX7B,EAAU8B,YAAY,QAAS,CAC7BC,EAAG,iBAAM,KACTC,GAAI,iBAAM,MACVC,EAAG,iBAAM,KACTC,EAAG,iBAAM,KACTC,EAAG,iBAAM,KACTC,EAAG,iBAAM,KACTC,EAAG,iBAAM,KACTC,GAAI,iBAAM,MACVC,QAAS,O,gCC7FX,8CAQO,SAAS3E,EAAY4E,EAAcC,GACxC,GAAID,aAAezE,MAAO,CACxB2E,QAAQC,MAAMH,EAAKA,EAAII,SACvB,IACEC,IAAwBL,EAAK,CAC3BC,SAEF,MAAOD,Q,mMCGPM,EAAoBC,IAAKC,OAAOC,EAAOC,MAAM,IAAIC,KAAK,IAErD,SAASC,EAAT,GAA2D,IAAlCR,EAAiC,EAAjCA,QACtB9I,EAAYkE,cAAZlE,QADuD,EAwGjE,SAAsB8I,GAAmB,IAAD,EACb5E,cAAjBlE,EAD8B,EAC9BA,QAASoE,EADqB,EACrBA,IADqB,EAEF7C,IAAMS,UAAS,GAFb,mBAE/BuH,EAF+B,KAEnBC,EAFmB,OAGdjI,IAAMS,SAAwC,MAHhC,mBAG/ByH,EAH+B,KAGzBC,EAHyB,OAIZnI,IAAMS,WAJM,mBAI/B6G,EAJ+B,KAIxBc,EAJwB,KA+JtC,OAzJApI,IAAMwB,WAAU,WACd2G,EAAQ,MACRF,GAAc,GACdG,OAASlI,KACR,CAAC2C,IAqJG,CACLwF,SApJcrI,IAAMsI,aAAY,WAChC,IAAIN,EAAJ,CACAI,OAASlI,GACT+H,GAAc,GAEd,IAAM9F,EAAa,IAAIC,IAAWS,EAAK,aACvC,sBAAC,oDAAAX,EAAA,sEAESqG,EAAKC,IAAYC,SACrBlB,EACA,IAAImB,MAAMnB,EAAQoB,OAAOC,uBAAuBd,KAC9CL,IALP,SAUsBtF,EAAW0G,oBAAoBN,GAVrD,UAUSO,EAVT,OAYOC,EAAQ,EACRC,EAAqC,GACnCC,EAAgB,SAACF,GAErB,OADe,IAAIL,MAAMK,EAAQ,GAAGjB,KAAK,YAAgBxC,KAAK,IAC9C,MAIZ4D,EAAeJ,EAAK7G,MAAMiG,KAC1BiB,EAAcL,EAAK7G,MAAMkF,IAC1B+B,EAtBR,qBAuBSJ,EAAK7G,MAAMkF,IAvBpB,uBAuB+B,IAAIzE,MAAM0G,KAAKC,UAAUF,IAvBxD,cAwBW,IAAIzG,MAAM,oBAxBrB,YAyBcyG,EAzBd,oBA0BgC,kBAAhBA,EA1BhB,iBA2BWG,EAAWH,EAAD,iBA3BrB,cA4BgCG,EA5BhC,GA4BcC,EA5Bd,KA6B8B,kBADThC,EA5BrB,QA8BSiC,EAAmB,CAAED,QAAOhC,YA9BrC,8BAiCa,IAAI7E,MAAMyG,GAjCvB,QAqCGD,EAAaO,SAAQ,SAACC,GACpB,GAAIA,EAAIC,WAAW,gBACjBX,EAAgBA,EAAgBlH,OAAS,GAAGoG,KAAKvG,KAAK,CACpDiI,OAAQX,EAAcF,GACtBc,KAAMH,EACNI,MAAO,cAEJ,CACL,IAAMC,EAAQ,iCACRC,EAAO,YAAON,EAAIO,SAASF,IAEjC,GAAIC,EAAQlI,OAAS,EAAG,CACtB,IAAMoI,EAAiBF,EAAQ,GAAG,GAC5BG,EACJC,YAAaF,EAAgBzL,IAA7B,mBACYyL,EADZ,aAGY,IAAVnB,EACFC,EAAgBrH,KAAK,CACnBuG,KAAM,GACNmC,QAAQ,IAGVrB,EAAgBA,EAAgBlH,OAAS,GAAGoG,KAAKvG,KAAK,CACpDiI,OAAQX,EAAcF,GACtBe,MAAO,OACPD,KAAK,YAAD,OAAcM,KAItBpB,SACK,GAAIW,EAAIY,SAAS,WACtBtB,EAAgBA,EAAgBlH,OAAS,GAAGoG,KAAKvG,KAAK,CACpDiI,OAAQX,EAAcF,GACtBe,MAAO,UACPD,KAAK,6BAEPd,SACK,GAAIW,EAAIY,SAAS,UAAW,CACjC,IAAMC,EACJvB,EAAgBA,EAAgBlH,OAAS,GACtCyI,EAAeF,SAClBE,EAAeF,QAAS,EACxBE,EAAerC,KAAKvG,KAAK,CACvBiI,OAAQX,EAAcF,GACtBe,MAAO,UACPD,KAAK,2BAAD,OAA6BH,EAAIzF,MACnCyF,EAAIc,QAAQ,MAAQ,OAI1BzB,SAEc,IAAVA,IACFC,EAAgBrH,KAAK,CACnBuG,KAAM,GACNmC,QAAQ,IAEVtB,KAGFC,EAAgBA,EAAgBlH,OAAS,GAAGoG,KAAKvG,KAAK,CACpDiI,OAAQX,EAAcF,GACtBc,KAAMH,EACNI,MAAO,cAQXN,GAA+C,IAA3BR,EAAgBlH,QACtCkH,EAAgBrH,KAAK,CACnBuG,KAAM,GACNmC,QAAQ,IAKVb,GACAA,EAAiBD,QAAUP,EAAgBlH,OAAS,KAE9C2I,EAAWzB,EAAgBQ,EAAiBD,QACzCc,QAAS,EAClBI,EAASvC,KAAKvG,KAAK,CACjBiI,OAAQX,EAAc,GACtBY,KAAK,kBAAD,OAAoBL,EAAiBjC,SACzCuC,MAAO,aAIX3B,EAAQa,GAjIX,kDAmIG3B,QAAQC,MAAR,MACAa,EAAQ,MACJ,gBAAezF,OACjB0F,EAAS,KAAIb,SAtIlB,yBAyIGU,GAAc,GAzIjB,4EAAD,MA4IC,CAACxJ,EAASoE,EAAK0E,EAASS,IAGzBA,aACA0C,eAAgBxC,EAChByC,gBAAiBrD,GApQfsD,CAAarD,GAJfc,EAH6D,EAG7DA,SACAL,EAJ6D,EAI7DA,WACgBE,EAL6C,EAK7DwC,eACAC,EAN6D,EAM7DA,gBAEF,OAAI3C,EAEA,sBAAKtD,UAAU,OAAf,UACE,qBAAKA,UAAU,cAAf,SACE,oBAAIA,UAAU,oBAAd,sCAEF,sBAAKA,UAAU,wBAAf,UACE,sBAAMA,UAAU,sCADlB,mBAMMwD,EAiCV,sBAAKxD,UAAU,OAAf,UACE,sBAAKA,UAAU,cAAf,UACE,oBAAIA,UAAU,oBAAd,oCACA,wBAAQA,UAAU,8BAA8BmG,QAASxC,EAAzD,sBAIF,cAAC,IAAD,UACGd,EAAQuD,aAAaC,KAAI,SAACC,EAAIzB,GAC7B,IAAM0B,EAAY1D,EAAQ2D,YAAYF,EAAGG,gBACnChB,EACJC,YAAaa,EAAUG,WAAY3M,IAAY,UAC3C4M,EAA2CnD,EAAKqB,GAElD+B,EAAa,QAKjB,OAJID,IACFC,EAAaD,EAAYhB,OAAS,UAAY,WAI9C,6BACE,+BACE,sBAAK3F,UAAU,4BAAf,UACE,uBAAMA,UAAS,2BAAsB4G,EAAtB,SAAf,cACI/B,EAAQ,KAEXY,EAJH,kBAMCkB,GACC,qBAAK3G,UAAU,uEAAf,SACG2G,EAAYnD,KAAK6C,KAAI,SAACrB,EAAK6B,GAC1B,OACE,iCACE,sBAAM7G,UAAU,aAAhB,SAA8BgF,EAAIE,SAClC,sBAAMlF,UAAS,eAAUgF,EAAII,OAA7B,SACGJ,EAAIG,SAHE0B,YAZdhC,WAnDf,sBAAK7E,UAAU,OAAf,UACE,sBAAKA,UAAU,cAAf,UACE,oBAAIA,UAAU,oBAAd,oCACA,wBAAQA,UAAU,8BAA8BmG,QAASxC,EAAzD,yBAIDsC,EACC,sBAAKjG,UAAU,YAAf,sCAEE,sBAAMA,UAAU,oBAAhB,SAAqCiG,OAGvC,qBAAKjG,UAAU,uBAAf,SACE,+BACE,6HAIA,0H,uMC7Dd,kDAEO,SAAS8G,EAAT,GAAqE,IAA5ClL,EAA2C,EAA3CA,SAC9B,OACE,qBAAKoE,UAAU,wBAAf,SACE,uBAAOA,UAAU,yCAAjB,SACE,uBAAOA,UAAU,OAAjB,SAAyBpE,U,2NCH1B,SAASO,IACd,OAAO,IAAI4K,gBAAgBlK,cAAcK,QAGpC,IAAM8J,EAAc,SAACC,EAAkBC,GAC5C,OAAO,SAACtK,GAAD,mBAAC,eAMH,SACLA,EACAuK,GAEA,IAAMC,EAAY,IAAIL,gBAAgBnK,EAASM,QACzCnD,EAAUqN,EAAUhL,IAAI,WACxBzB,EAAYyM,EAAUhL,IAAI,aAGhC+K,EAAYA,GAAa,IAAIJ,gBACzBhN,GAASoN,EAAUE,IAAI,UAAWtN,GAClCY,GAAWwM,EAAUE,IAAI,YAAa1M,GAE1C,OAAO,2BACFiC,GADL,IAEEM,OAAQiK,EAAUhK,aApBfmK,CAAkB1K,EAAUsK,IAD1B,IAELD,gB,qWCREM,EAA6C,CACjD,+CAAgD,qBAChD,+CAAgD,qCAChD,6CAAgD,mCAChD,+CAAgD,yCAChD,+CAAgD,yCAChD,+CAAgD,wCAChD,+CAAgD,4CAChD,6CAAgD,mCAEhD,6CAAgD,qBAChD,+CAAgD,qCAChD,+CAAgD,mCAChD,+CAAgD,yCAChD,6CAAgD,yCAChD,4CAA+C,wCAC/C,+CAAgD,4CAChD,+CAAgD,mCAEhD,6CAAgD,oBAChD,+CAAgD,oCAChD,6CAAgD,kCAChD,+CAAgD,wCAChD,6CAAgD,wCAChD,6CAAgD,uCAChD,6CAAgD,2CAChD,+CAAgD,kCAEhD,+CAAgD,oBAChD,+CAAgD,oBAChD,6CAAgD,oCAChD,+CAAgD,kCAChD,+CAAgD,wCAChD,+CAAgD,wCAChD,+CAAgD,uCAChD,+CAAgD,2CAChD,+CAAgD,kCAEhD,6CAAgD,oBAChD,6CAAgD,oCAChD,4CAA+C,kCAC/C,+CAAgD,wCAChD,4CAA+C,wCAC/C,6CAAgD,uCAChD,6CAAgD,2CAChD,+CAAgD,kCAEhD,6CAAgD,oBAChD,+CAAgD,oBAChD,+CAAgD,oCAChD,+CAAgD,kCAChD,+CAAgD,wCAChD,4CAA+C,wCAC/C,6CAAgD,uCAChD,6CAAgD,2CAChD,+CAAgD,kCAEhD,+CAAgD,oBAChD,6CAAgD,oCAChD,+CAAgD,kCAChD,6CAAgD,wCAChD,6CAAgD,wCAChD,+CAAgD,uCAChD,6CAAgD,2CAChD,6CAAgD,kCAEhD,6CAAgD,oBAChD,+CAAgD,oCAChD,4CAA+C,kCAC/C,+CAAgD,wCAChD,6CAAgD,wCAChD,+CAAgD,uCAChD,6CAAgD,2CAChD,+CAAgD,kCAEhD,6CAAgD,oBAChD,+CAAgD,oCAChD,+CAAgD,kCAChD,+CAAgD,wCAChD,6CAAgD,wCAChD,+CAAgD,uCAChD,+CAAgD,2CAChD,6CAAgD,kCAEhD,6CAAgD,oBAChD,+CAAgD,oCAChD,6CAAgD,kCAChD,6CAAgD,wCAChD,6CAAgD,wCAChD,+CAAgD,uCAChD,6CAAgD,2CAChD,6CAAgD,kCAEhD,6CAAgD,oBAChD,+CAAgD,oCAChD,6CAAgD,kCAChD,+CAAgD,wCAChD,+CAAgD,wCAChD,+CAAgD,uCAChD,6CAAgD,2CAChD,6CAAgD,kCAEhD,+CAAgD,oBAChD,6CAAgD,oCAChD,6CAAgD,kCAChD,4CAA+C,wCAC/C,6CAAgD,wCAChD,+CAAgD,uCAChD,+CAAgD,2CAChD,6CAAgD,kCAEhD,+CAAgD,qBAChD,+CAAgD,qCAChD,+CAAgD,mCAChD,6CAAgD,yCAChD,+CAAgD,yCAChD,+CAAgD,wCAChD,6CAAgD,4CAChD,6CAAgD,mCAEhD,6CAAgD,qBAChD,6CAAgD,qCAChD,6CAAgD,mCAChD,6CAAgD,yCAChD,+CAAgD,yCAChD,+CAAgD,wCAChD,+CAAgD,4CAChD,6CAAgD,mCAEhD,+CAAgD,oBAChD,+CAAgD,oCAChD,+CAAgD,kCAChD,+CAAgD,wCAChD,+CAAgD,wCAChD,+CAAgD,uCAChD,+CAAgD,2CAChD,+CAAgD,kCAEhD,6CAAgD,oBAChD,+CAAgD,oCAChD,4CAA+C,kCAC/C,6CAAgD,wCAChD,6CAAgD,wCAChD,+CAAgD,uCAChD,+CAAgD,2CAChD,6CAAgD,kCAEhD,6CAAgD,oBAChD,6CAAgD,oCAChD,+CAAgD,kCAChD,6CAAgD,wCAChD,6CAAgD,wCAChD,+CAAgD,uCAChD,+CAAgD,2CAChD,6CAAgD,kCAEhD,+CAAgD,oBAChD,+CAAgD,oCAChD,6CAAgD,kCAChD,+CAAgD,wCAChD,+CAAgD,wCAChD,6CAAgD,uCAChD,6CAAgD,2CAChD,+CAAgD,mCAO3C,I,QCnJKC,EDmJCC,EAAsB,CACjCrL,IALF,SAAasL,EAAiB3N,GAC5B,GAAIA,IAAYF,IAAQI,YAAa,OAAOsN,EAAgBG,M,SChJlDF,K,wBAAAA,E,sBAAAA,E,wBAAAA,E,oBAAAA,E,8BAAAA,E,4CAAAA,E,4CAAAA,E,0BAAAA,E,oBAAAA,E,yBAAAA,E,oBAAAA,E,sBAAAA,E,oBAAAA,E,oCAAAA,E,oCAAAA,E,wDAAAA,E,wDAAAA,E,0CAAAA,E,2BAAAA,E,2BAAAA,E,2BAAAA,E,4BAAAA,M,KA8BZ,IAAMG,EAAe,CACnB9N,IAAQO,OACRP,IAAQM,OACRN,IAAQK,QACRL,IAAQI,aAGJ2N,EAAgB,CAAC/N,IAAQM,OAAQN,IAAQK,QAASL,IAAQI,aAE1D4N,EAAe,CAAChO,IAAQI,aAEjB6N,GAAmB,mBAE7BN,EAAcO,OAASJ,GAFM,cAG7BH,EAAcQ,MAAQL,GAHO,cAI7BH,EAAcS,OAASN,GAJM,cAK7BH,EAAcU,KAAOP,GALQ,cAM7BH,EAAcW,UAAYR,GANG,cAS7BH,EAAcY,iBAAmBT,GATJ,cAU7BH,EAAca,iBAAmBV,GAVJ,cAW7BH,EAAcc,QAAUV,GAXK,cAY7BJ,EAAce,KAAOZ,GAZQ,cAa7BH,EAAcgB,OAASb,GAbM,cAc7BH,EAAciB,KAAOb,GAdQ,cAe7BJ,EAAckB,MAAQf,GAfO,cAkB7BH,EAAcmB,SAAWd,GAlBI,cAmB7BL,EAAcoB,aAAef,GAnBA,cAoB7BL,EAAcqB,aAAejB,GApBA,cAqB7BJ,EAAcsB,oBAAsBjB,GArBP,cAsB7BL,EAAcuB,oBAAsBlB,GAtBP,cAuB7BL,EAAcwB,gBAAkBnB,GAvBH,cAwB7BL,EAAcyB,QAAUpB,GAxBK,cAyB7BL,EAAc0B,QAAUrB,GAzBK,cA0B7BL,EAAc2B,QAAUtB,GA1BK,cA2B7BL,EAAc4B,QAAUvB,GA3BK,GA8BnBwB,GAAkB,GAE7BC,4CAA6C9B,EAAcO,QAF9B,cAG5BwB,IAAahD,UAAUG,WAAac,EAAcQ,OAHtB,cAI5BwB,IAAcjD,UAAUG,WAAac,EAAcS,QAJvB,cAK5BwB,IAAgB/C,WAAac,EAAcU,MALf,cAM5BwB,IAAiBnD,UAAUG,WAAac,EAAcW,WAN1B,6DASiBX,EAAcY,kBAT/B,6DAUiBZ,EAAca,kBAV/B,4DAWgBb,EAAce,MAX9B,4DAYgBf,EAAcgB,QAZ9B,4DAagBhB,EAAciB,MAb9B,4DAcgBjB,EAAckB,OAd9B,4DAegBlB,EAAcc,SAf9B,4DAkBgBd,EAAcmB,UAlB9B,4DAmBgBnB,EAAcoB,cAnB9B,6DAoBiBpB,EAAcqB,cApB/B,4DAsB3BrB,EAAcsB,qBAtBa,cAuB7B,+CACEtB,EAAcuB,qBAxBa,6DAyBiBvB,EAAcwB,iBAzB/B,6DA0BiBxB,EAAcyB,SA1B/B,6DA2BiBzB,EAAc0B,SA3B/B,cA4B7B,+CAAgD1B,EAAc2B,SA5BjC,4DA6BgB3B,EAAc4B,SA7B9B,GAiClBO,GAAU,GACrBC,4CAA6C,cAC7CC,4CAA6C,iBAFxB,cAGpBC,IAAiCpD,WAAa,cAH1B,cAIpBqD,IAAsBrD,WAAa,gBAJf,4DAKwB,0BALxB,GAQVsD,EAAyC,CACpD,8CAA+C,cAC/CC,4CAA6C,UAGlCC,GAAU,mBACpBC,IAAoBzD,WAAa,iBADb,4DAEwB,0BAFxB,4DAGwB,gBAHxB,4DAIwB,8BAJxB,cAKpB0D,IAAmB1D,WAAa,gBALZ,cAMpB2D,IAAsB3D,WAAa,mBANf,4DAOwB,uBAPxB,4DAQwB,wBARxB,cASpB4D,IAA4B5D,WAAa,yBATrB,4DAUwB,wBAVxB,GAahB,SAAShB,EACdgC,EACA3N,GAEA,IAAM0L,EAAc4D,EAAmB3B,GACvC,OAAIjC,GAAeqC,EAAoBrC,GAAaG,SAAS7L,GACpD0L,EAGFkE,EAAWjC,GAgBb,SAAS6C,EACd7C,EACA3N,EACAyQ,GAEA,OACE9E,EAAagC,EAAS3N,IACtBmQ,EAAWxC,IACXsC,EAAYtC,IArBT,SACLA,EACA8C,GAEA,GAAKA,EAAL,CACA,IAAMC,EAAYD,EAAcpO,IAAIsL,GACpC,GAAK+C,EACL,OAAIA,EAAUrM,OAASqM,EAAUC,OACxBD,EAAUrM,KAEb,GAAN,OAAUqM,EAAUC,OAApB,cAAgCD,EAAUrM,OAYxCuM,CAAWjD,EAAS8C,IACpB/C,EAAoBrL,IAAIsL,EAAS3N,GAI9B,SAAS6Q,EACdlD,EACA3N,EACAyQ,GAEA,OAAOD,EAAa7C,EAAS3N,EAASyQ,IAAkB9C,EAGnD,SAASmD,EACdhH,EACAiH,GAEA,IAAMjI,EAAUgB,EAAGhB,QACnB,KAAI,WAAYiI,GAAhB,CAEA,IAJoC,EAI9BC,EAAO,GAJuB,cAKdD,EAAYE,UALE,yBAKzBC,EALyB,QAM5BC,EAAarI,EAAQ2D,YAAY2E,MAAK,qBAAGC,OACtCC,OAAOJ,MAEhB,IAAKC,EAAY,MAAM,CAAN,UACjBH,EAAK9N,KAAK,CACRmO,OAAQF,EAAWE,OACnBE,SAAUJ,EAAWK,OACrBC,WAAYN,EAAWO,YAR3B,2BAA4C,CAAC,IAAD,yCALR,8BAiBpC,OAAO,IAAIC,IAAuB,CAChCC,KAAM3I,IAAK4I,OAAOd,EAAYa,MAC9BZ,KAAMA,EACNxE,UAAWuE,EAAYvE,e,2QC3NpB,SAASsF,EAAT,GAA0C,IAAvBC,EAAsB,EAAtBA,KACxB,OAAO,qBAAK9L,UAAS,6BAAwB8L,EAAO,QAAU,M,YCYzD,SAASC,IAAgB,IAAD,EACL1N,cADK,mBACtByN,EADsB,KAChBE,EADgB,KAEvBC,EAAU,kBAAMD,GAAQ,IACxBE,EAAwB3P,cACxBD,EACJ4P,GAAqE,OAA5C1P,aAAaC,QAAQ,mBAShD,OACE,qCACE,qBACEuD,UAAS,gCAA2B8L,EAAO,QAAU,IACrD3F,QAAS8F,EAFX,SAIE,qBAAKjM,UAAU,qCAAf,SACE,qBAAKA,UAAU,gBAAf,SACE,sBAAKA,UAAU,aAAamG,QAAS,SAACnF,GAAD,OAAOA,EAAEmL,mBAA9C,UACE,sBAAMnM,UAAU,YAAYmG,QAAS8F,EAArC,kBAIA,oBAAIjM,UAAU,wBAAd,8BACA,cAACoM,EAAD,IAECF,GACC,qCACE,uBAEA,oBAAIlM,UAAU,wBAAd,gCACA,sBAAKA,UAAU,iCAAf,UACE,sBAAMA,UAAU,OAAhB,qCACA,sBAAKA,UAAU,wCAAf,UACE,uBACEqM,KAAK,WACLC,eAAgBhQ,EAChB0D,UAAU,uBACVuM,GAAG,aACHC,SArCW,SAACxL,GAC5BA,EAAEyL,OAAOC,QACXlQ,aAAasE,QAAQ,kBAAmB,IAExCtE,aAAauE,WAAW,sBAmCR,uBACEf,UAAU,uBACV2M,QAAQ,qBAId,mBAAG3M,UAAU,+BAAb,kHAWZ,cAAC6L,EAAD,CAASC,KAAMA,OAMrB,SAASc,EAAT,GAAmE,IAArCC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,OAClCnS,EAAcsD,cAAdtD,UACFoS,EAAkBjP,cAFwC,EAGlCxC,IAAMS,UAAS,GAHmB,mBAGzDiR,EAHyD,KAGhDC,EAHgD,KAI1D/Q,EAAQC,cACRO,EAAUC,cACVC,EAAWC,cAEXqQ,EAAc,SAAChI,GAAD,OAClB4H,EAAM,UAAM5H,EAAN,YAAgB2H,GAAiB,IAanCM,EAAaC,aAAoB,SAACjP,GACtC4O,EAAgB5O,GACZA,EAAIf,OAAS,IACflB,EAAMmL,IAAI,UAAW,UACrBnL,EAAMmL,IAAI,YAAalJ,GACvBzB,EAAQO,KAAR,2BAAkBL,GAAlB,IAA4BM,OAAQhB,EAAMiB,iBAE3C,KAEGkQ,EAAiBL,EAAU,GAAK,aACtC,OACE,eAAC,IAAD,CACEM,GAAI,SAAC1Q,GAAD,OAvBgB,SAACA,GAKvB,OAJIjC,EAAUyC,OAAS,IACrBlB,EAAMmL,IAAI,UAAW,UACrBnL,EAAMmL,IAAI,YAAa1M,IAElB,2BACFiC,GADL,IAEEM,OAAQhB,EAAMiB,aAgBIoQ,CAAgB3Q,IAClCoD,UAAU,wCAFZ,UAIE,uBACEqM,KAAK,OACLmB,aAAc7S,EACdqF,UAAS,8CAAyCqN,EAAzC,YAA2DH,EAClE,WAEFO,QAAS,kBAAMR,GAAW,IAC1BS,OAAQ,kBAAMT,GAAW,IACzBU,QAAS,SAAC3M,GAAD,OAAOmM,EAAWnM,EAAE4M,cAAcrQ,UAE7C,qBAAKyC,UAAU,sBAAf,SACE,qBAAKA,UAAS,gCAA2BkN,EAAY,WAArD,SACE,sBAAMlN,UAAWkN,EAAY,SAAW,GAAxC,4BAOV,SAASd,IAAiB,IAAD,EACgBnO,cAA/BhD,EADe,EACfA,OAAQlB,EADO,EACPA,QAASY,EADF,EACEA,UAErBkS,EAAe,GACnB,OAAQ5R,GACN,KAAKrB,IAAcsB,UAGnB,KAAKtB,IAAcwB,WACjByR,EAAe,UACf,MACF,KAAKjT,IAAcuB,QACjB0R,EAAe,SACf,MACF,QACEvO,YAAkBrD,GAGtB,OACE,qBAAK+E,UAAU,yCAAf,SACGhG,IAASqM,KAAI,SAACwH,EAAKhJ,GAClB,IAAMiI,EAASe,IAAQ9T,EACvB,GAAI8T,IAAQhU,IAAQO,OAClB,OACE,cAACwS,EAAD,CAEEC,aAAcA,EACdC,OAAQA,GAFHjI,GAMX,IAAMiJ,EAAWhB,EAAM,iBACTD,EADS,iBACYA,GAC/B,YAgBJ,OACE,eAAC,IAAD,CAEE7M,UAAS,oCAA+B8N,GACxCR,GAlBoB,SAAC1Q,GACvB,IAAMsK,EAAS,IAAIH,gBAAgBnK,EAASM,QACtC6Q,EAAO1T,YAAYwT,GAMzB,MALa,iBAATE,EACF7G,EAAOG,IAAI,UAAW0G,GAEtB7G,EAAOlK,OAAO,WAET,2BACFJ,GADL,IAEEM,OAAQgK,EAAO/J,cAKjB,oBAKM7C,YAAYuT,GALlB,MAME,sBAAM7N,UAAU,4BAAhB,SACGtF,YAAWmT,EAAKlT,GAAWC,QAAQ,YAAa,QAN9CiK,QClMV,SAASmJ,EACdC,GAES,IADTC,EACQ,wDACFC,EAAa,IAAIC,KAAKH,GACtBI,EAAa,IAAIzO,KAAK0O,eAAe,QAAS,CAClDC,KAAM,UACNC,MAAO,QACPC,IAAK,YACJ3O,OAAOqO,GACJO,EAAa,IAAI9O,KAAK0O,eAAe,QAAS,CAClDK,KAAM,UACNC,OAAQ,UACRC,OAAQ,UACRC,UAAW,MACXC,aAAcb,EAAoB,QAAU,SAC3CpO,OAAOqO,GACV,MAAM,GAAN,OAAUE,EAAV,eAA2BK,GAGtB,SAASM,EACdf,GAES,IADTC,EACQ,wDACFC,EAAa,IAAIC,KAAKH,GACtBI,EAAa,IAAIzO,KAAK0O,eAAe,QAAS,CAClDC,KAAM,UACNC,MAAO,OACPC,IAAK,UACLQ,SAAU,QACTnP,OAAOqO,GACJO,EAAa,IAAI9O,KAAK0O,eAAe,QAAS,CAClDK,KAAM,UACNC,OAAQ,UACRC,OAAQ,UACRC,UAAW,MACXG,SAAU,MACVF,aAAcb,EAAoB,QAAU,SAC3CpO,OAAOqO,GACV,MAAM,GAAN,OAAUE,EAAV,eAA2BK,GAGtB,SAASQ,EACdjB,GAEC,IADDC,IACA,yDACMC,EAAa,IAAIC,KAAKH,GACtBS,EAAa,IAAI9O,KAAK0O,eAAe,QAAS,CAClDK,KAAM,UACNC,OAAQ,UACRC,OAAQ,UACRC,UAAW,MACXC,aAAcb,EAAoB,QAAU,SAC3CpO,OAAOqO,GACV,OAAOO,EC3CT,IAAMS,EAAgB,IAAIC,IAgBnB,SAASC,IACd,IAAMtV,EAAUkE,cAAalE,QACvBuV,EAAeH,EAAc/S,IAAIrC,GACvC,IAAKuV,EAAc,OAAO,KAHI,IAU1BC,EANI1M,EAAkCyM,EAAlCzM,QAAS2M,EAAyBF,EAAzBE,MAAOC,EAAkBH,EAAlBG,IAAKC,EAAaJ,EAAbI,SAEvBC,EAAM,IAAIvB,KAChB,OAAIqB,GAAOE,EAAMF,GACbD,GAASG,EAAMH,EADU,OAIzBE,GAAYF,GAASC,KACvBF,EACE,gCACE,oBAAIvP,UAAU,wCACb0P,GACC,qBAAI1P,UAAU,wBAAd,UACE,sBAAMA,UAAU,iBAAhB,kCACC0P,KAGJF,GACC,qBAAIxP,UAAU,wBAAd,UACE,sBAAMA,UAAU,iBAAhB,0BACCgO,EAAiBwB,EAAMI,cAG3BH,GACC,qBAAIzP,UAAU,wBAAd,UACE,sBAAMA,UAAU,iBAAhB,mBACCgO,EAAiByB,EAAIG,kBAQ9B,qBAAK5P,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,gFAAf,UACE,qBAAIA,UAAU,sBAAd,UACE,sBAAMA,UAAU,4BACf6C,KAEF0M,UCxEI,UAA0B,+CCQlC,SAASM,IAAuB,IAAD,EAChBxR,cAAX2N,EAD2B,oBAGpC,OACE,qBAAKhM,UAAU,2BAAf,SACE,qBAAKmG,QAAS,kBAAM6F,GAAQ,IAA5B,SACE,cAAC8D,EAAD,QAMD,SAASC,IAAuB,IAAD,EAChB1R,cAAX2N,EAD2B,oBAGpC,OACE,qBAAK7F,QAAS,kBAAM6F,GAAQ,IAA5B,SACE,cAAC8D,EAAD,MAKN,SAASA,IAAU,IAAD,EAC6B7R,cAArChD,EADQ,EACRA,OAAQlB,EADA,EACAA,QAASqE,EADT,EACSA,KAAMzD,EADf,EACeA,UACzBqV,EAAajW,IAAYF,IAAQO,OAApB,UAAgCgE,GAAhC,UAA4CzD,GAEzDsV,EAAa,SAACC,GAClB,MAAM,mBAAN,OAA0BA,IAK5B,OAAQjV,GACN,KAAKrB,IAAcsB,UACjB,OACE,uBAAM8E,UAAWiQ,EAAW,WAA5B,UACE,sBAAMjQ,UAAU,4BACfgQ,KAIP,KAAKpW,IAAcwB,WACjB,OACE,uBAAM4E,UAAWiQ,EAAW,WAA5B,UACE,sBACEjQ,UAfa,oCAgBbmQ,KAAK,SACLC,cAAY,SAEbJ,KAIP,KAAKpW,IAAcuB,QACjB,OACE,uBAAM6E,UAAWiQ,EAAW,UAA5B,UACE,sBAAMjQ,UAAU,4BACfgQ,MC3DJ,SAASK,IAAS,MAES/U,IAAMS,UAAS,GAFxB,mBAEhBuU,EAFgB,KAENC,EAFM,KAIvB,OACE,qBAAKvQ,UAAU,uCAAf,SACE,sBAAKA,UAAU,YAAf,UACE,cAAC,IAAD,CAAMsN,GAAItG,YAAY,KAAtB,SACE,qBAAKwJ,IAAKC,EAAMC,OAAO,KAAKC,IAAI,2BAGlC,wBACE3Q,UAAU,iBACVqM,KAAK,SACLlG,QAAS,kBAAMoK,GAAY,SAAChT,GAAD,OAAYA,MAHzC,SAKE,sBAAMyC,UAAU,0BAGlB,qBACEA,UAAS,gDAA2CsQ,EAAW,OAAS,IAD1E,SAIE,qBAAItQ,UAAU,0BAAd,UACE,oBAAIA,UAAU,WAAd,SACE,cAAC,IAAD,CAASA,UAAU,WAAWsN,GAAItG,YAAY,KAAM4J,OAAK,EAAzD,6BAIF,oBAAI5Q,UAAU,WAAd,SACE,cAAC,IAAD,CAASA,UAAU,WAAWsN,GAAItG,YAAY,WAA9C,sBAIF,oBAAIhH,UAAU,WAAd,SACE,cAAC,IAAD,CAASA,UAAU,WAAWsN,GAAItG,YAAY,iBAA9C,yBAgBF,oBAAIhH,UAAU,WAAd,SACE,mBAAGA,UAAU,oBAAoB6Q,KAAK,2BAA2BpE,OAAO,SAASqE,IAAI,aAArF,iCAON,qBAAK9Q,UAAU,oBAAf,SACE,cAAC+P,EAAD,W,+CCzDJgB,EAAuBzV,IAAMC,cAA4B,IAAI6T,KAI5D,SAAS4B,EAAT,GAA6D,IAA5BpV,EAA2B,EAA3BA,SAA2B,EACvBN,IAAMS,SAC9C,IAAIqT,KAF2D,mBAC1D5E,EAD0D,KAC3CyG,EAD2C,KAIzDlX,EAAYkE,cAAZlE,QAkBR,OAhBAuB,IAAMwB,WAAU,YACd,IAAIoU,KAAoBC,UAAUC,MAAK,SAACC,GACtC,IAAMC,EACJvX,IAAYF,IAAQO,OAChB,GACAiX,EAAOE,oBAAoBlX,YAAYN,IAAUyX,UAEvDP,EACEK,EAAUG,QAAO,SAACpL,EAAmBqL,GAEnC,OADArL,EAAIgB,IAAIqK,EAAKhK,QAASgK,GACfrL,IACN,IAAI+I,WAGV,CAACrV,IAGF,cAACgX,EAAqBzT,SAAtB,CAA+BC,MAAOiN,EAAtC,SACG5O,IAKA,SAAS+V,IACd,IAAMnH,EAAgBlP,IAAMyC,WAAWgT,GAEvC,IAAKvG,EACH,MAAM,IAAIxM,MAAJ,wDAGR,MAAO,CAAEwM,iBChCJ,SAASoH,IAAa,IAAD,EACEtW,IAAMS,SAAS,IADjB,mBACnBmB,EADmB,KACX2U,EADW,KAEpBC,EAAYxW,IAAMyW,OAAiC,MACnDrV,EAAUC,cACVC,EAAWC,cACT2N,EAAkBmH,IAAlBnH,cACAzQ,EAAYkE,cAAZlE,QAiBR,OACE,qBAAKiG,UAAU,iBAAf,SACE,qBAAKA,UAAU,yBAAf,SACE,qBAAKA,UAAU,MAAf,SACE,cAAC,IAAD,CACEgS,IAAK,SAACA,GAAD,OAAUF,EAAUG,QAAUD,GACnCE,QAASC,EAAajV,EAAQnD,EAASyQ,GACvC4H,iBAAkB,iBAAM,cACxBC,YAAY,kEACZ9U,MAVS,GAWT+U,WAAYpV,EACZqV,mBAAiB,EACjBC,YAAa,kCAAMV,EAAUG,eAAhB,aAAM,EAAmBQ,QACtCjG,SA5BO,SAAC,EAEhBkG,GACI,IAFFzL,EAEC,EAFDA,SAGkB,kBAAhByL,EAAK1X,SACP0B,EAAQO,KAAR,2BAAkBL,GAAlB,IAA4BqK,cAC5B4K,EAAU,MAuBJc,OAAQ,CAENN,YAAa,SAACjN,GAAD,mBAAC,eAAgBA,GAAjB,IAAwBwN,cAAe,UACpDnS,MAAO,SAAC2E,GAAD,mBAAC,eAAgBA,GAAjB,IAAwByN,MAAO,WAExCC,cAxBY,SAACvV,EAAD,GACL,iBADqD,EAA9BvC,QACP6W,EAAUtU,IAwBjCwV,WAAY,CAAEC,qBACdC,gBAAgB,qBAgC5B,IAAMC,EAAmC,CACvC,aACA,eACA,0BAkGF,SAASf,EACPgB,EACApZ,EACAyQ,GAEA,IAAMtN,EAASiW,EAAUC,OACzB,GAAsB,IAAlBlW,EAAOE,OAAc,MAAO,GAEhC,IAAM8U,EAAU,GAEVmB,EAvIR,SAA6BnW,EAAgBnD,GAC3C,IAAMuZ,EAAkBC,OAAOC,QAAQnK,KAAoBoK,QACzD,YAAgB,IAAd/L,EAAa,oBACPtJ,EAAOsH,YAAagC,EAAS3N,GACnC,QAAKqE,IAEHA,EAAKsV,cAAc9N,SAAS1I,EAAOwW,gBACnChM,EAAQ9B,SAAS1I,OAKvB,GAAIoW,EAAgBlW,OAAS,EAC3B,MAAO,CACLuW,MAAO,WACPzB,QAASoB,EAAgBjN,KAAI,mCAAEkG,EAAF,KAAMnO,EAAN,WAAiB,CAC5CuV,MAAOvV,EACPb,MAAO,CAACa,EAAMmO,GACdtF,SAAU,YAAcsF,OAqHPqH,CAAoB1W,EAAQnD,GAC/CsZ,GACFnB,EAAQjV,KAAKoW,GAGf,IAAMQ,EA9GR,SAA4B3W,GAC1B,IAAM4W,EAAiBP,OAAOC,QAAQ7J,KAAY8J,QAChD,YAAsB,IAAD,mBAAnB/L,EAAmB,KAAVtJ,EAAU,KACnB,OACE8U,EAAmBtN,SAASxH,KAC3BA,EAAKsV,cAAc9N,SAAS1I,EAAOwW,gBAClChM,EAAQ9B,SAAS1I,OAKzB,GAAI4W,EAAe1W,OAAS,EAC1B,MAAO,CACLuW,MAAO,kBACPzB,QAAS4B,EAAezN,KAAI,mCAAEkG,EAAF,KAAMnO,EAAN,WAAiB,CAC3CuV,MAAOvV,EACPb,MAAO,CAACa,EAAMmO,GACdtF,SAAU,YAAcsF,OA6FRwH,CAAmB7W,GACrC2W,GACF3B,EAAQjV,KAAK4W,GAGf,IAAMG,EA5FR,SAA4B9W,GAC1B,IAAM+W,EAAiBV,OAAOC,QAAQtJ,KAAYuJ,QAChD,YAAsB,IAAD,mBAAnB/L,EAAmB,KACnB,OADmB,KAEZgM,cAAc9N,SAAS1I,EAAOwW,gBACnChM,EAAQ9B,SAAS1I,MAKvB,GAAI+W,EAAe7W,OAAS,EAC1B,MAAO,CACLuW,MAAO,UACPzB,QAAS+B,EAAe5N,KAAI,mCAAEkG,EAAF,KAAMnO,EAAN,WAAiB,CAC3CuV,MAAOvV,EACPb,MAAO,CAACa,EAAMmO,GACdtF,SAAU,YAAcsF,OA4ER2H,CAAmBhX,GACrC8W,GACF9B,EAAQjV,KAAK+W,GAGf,IAAMG,EA3ER,SAA6BjX,GAC3B,IAAMkX,EAAoBb,OAAOC,QAAQxJ,KAAayJ,QACpD,YAAsB,IAAD,mBAAnB/L,EAAmB,KACnB,OADmB,KAEZgM,cAAc9N,SAAS1I,EAAOwW,gBACnChM,EAAQ9B,SAAS1I,MAKvB,GAAIkX,EAAkBhX,OAAS,EAC7B,MAAO,CACLuW,MAAO,WACPzB,QAASkC,EAAkB/N,KAAI,mCAAEkG,EAAF,KAAMnO,EAAN,WAAiB,CAC9CuV,MAAOvV,EACPb,MAAO,CAACa,EAAMmO,GACdtF,SAAU,YAAcsF,OA2DP8H,CAAoBnX,GACvCiX,GACFjC,EAAQjV,KAAKkX,GAGf,IAAMG,EA1DR,SACEpX,EACAnD,EACAyQ,GAEA,IAAM+J,EAAgBvQ,MAAMwQ,KAAKhK,EAAcgJ,WAAWC,QACxD,YAAyB,IAAD,mBAAtB/L,EAAsB,KAAb+M,EAAa,KAChBC,EAAcxX,EAAOwW,cAC3B,OACEe,EAAQrW,KAAKsV,cAAc9N,SAAS8O,IACpCD,EAAQ/J,OAAOgJ,cAAc9N,SAAS8O,IACtChN,EAAQ9B,SAAS1I,MAKvB,GAAIqX,EAAcnX,OAAS,EACzB,MAAO,CACLuW,MAAO,SACPzB,QAASqC,EAAclO,KAAI,mCAAEkG,EAAF,KAAMkI,EAAN,WAAoB,CAC7Cd,MAAOc,EAAQrW,KACfb,MAAO,CAACkX,EAAQrW,KAAMqW,EAAQ/J,OAAQ6B,GACtCtF,SAAU,YAAcsF,OAoCToI,CAAkBzX,EAAQnD,EAASyQ,GAmBxD,GAlBI8J,GACFpC,EAAQjV,KAAKqX,GAGVM,MAAMC,OAAO3X,KAChBgV,EAAQjV,KAAK,CACX0W,MAAO,QACPzB,QAAS,CACP,CACEyB,MAAM,SAAD,OAAWzW,GAChBK,MAAO,CAACL,GACR+J,SAAS,UAAD,OAAY/J,OAOxBgV,EAAQ9U,OAAS,EAAG,OAAO8U,EAE/B,IACE,IAAM4C,EAAU9R,IAAK4I,OAAO1O,GACL,KAAnB4X,EAAQ1X,OACV8U,EAAQjV,KAAK,CACX0W,MAAO,UACPzB,QAAS,CACP,CACEyB,MAAOzW,EACPK,MAAO,CAACL,GACR+J,SAAU,YAAc/J,MAIF,KAAnB4X,EAAQ1X,QACjB8U,EAAQjV,KAAK,CACX0W,MAAO,cACPzB,QAAS,CACP,CACEyB,MAAOzW,EACPK,MAAO,CAACL,GACR+J,SAAU,OAAS/J,MAK3B,MAAOuF,IACT,OAAOyP,EAGT,SAASc,IACP,OACE,qBAAKhT,UAAU,mBAAf,SACE,sBAAMA,UAAU,mB,ICnRV+U,EAkBAC,E,gBA0BZ,SAASC,EAAqBC,EAAsBC,GAClD,OAAID,EACEC,EACK,2BACFD,GACAC,GAGED,EAGFC,EAIX,SAASC,EAAkBra,EAAiBC,GAC1C,OAAOqa,EAAQta,EAAOC,EAAQia,GAGzB,SAASpZ,EAAcsC,GAC5B,OAAO7C,IAAMO,WAA0BuZ,EAAgB,CAAEjX,MAAKqV,QAAS,KAGlE,SAAS8B,EACdnX,EACAoX,GAEA,IAAMC,EAAgBla,IAAMma,SAAQ,WAClC,OAAO,SAAC1a,EAAiBC,GACvB,OAAOqa,EAAQta,EAAOC,EAAQua,MAE/B,CAACA,IACJ,OAAOja,IAAMO,WAA0B2Z,EAAe,CAAErX,MAAKqV,QAAS,KAGjE,SAAS6B,EACdta,EACAC,EACAua,GAEA,GAAIva,EAAOqR,OAAS2I,EAAWU,MAC7B,MAAO,CAAEvX,IAAKnD,EAAOmD,IAAKqV,QAAS,IAC9B,GAAIxY,EAAOmD,MAAQpD,EAAMoD,IAC9B,OAAOpD,EAGT,OAAQC,EAAOqR,MACb,KAAK2I,EAAWW,OACd,IAAM9O,EAAM7L,EAAO6L,IACbqO,EAAQna,EAAMyY,QAAQ3M,GACtB2M,EAAO,2BACRzY,EAAMyY,SADE,kBAEV3M,EAFU,2BAGNqO,GAHM,IAITja,OAAQD,EAAOC,OACf0Q,KAAM4J,EAAU,OAACL,QAAD,IAACA,OAAD,EAACA,EAAOvJ,KAAM3Q,EAAO2Q,UAGzC,OAAO,2BAAK5Q,GAAZ,IAAmByY,c,SAtGbuB,O,uBAAAA,I,6BAAAA,I,sBAAAA,M,cAkBAC,O,mBAAAA,I,kBAAAA,M,2CCYZ,SAASY,GACPC,EACA5D,EACA6D,GAEA,QAAgBta,IAAZyW,GAA4C,IAAnBA,EAAQ7U,OACnC,OAAOyY,EAIT,QAAera,IAAXsa,EAAsB,CACxB,IAAMrG,EAAMoG,EAAQE,WAAU,SAACC,GAAD,OAAOA,EAAEC,YAAchE,EAAQ,GAAGgE,aAChE,OAAIxG,EAAM,EAAUoG,EACbA,EAAQtW,MAAM,EAAGkQ,GAAKyG,OAAOjE,GAItC,OAAIA,EAAQA,EAAQ7U,OAAS,GAAG6Y,YAAcH,EACrC7D,EAAQiE,OAAOL,GAGjBA,EAGT,SAASM,GACPzZ,EACAyY,GACC,IAAD,EACA,QAAwB3Z,KAAd,OAAN2Z,QAAM,IAANA,OAAA,EAAAA,EAAQzY,SAAuB,OAAOA,EAE1C,IAAI0Z,GAAwB,OAAP1Z,QAAO,IAAPA,OAAA,EAAAA,EAAS0Z,iBAAkB,IAAIhH,IAKpD,OAJI+F,EAAOiB,iBACTA,EAAiB,IAAIhH,IAAJ,sBAAYgH,GAAZ,YAA+BjB,EAAOiB,mBAGlD,CACLP,QAASD,GACPT,EAAOzY,QAAQmZ,QADM,OAErBnZ,QAFqB,IAErBA,OAFqB,EAErBA,EAASmZ,QAFY,OAGrBV,QAHqB,IAGrBA,OAHqB,EAGrBA,EAAQW,QAEVM,iBACAC,aAAmB,OAANlB,QAAM,IAANA,GAAA,UAAAA,EAAQzY,eAAR,eAAiB2Z,eAAjB,OAAgC3Z,QAAhC,IAAgCA,OAAhC,EAAgCA,EAAS2Z,eAAe,GAIzE,IAAM5a,GAAeH,IAAMC,mBAAiCC,GACtDE,GAAkBJ,IAAMC,mBAAoCC,GAG3D,SAAS8a,GAAT,GAA8D,IAAnC1a,EAAkC,EAAlCA,SACxBuC,EAAQF,cAARE,IAD0D,EAExCoY,EAAuBpY,EAAKgY,IAFY,mBAE3Dpb,EAF2D,KAEpDe,EAFoD,KAQlE,OAJAR,IAAMwB,WAAU,WACdhB,EAAS,CAAEuQ,KAAM2I,EAAWU,MAAOvX,UAClC,CAACrC,EAAUqC,IAGZ,cAAC1C,GAAa6B,SAAd,CAAuBC,MAAOxC,EAA9B,SACE,cAACW,GAAgB4B,SAAjB,CAA0BC,MAAOzB,EAAjC,SACGF,M,SAMM4a,G,qFAAf,WACErY,EACAsY,GAFF,oBAAAjZ,EAAA,sDAIQ4Y,EAAiB,IAAIhH,IACrB3R,EAAa,IAAIC,IAAWS,GALpC,KAAAX,EAAA,mCAAAA,EAAA,6DAQUkZ,EAAaD,EAAsBE,OACvC,EA/F6B,IAsFnC,SAY0BlZ,EAAWmZ,+BAA+BF,GAZpE,cAaY3R,SACN,SAAC8R,EAA2ChS,GAC3B,OAAXgS,GACFT,EAAe/O,IAAIqP,EAAW7R,GAAQgS,MAhBhD,sDAOSJ,EAAsBrZ,OAAS,GAPxC,yGAsBSgZ,GAtBT,4C,+BAyBeU,G,+FAAf,WACEhb,EACAsP,EACArR,EACAoE,EACA+T,EAIA6E,EACAC,GAVF,4BAAAxZ,EAAA,6DAYE1B,EAAS,CACPuQ,KAAM2I,EAAWW,OACjB1a,OAAQ8Z,EAAYkC,SACpBpQ,IAAKuE,EAAO1E,WACZvI,QAhBJ,SAsBUV,EAAa,IAAIC,IAAWS,GAtBtC,SAuB0BV,EAAWyZ,kCAC/B9L,EACA8G,GAzBN,OAuBU2D,EAvBV,OA2BInZ,EAAU,CACRmZ,UACAQ,YAAaR,EAAQzY,OAAS8U,EAAQiF,OAExClc,EAAS8Z,EAAYqC,QA/BzB,kDAiCQrd,IAAYF,IAAQO,QACtByD,aAAY,EAAD,GAAQ,CAAEM,QAEvBlD,EAAS8Z,EAAYsC,YApCzB,YAwCMN,KAAiB,UAAIra,SAAJ,aAAI,EAASmZ,SAxCpC,kCA0CYa,EAAaha,EAAQmZ,QACxBxP,KAAI,SAAC4P,GAAD,OAAeA,EAAUA,aAC7BC,OAAOc,GAAwB,IA5CxC,UA6C6BR,GAAwBrY,EAAKuY,GA7C1D,QA6CMN,EA7CN,0DA+CUrc,IAAYF,IAAQO,QACtByD,aAAY,EAAD,GAAQ,CAAEM,QAEvBlD,EAAS8Z,EAAYsC,YAlD3B,QAsDEvb,EAAS,CACPuQ,KAAM2I,EAAWW,OACjBxX,MACA0I,IAAKuE,EAAO1E,WACZzL,SACA0Q,KAAM,CACJjP,UACA0Z,iBACAN,OAAM,OAAE5D,QAAF,IAAEA,OAAF,EAAEA,EAAS4D,UA9DvB,mE,sBA+EO,SAASwB,GACd5P,GAEA,IAAMxJ,EAAU5C,IAAMyC,WAAWtC,IAEjC,IAAKyC,EACH,MAAM,IAAIF,MAAJ,4DAGR,OAAOE,EAAQsV,QAAQ9L,GAelB,SAAS6P,KAA0B,IAAD,EACdtZ,cAAjBlE,EAD+B,EAC/BA,QAASoE,EADsB,EACtBA,IACXpD,EAAQO,IAAMyC,WAAWtC,IACzBK,EAAWR,IAAMyC,WAAWrC,IAClC,IAAKX,IAAUe,EACb,MAAM,IAAIkC,MAAJ,iEAKR,OAAO1C,IAAMsI,aACX,SAACwH,EAAmB2L,EAA6BS,GAAuB,IAAD,EAC/D1B,EAAS/a,EAAMyY,QAAQpI,EAAO1E,YACpC,IAAK8Q,IAAD,OAAY1B,QAAZ,IAAYA,GAAZ,UAAYA,EAAQnK,YAApB,aAAY,EAAckK,UAAWC,EAAOnK,KAAKkK,QAAQzY,OAAS,EAAG,CACvE,GAAI0Y,EAAOnK,KAAK0K,YAAa,OAE7B,IAAIW,EAAiC,GACjCD,IACFC,EA9BV,SAAgClB,GAA2C,IAAD,EACxE,KAAI,UAACA,EAAOnK,YAAR,aAAC,EAAayK,gBAChB,MAAO,GAGT,IAAMqB,EAAc3B,EAAOnK,KAAKyK,eAIhC,OAHsBN,EAAOnK,KAAKkK,QAAQxP,KACxC,SAACqR,GAAD,OAAmBA,EAAczB,aAEdxC,QAAO,SAACwC,GAAD,OAAgBwB,EAAY1a,IAAIkZ,MAqB7B0B,CAAuB7B,IAGhD,IAAM8B,EACJ9B,EAAOnK,KAAKkK,QAAQC,EAAOnK,KAAKkK,QAAQzY,OAAS,GAAG6Y,UACtDa,GACEhb,EACAsP,EACArR,EACAoE,EACA,CACE2X,OAAQ8B,EACRT,MAAO,IAETJ,EACAC,QAGFF,GACEhb,EACAsP,EACArR,EACAoE,EACA,CAAEgZ,MAAO,IACTJ,KAIN,CAAChc,EAAOe,EAAU/B,EAASoE,I,YC9QlB0Z,GAAsBC,aACjCC,aAASC,KACTC,gBACA,SAAC1a,GAAD,OAAW,IAAIya,IAAUza,MCWd2a,GAAmBC,aAAM,CAAC,OAAQ,UAAW,aAGpDC,GAAeD,aAAM,CAAC,cAAe,gBAAiB,WAEtDE,GAAchM,aAAK,CACvB3N,SAAU4Z,eACVC,eAAgBN,eAChBO,OAAQP,iBAIGQ,GAAmBpM,aAAK,CACnCqM,KAAMb,GACNc,MAAOd,GACPe,YAAaP,GACbQ,SAAUC,aAASjB,IACnB9c,MAAOqd,GACPW,SAAUC,eACVC,kBAAmBH,aAAST,IAC5Ba,gBAAiBJ,aAAST,IAC1Bc,eAAgBL,aAASjB,MAIduB,GAAkB/M,aAAK,CAClCgN,cAAeC,aAASzB,IACxB0B,OAAQtB,eACRvZ,SAAU4Z,eACVkB,cAAeR,eACfS,gBAAiBH,aAASzB,MAIf6B,GAAsBrN,aAAK,CACtCsN,mBAAoBrB,eACpBsB,gBAAiBtB,eACjBkB,cAAeR,eACfa,QAASC,aAAMjC,MAIJkC,GAAe1N,aAAK,CAC/BA,KAAM6L,GACN8B,KAAMC,iBCxCFxe,GAAeH,IAAMC,mBAAiCC,GACtDE,GAAkBJ,IAAMC,mBAAoCC,GAG3D,SAAS0e,GAAT,GAAsD,IAA5Bte,EAA2B,EAA3BA,SACvBuC,EAAQF,cAARE,IADkD,EAEhCoY,EAAgCpY,GAFA,mBAEnDpD,EAFmD,KAE5Ce,EAF4C,KAQ1D,OAJAR,IAAMwB,WAAU,WACdhB,EAAS,CAAEqC,MAAKkO,KAAM2I,EAAWU,UAChC,CAAC5Z,EAAUqC,IAGZ,cAAC,GAAab,SAAd,CAAuBC,MAAOxC,EAA9B,SACE,cAAC,GAAgBuC,SAAjB,CAA0BC,MAAOzB,EAAjC,SACGF,MAMF,IAAMue,GAAmB,IAAInC,IAClC,+C,gDAGF,WACElc,EACAsP,EACArR,EACAoE,GAJF,wBAAAX,EAAA,6DAMQqJ,EAAMuE,EAAO1E,WACnB5K,EAAS,CACPuQ,KAAM2I,EAAWW,OACjB9O,MACA5L,OAAQ8Z,EAAYkC,SACpB9Y,QAXJ,kBAiB4B,IAAIT,IAC1BS,EACA,aACAic,8BAA8BhP,EAAQ,CAAE7E,UAAW4T,KApBzD,gBAiBY5c,EAjBZ,EAiBYA,MAIRoO,EAAO,CACL0F,OAAQ9T,EAAM8I,KAAI,SAACgU,GACjB,IAAMC,EAAaD,EAAYpP,QAAQU,KAAKkL,OAAOmD,KAEnD,MAAO,CAAEA,KADIO,aAAOD,EAAY7B,IACjBrN,OAAQiP,EAAYjP,YAGvCnQ,EAAS8Z,EAAYqC,QA5BzB,kDA8BQrd,IAAYF,IAAQO,QACtByD,aAAY,EAAD,GAAQ,CAAEM,QAEvBlD,EAAS8Z,EAAYsC,YAjCzB,QAmCEvb,EAAS,CAAEuQ,KAAM2I,EAAWW,OAAQxX,MAAKlD,SAAQ0Q,OAAM9E,QAnCzD,2D,sBAsCO,SAAS2T,GACd9S,GAEA,IAAMxJ,EAAU5C,IAAMyC,WAAWtC,IAEjC,IAAKyC,EACH,MAAM,IAAIF,MAAJ,gEAKR,OAAOE,EAAQsV,QAAQ9L,GAGlB,SAAS+S,KACd,IAAM3e,EAAWR,IAAMyC,WAAWrC,IAClC,IAAKI,EACH,MAAM,IAAIkC,MAAJ,qEAHmC,MAQlBC,cAAjBlE,EARmC,EAQnCA,QAASoE,EAR0B,EAQ1BA,IACjB,OAAO7C,IAAMsI,aACX,SAACwH,I,2CACCsP,CAAmB5e,EAAUsP,EAAQrR,EAASoE,KAEhD,CAACrC,EAAU/B,EAASoE,IC1GjB,IAAMwc,GAAatO,aAAK,CAC7BA,KAAM4L,eACN+B,KAAMC,iB,oBCJKW,GAAmB9C,aAAOC,aAAS8C,MAAK5C,gBAAU,SAAC1a,GAC9D,GAAqB,kBAAVA,EAAoB,OAAO,IAAIsd,KAAGtd,EAAO,IACpD,MAAM,IAAIS,MAAM,sBCEL8c,GAAmB3C,aAAM,CACpC,gBACA,cACA,YACA,gBAIW4C,GAAY1O,aAAK,CAC5B4M,kBAAmB2B,GACnBI,WAAY3O,aAAK,CACf4O,OAAQpD,GACRqD,WAAYrD,KAEdsD,OAAQ9O,aAAK,CACX4B,cAAeqK,eACf8C,MAAO9C,eACP+C,UAAWxD,OAKFyD,GAAmBjP,aAAK,CACnCqG,KAAMqI,GACNQ,MAAOjC,aACLjN,aAAK,CACHmP,WAAYnP,aAAK,CACfoP,MAAO5D,GACP0D,MAAOX,GACPc,gBAAiBd,GACjBe,kBAAmBf,GACnBgB,mBAAoBtD,iBAEtBuD,gBAAiBvD,oBAMVwD,GAAezP,aAAK,CAC/BA,KAAMyO,GACNd,KAAMsB,KClCKS,GAAkB5D,aAAM,CAAC,SAGzB6D,GAAkB3P,aAAK,CAClC4P,gBAAiBpE,GACjBuD,MAAO9C,iBAII4D,GAAa7P,aAAK,CAC7B8P,iBAAkBtE,GAClBuE,4BAA6B9D,eAC7B+D,YAAa/D,iBAIFgE,GAAejQ,aAAK,CAC/B+O,MAAO9C,eACPiE,QAAStE,eACTuE,gBAAiBvE,iBAINwE,GAAOpQ,aAAK,CACvBqQ,KAAMpE,eACNqE,kBAAmBrE,iBAIRsE,GAAkBvQ,aAAK,CAClCwQ,iBAAkB/C,aAAMkC,IACxBc,qBAAsBjF,GACtBkF,WAAYzE,eACZ0E,aAAclD,aAAMwC,IACpBW,cAAe5Q,aAAK,CAClBqQ,KAAMpE,eACN4E,UAAW5E,iBAEb6E,WAAYtF,GACZuF,YAAatD,aAAMoC,IACnBmB,SAAU/D,aAAShB,gBACnBgF,MAAOxD,aAAM2C,MAIFc,GAAclR,aAAK,CAC9BA,KAAM0P,GACN/B,KAAM4C,KCvDKY,GAAmBrF,aAAM,CAAC,gBAAiB,gBAG3CsF,GAAmBpR,aAAK,CACnCqR,UAAW7F,GACX8F,UAAW1F,eACX2F,cAAevR,aAAK,CAClBwR,qBAAsB5F,mBAKb6F,GAAezR,aAAK,CAC/BA,KAAMmR,GACNxD,KAAMyD,KCQKM,IAboB5F,aAAM,CACrC,QACA,gBACA,OACA,oBACA,OACA,UACA,aACA,cACA,iBAI8B9L,aAAK,CACnCqQ,KAAMpE,eACN8C,MAAO9C,eACP0F,oBAAqB1F,eACrBrK,cAAeqK,kBAIJ2F,GAAqB5R,aAAK,CACrCA,KAAM6R,aAAQ,SACdlE,KAAM+D,KAIKI,GAAoB9R,aAAK,CACpC+R,cAAe9F,eACf+F,yBAA0B/F,eAC1BgG,OAAQtF,eACRuF,iBAAkBjG,eAClBkG,gBAAiBlG,iBAMNmG,GAA6BpS,aAAK,CAC7CA,KAAM6R,aAAQ,iBACdlE,KAAMmE,KAIKO,GAAWrS,aAAK,CAC3BuR,cAAevR,aAAK,CAClBwR,qBAAsB5F,mBAKb0G,GAAoBtS,aAAK,CACpCA,KAAM6R,aAAQ,QACdlE,KAAM0E,KAIKE,GAAyBvS,aAAK,CACzCsR,UAAW1F,eACX2F,cAAevR,aAAK,CAClBwR,qBAAsB5F,mBAKb4G,GAAwB/E,aAAM8E,IAK9BE,GAAiCzS,aAAK,CACjDA,KAAM6R,aAAQ,qBACdlE,KAAM6E,KAIKE,GAAW1S,aAAK,CAC3B2S,oBAAqB/G,eACrBgH,mBAAoB3G,eACpB4G,YAAa5G,iBAIF6G,GAAoB9S,aAAK,CACpCA,KAAM6R,aAAQ,QACdlE,KAAM+E,KAIKK,GAAc/S,aAAK,CAC9BgT,oBAAqB/G,iBAIVgH,GAAuBjT,aAAK,CACvCA,KAAM6R,aAAQ,WACdlE,KAAMoF,KAIKG,GAAgBlT,aAAK,CAChCqQ,KAAMpE,eACNkH,KAAMvH,iBAIKwH,GAAiB3F,aAAMyF,IAGvBG,GAA0BrT,aAAK,CAC1CA,KAAM6R,aAAQ,cACdlE,KAAMyF,KAIKE,GAAkBtT,aAAK,CAClCuT,SAAUtH,eACVuH,KAAM5H,iBAIK6H,GAA2BzT,aAAK,CAC3CA,KAAM6R,aAAQ,eACdlE,KAAM2F,KAIKI,GAAwB1T,aAAK,CACxC2T,UAAW1H,eACX2H,WAAY3H,eACZ4H,aAAc5H,iBAIH6H,GAAoB9T,aAAK,CACpC+O,MAAO9C,eACP8H,aAAcL,KAIHM,GAAmBvG,aAAMqG,IAGzBG,GAA4BjU,aAAK,CAC5CA,KAAM6R,aAAQ,gBACdlE,KAAMqG,KAIKE,GAAgBC,aAAM,CACjCvC,GACAQ,GACAE,GACAG,GACAK,GACAG,GACAI,GACAI,GACAQ,KC9JWG,GAAkBpU,aAAK,CAClCuP,mBAAoBtD,eACpBoI,aAAcpI,iBAIHqI,GAAYtU,aAAK,CAC5BjB,OAAQ6M,eACR1M,OAAQyN,iBAIG4H,GAA0BC,aAAO5I,eAAUA,gBAG3C6I,GAA0BzU,aAAK,CAC1CtB,KAAM+O,aAAM6G,IACZI,WAAYH,KAIDI,GAAuB3U,aAAK,CACvCA,KAAM6R,aAAQ,iBACdlE,KAAM8G,KAIKG,GAAyB5U,aAAK,CACzCA,KAAM6R,aAAQ,eACdlE,KAAMyG,KAIKS,GAAgBV,aAAM,CACjCS,GACAD,K,UCzCIG,GAAiB7lB,IAAMC,cAA0B,IAAI6T,KAEpD,SAASgS,GAAT,GAA+D,IAA5BxlB,EAA2B,EAA3BA,SAA2B,EACrBN,IAAMS,SAClD,IAAIqT,KAF6D,mBAC5DiS,EAD4D,KAC3CC,EAD2C,KAmBnE,OAdAhmB,IAAMwB,WAAU,WACdykB,iBAbF,qEAcKnQ,MAAK,SAACoQ,GACL,OAAOA,EAAIrc,UAEZiM,MAAK,SAACqQ,GACL,IAAMJ,EAAkB,IAAIjS,IAC5BqS,EACGC,MAAM,MACN3c,SAAQ,SAACkG,GAAD,OAAaoW,EAAgBha,IAAI4D,GAAS,MACrDqW,EAAmBD,QAEtB,IAGD,cAACF,GAAe7jB,SAAhB,CAAyBC,MAAO8jB,EAAhC,SACGzlB,ICfA,ICXKmZ,GAMAC,GDKC2M,GAAqBtV,aAAK,CACrCuV,YAAa/J,KAIFgK,GAAiBxV,aAAK,CACjCA,KAAM6R,aAAQ,WACdlE,KAAM2H,KAIKG,GAAyBzV,aAAK,CACzCqR,UAAWpE,aAASzB,IAEpB6E,KAAMpE,iBAIKyJ,GAAqB1V,aAAK,CACrCA,KAAM6R,aAAQ,eACdlE,KAAM8H,KAIKE,GAA2B3V,aAAK,CAC3CqR,UAAWpE,aAASzB,MAKToK,GAAuB5V,aAAK,CACvCA,KAAM6R,aAAQ,UACdlE,KAAMgI,KAMKE,GAAkCjI,eAKlCkI,GAA8B9V,aAAK,CAC9CA,KAAM6R,aAAQ,iBACdlE,KAAMkI,KAIKE,GAA2BtK,aACtC0I,aAAM,CACJqB,GACAE,GACAE,GACAE,KAEFxH,IACA,SAACpd,GAGC,OAAQA,EAAM8O,MACZ,IAAK,UACH,MAAO,CACLA,KAAM9O,EAAM8O,KACZ2N,KAAMO,aAAOhd,EAAMyc,KAAM2H,KAG7B,IAAK,cACH,MAAO,CACLtV,KAAM9O,EAAM8O,KACZ2N,KAAMO,aAAOhd,EAAMyc,KAAM8H,KAG7B,IAAK,SACH,MAAO,CACLzV,KAAM9O,EAAM8O,KACZ2N,KAAMO,aAAOhd,EAAMyc,KAAMgI,KAG7B,IAAK,gBACH,MAAO,CACL3V,KAAM9O,EAAM8O,KACZ2N,KAAMO,aAAOhd,EAAMyc,KAAMkI,KAG7B,QACE,MAAM,IAAIlkB,MAAJ,wCAA2CT,EAAM8O,W,mBCjGnD0I,O,uBAAAA,I,6BAAAA,I,sBAAAA,Q,cAMAC,O,mBAAAA,I,kBAAAA,Q,KAYZ,IAAMvZ,GAAeH,IAAMC,mBAAiCC,GACtDE,GAAkBJ,IAAMC,mBAAoCC,GAI3D,SAAS6mB,GAAT,GAA0D,IAAjCzmB,EAAgC,EAAhCA,SACtBuC,EAAQF,cAARE,IADsD,EAEpCoY,EAAwBpY,GAFY,mBAEvDpD,EAFuD,KAEhDe,EAFgD,KAQ9D,OAJAR,IAAMwB,WAAU,WACdhB,EAAS,CAAEuQ,KAAM2I,GAAWU,MAAOvX,UAClC,CAACrC,EAAUqC,IAGZ,cAAC,GAAab,SAAd,CAAuBC,MAAOxC,EAA9B,SACE,cAAC,GAAgBuC,SAAjB,CAA0BC,MAAOzB,EAAjC,SACGF,M,gDAgBF,WACLE,EACAqC,EACApE,EACA8M,GAJK,sBAAArJ,EAAA,6DAML1B,EAAS,CACPuQ,KAAM2I,GAAWW,OACjB1a,OAAQ8Z,GAAYkC,SACpBpQ,MACA1I,QAIEwN,OAA0BnQ,EAdzB,SAiBGiC,EAAa,IAAIC,IAAWS,EAAK,aAjBpC,SAkBiBV,EAAW6kB,SAASzN,OAAOhO,IAlB5C,OAmBW,QADR0b,EAlBH,SAoBD5W,EAAO,GACP1Q,EAAS8Z,GAAYqC,UAErBzL,EAAO,CAAE4W,SACTtnB,EAAS8Z,GAAYqC,SAxBpB,kDA2BHnc,EAAS8Z,GAAYsC,YACjBtd,IAAYF,IAAQO,QACtB0I,KAAA,KAA6B,CAAEJ,KAAM,CAAEvE,SA7BtC,QAiCLrC,EAAS,CACPuQ,KAAM2I,GAAWW,OACjBxX,MACA0I,MACA5L,SACA0Q,SAtCG,2D,sBA0CA,SAAS6W,KACd,IAAM1mB,EAAWR,IAAMyC,WAAWrC,IAClC,IAAKI,EACH,MAAM,IAAIkC,MAAJ,qDAHsB,MAMLC,cAAjBlE,EANsB,EAMtBA,QAASoE,EANa,EAMbA,IACjB,OAAO7C,IAAMsI,aACX,SAACiD,GAAD,OAlDG,SAAP,yCAkDqB4b,CAAW3mB,EAAUqC,EAAKpE,EAAS8M,KACpD,CAAC/K,EAAU/B,EAASoE,ICnGxB,IAAMukB,GAA0B,IAAItT,IAAqB,CACvD,CAACvV,IAAQI,YAAa,KACtB,CAACJ,IAAQK,QAAS,MAsBpB,SAASic,GACPwM,EACAxN,GAEA,QAAe3Z,IAAX2Z,EACF,OAAOwN,EAGT,IAAMC,IAAmB,OAAPD,QAAO,IAAPA,OAAA,EAAAA,EAASA,UAAW,IACnCzM,OAAOf,EAAOwN,SACdlP,QAAO,SAAClW,GAAD,OAAqB,OAAVA,KAEf8Y,EAAclB,EAAOkB,YAE3B,MAAO,CACLsM,QAASC,EACTC,qBACS,OAAPF,QAAO,IAAPA,OAAA,EAAAA,EAASE,sBAAuB1N,EAAO0N,oBACzCC,mBAAoB3N,EAAO2N,mBAC3BzM,eAIG,IAAM5a,GAAeH,IAAMC,mBAAiCC,GACtDE,GAAkBJ,IAAMC,mBACnCC,GAKK,SAASunB,GAAT,GAA8D,IAAnCnnB,EAAkC,EAAlCA,SACxBuC,EAAQF,cAARE,IAD0D,EAExCoY,EAAuBpY,EAAKgY,IAFY,mBAE3Dpb,EAF2D,KAEpDe,EAFoD,KAQlE,OAJAR,IAAMwB,WAAU,WACdhB,EAAS,CAAEuQ,KAAM2I,GAAWU,MAAOvX,UAClC,CAACrC,EAAUqC,IAGZ,cAAC,GAAab,SAAd,CAAuBC,MAAOxC,EAA9B,SACE,cAAC,GAAgBuC,SAAjB,CAA0BC,MAAOzB,EAAjC,SACGF,M,SAMMonB,G,6FAAf,WACElnB,EACAsP,EACArR,EACAoE,EACA8kB,EACAC,GANF,8BAAA1lB,EAAA,yDAQE1B,EAAS,CACPuQ,KAAM2I,GAAWW,OACjB1a,OAAQ8Z,EAAYkC,SACpBpQ,IAAKuE,EAAO1E,WACZvI,QAGIglB,EAAuBT,GAAwBtmB,IAAIrC,IAAY,EAC/D0D,EAAa,IAAIC,IAAWS,GAE7B8kB,EAlBP,0CAoB8BxlB,EAAW2lB,eApBzC,OAoBYC,EApBZ,OAqBMJ,EAAYI,EAAUjI,MAAQ,EArBpC,yDAuBUrhB,IAAYF,IAAQO,QACtByD,aAAY,EAAD,GAAQ,CAAEM,QAxB7B,kBA2BarC,EAAS,CACduQ,KAAM2I,GAAWW,OACjB1a,OAAQ8Z,EAAYsC,YACpBxQ,IAAKuE,EAAO1E,WACZvI,SA/BR,QAmCQ+kB,GAAgBA,EAAeD,IACjCA,EAAYC,GApClB,QAqDE,IAbMI,EAxCR,iCAAA9lB,EAAA,MAwC6B,WAAO4d,GAAP,gBAAA5d,EAAA,+EAEFC,EAAW6lB,mBAAmB,CAAClY,GAASgQ,GAFtC,cAEjB1a,EAFiB,yBAGhBA,EAAO,IAHS,gCAKnB3G,IAAYF,IAAQO,QACtByD,aAAY,EAAD,GAAQ,CAAEM,QANA,iCASlB,MATkB,yDAxC7B,sDAoDQolB,EAAW,GACRC,EAAYP,EAAWO,EAAIP,EAvHpB,GAuH2CO,IACrDA,GAAK,GACPD,EAAStmB,KAAKqmB,EAAmBE,IAvDvC,iBA2DwBC,QAAQC,IAAIH,GA3DpC,QA2DQI,EA3DR,OA4DQb,EAAqBG,EAAYM,EAASnmB,OAAS,EAEzDtB,EAAS,CACPuQ,KAAM2I,GAAWW,OACjBxX,MACA0I,IAAKuE,EAAO1E,WACZzL,OAAQ8Z,EAAYqC,QACpBzL,KAAM,CACJgX,QAASgB,GAAW,GACpBtN,YAAayM,GAAsBK,EACnCN,oBAAqBI,EACrBH,wBAvEN,2D,sBCYA,IAAMrnB,GAAeH,IAAMC,mBAAiCC,GACtDE,GAAkBJ,IAAMC,mBAAoCC,GAG3D,SAASooB,GAAT,GAAgE,IAApChoB,EAAmC,EAAnCA,SACzBuC,EAAQF,cAARE,IAD4D,EAE1CoY,EAA0BpY,GAFgB,mBAE7DpD,EAF6D,KAEtDe,EAFsD,KASpE,OAJAR,IAAMwB,WAAU,WACdhB,EAAS,CAAEuQ,KAAM2I,EAAWU,MAAOvX,UAClC,CAACrC,EAAUqC,IAGZ,cAAC,GAAab,SAAd,CAAuBC,MAAOxC,EAA9B,SACE,cAAC,GAAgBuC,SAAjB,CAA0BC,MAAOzB,EAAjC,SACE,cAACoe,GAAD,UACE,cAAC5D,GAAD,UACE,cAACyM,GAAD,UACE,cAAC3B,GAAD,UAA0BxlB,c,gDASxC,WACEE,EACAsP,EACArR,EACAoE,GAJF,4CAAAX,EAAA,6DAME1B,EAAS,CACPuQ,KAAM2I,EAAWW,OACjB9O,IAAKuE,EAAO1E,WACZzL,OAAQsb,EAAkBU,SAC1B9Y,QAVJ,SAgBUV,EAAa,IAAIC,IAAWS,EAAK,aAhB3C,SAiB0BV,EAAWomB,qBAAqBzY,GAjB1D,UAoBmB,QAHT1K,EAjBV,OAiBmEnD,OAjBnE,iBAqBMwB,EAAW,EArBjB,2BAuBMA,EAAW2B,EAAO3B,SAOhB+kB,EAHI,WAAYpjB,EAAOiL,KAGfjL,EAAOiL,KAAKmY,MAFZpjB,EAAOiL,KAAKvO,SAMlB,WAAYsD,EAAOiL,MAlC7B,2BAoCgBqO,EAAOO,aAAO7Z,EAAOiL,KAAKkL,OAAQ8D,IApClD,KAqCkBja,EAAOiL,KAAKoY,QArC9B,OAsCiB,2BAtCjB,QAqEiB,UArEjB,QAmFiB,SAnFjB,QAyFiB,UAzFjB,QA+FiB,WA/FjB,QAqGiB,WArGjB,QA4GiB,cA5GjB,4BA2CkC,aAJdlN,EAAS0D,aAAOP,EAAMoI,KAIjB/V,KA3CzB,kCA6CwB5O,EAAWomB,qBAAqBhN,EAAOmD,KAAK4H,aA7CpE,aA4CsBlhB,EA5CtB,OA8CkBnD,UAGA,WAAYmD,EAAOiL,OACK,2BAAxBjL,EAAOiL,KAAKoY,QAlD9B,iBAoDwB/J,EAAOO,aAAO7Z,EAAOiL,KAAKkL,OAAQ8D,IACxCiH,EAAcrH,aAAOP,EAAM+H,IAAoB/H,KArDjE,8BAuDwB,IAAIhc,MAAJ,oDACyCoN,EAAO1E,aAxDxE,eA6DciF,EAAO,CACLoY,QAASrjB,EAAOiL,KAAKoY,QACrBlN,SACA+K,eAhEhB,gCAsEoB/K,EAAS0D,aAAOP,EAAM8B,MACQ,cAAhBjF,EAAOxK,MAvEzC,kCAyEwB5O,EAAWumB,mBAAmB5Y,GAzEtD,sDA0EkB5P,EA1ElB,eAwEoByoB,EAxEpB,KA4EctY,EAAO,CACLoY,QAASrjB,EAAOiL,KAAKoY,QACrBlN,SACAoN,cA/EhB,oCAoFctY,EAAO,CACLoY,QAASrjB,EAAOiL,KAAKoY,QACrBlN,OAAQ0D,aAAOP,EAAMuD,KAtFrC,oCA0Fc5R,EAAO,CACLoY,QAASrjB,EAAOiL,KAAKoY,QACrBlN,OAAQ0D,aAAOP,EAAM8D,KA5FrC,oCAgGcnS,EAAO,CACLoY,QAASrjB,EAAOiL,KAAKoY,QACrBlN,OAAQ0D,aAAOP,EAAMuG,KAlGrC,oCAsGc5U,EAAO,CACLoY,QAASrjB,EAAOiL,KAAKoY,QACrBlN,OAAQ0D,aAAOP,EAAMkH,KAxGrC,oCA6GcvV,EAAO,CACLoY,QAASrjB,EAAOiL,KAAKoY,QACrBlN,OAAQ0D,aAAOP,EAAMD,KA/GrC,6BAmHcpO,OAAOnQ,EAnHrB,2DAsHUqC,aAAY,EAAD,GAAQ,CAAEM,MAAKuJ,QAAS0D,EAAO1E,aAtHpD,QA0HM+N,EAAU,CACRqP,QACAI,WAAYxjB,EAAOwjB,WACnBvL,MAAOjY,EAAOiY,MACdhN,QA9HR,QAiIIA,EAAO,CAAEP,SAAQrM,WAAU0V,WAC3B0P,EAAcpP,EAAYqC,QAlI9B,kDAoIQrd,IAAYF,IAAQO,QACtByD,aAAY,EAAD,GAAQ,CAAEM,QAEvBgmB,EAAcpP,EAAYsC,YAvI9B,QAyIEvb,EAAS,CACPuQ,KAAM2I,EAAWW,OACjB1a,OAAQkpB,EACRxY,OACA9E,IAAKuE,EAAO1E,WACZvI,QA9IJ,mE,sBA0JO,SAASimB,GACd1c,GAEA,IAAMxJ,EAAU5C,IAAMyC,WAAWtC,IAEjC,IAAKyC,EACH,MAAM,IAAIF,MAAJ,yDAER,QAAgBxC,IAAZkM,EACJ,OAAOxJ,EAAQsV,QAAQ9L,GAGlB,SAAS2c,GACd3c,GAEA,IAAM2S,EAAc+J,GAAe1c,GACnC,OAAOpM,IAAMma,SAAQ,WACnB,QAAgBja,IAAZkM,EAEJ,IAAK,IAAD,IACIiE,EAAI,OAAG0O,QAAH,IAAGA,GAAH,UAAGA,EAAa1O,YAAhB,iBAAG,EAAmB8I,eAAtB,aAAG,EAA4B9I,KACzC,IAAKA,EAAM,OACX,GAAqB,cAAjBA,EAAKoY,SAAgD,SAArBpY,EAAKkL,OAAOxK,KAC9C,OAGF,OAAOkO,aAAO5O,EAAKkL,OAAOmD,KAAMZ,IAChC,MAAO3W,GACP5E,aAAY4E,EAAK,CAAEiF,eAEpB,CAACA,EAAS2S,IAsBR,SAASiK,KACd,IAAMxoB,EAAWR,IAAMyC,WAAWrC,IAClC,IAAKI,EACH,MAAM,IAAIkC,MAAJ,8DAH4B,MAQXC,cAAjBlE,EAR4B,EAQ5BA,QAASoE,EARmB,EAQnBA,IACjB,OAAO7C,IAAMsI,aACX,SAACwH,I,2CACCmZ,CAAiBzoB,EAAUsP,EAAQrR,EAASoE,KAE9C,CAACrC,EAAU/B,EAASoE,I,aC9UjB,SAASqmB,GAAT,GAQH,IAPFrf,EAOC,EAPDA,KACAvJ,EAMC,EANDA,SACA6oB,EAKC,EALDA,YAKC,EACyB1oB,mBAAoB,QAD7C,mBACMhB,EADN,KACa2pB,EADb,KAGKC,EAAW,yCAAG,uBAAAnnB,EAAA,+EAEVonB,UAAUC,UAAUC,UAAU3f,GAFpB,OAGhBuf,EAAS,UAHO,+CAKhBA,EAAS,WALO,OAOlBK,YAAW,kBAAML,EAAS,UAAS,KAPjB,yDAAH,qDAUjB,SAASM,IACP,MAAc,SAAVjqB,EAEA,sBAAMiF,UAAU,uBAAuBmG,QAASwe,IAE/B,WAAV5pB,EACF,sBAAMiF,UAAU,uBACJ,YAAVjF,EAEP,sBACEiF,UAAU,iBACVilB,MAAM,kDAIL,KAGT,IAAIpiB,EAAU,GACVqiB,EAAY,GAShB,SAASC,IACP,OACE,qCACE,sBAAMnlB,UAAU,sBAAhB,SACE,uBAAMA,UAAWklB,EAAjB,UACE,sBAAMllB,UAAU,OAAhB,SAAwB6C,IACxB,cAACmiB,EAAD,SAGHppB,KAKP,SAASwpB,IACP,OACE,uBAAMplB,UAAU,iCAAhB,UACE,sBAAMA,UAAU,iBAAhB,SACE,uBAAMA,UAAWklB,EAAjB,UACE,cAACF,EAAD,IACA,sBAAMhlB,UAAU,OAAhB,SAAwB6C,SAG5B,sBAAM7C,UAAU,WAAhB,SAA4BpE,OAKlC,MApCc,WAAVb,GACF8H,EAAU,SACVqiB,EAAY,aACO,YAAVnqB,IACT8H,EAAU,cACVqiB,EAAY,eA+BA,SAAVnqB,EACK,cAACoqB,EAAD,IACEV,EACF,cAACW,EAAD,IAIP,qCACE,sBAAMplB,UAAU,qBAAhB,SACE,cAACmlB,EAAD,MAEF,sBAAMnlB,UAAU,qBAAhB,SACE,cAAColB,EAAD,SC1ED,SAASC,GAAT,GAQI,IAPTja,EAOQ,EAPRA,OACAka,EAMQ,EANRA,WACAC,EAKQ,EALRA,KACA9mB,EAIQ,EAJRA,IACA+mB,EAGQ,EAHRA,SACAC,EAEQ,EAFRA,gBACAC,EACQ,EADRA,cAEMhe,EAAU0D,EAAO1E,WACf8D,EAAkBmH,IAAlBnH,cACAzQ,EAAYkE,cAAZlE,QAGN0rB,GACA/d,IAAYkD,YAAelD,EAAS3N,EAASyQ,KAE7Cgb,GAAW,GAGb,IAAIjb,EAAe9L,EACfiJ,EACAkD,YAAelD,EAAS3N,EAASyQ,GAEjCkb,GAAiBnb,IAAiB7C,IACpC6C,EAAeA,EAAahL,MAAM,EAAGmmB,GAAiB,UAGxD,IAAMC,EACJ,cAACnB,GAAD,CAAUrf,KAAMuC,EAAS+c,aAAca,EAAvC,SACE,sBAAMtlB,UAAU,iBAAhB,SACGulB,EACC,cAAC,IAAD,CACEvlB,UAAWwlB,EAAW,iCAAmC,GACzDlY,GAAItG,YAAY,YAAD,OAAaU,IAF9B,SAIG6C,IAGH,sBAAMvK,UAAWwlB,EAAW,iCAAmC,GAA/D,SACGjb,QAOX,OACE,qCACE,qBACEvK,UAAS,8CACPslB,EAAa,sBAAwB,IAFzC,SAKGK,IAEH,qBAAK3lB,UAAU,sCAAf,SAAsD2lB,OC7D5D,IAAMC,GAAY,IAAI/K,KAAG,GAAGhc,IAAI,IAAIgc,KAAG,KAAKgL,IAAI,IAAIhL,KAAG,IAEhD,SAASiL,GAAT,GAUH,IATF7a,EASC,EATDA,QACA8a,EAQC,EARDA,aACA9B,EAOC,EAPDA,WACA+B,EAMC,EANDA,iBAOMC,EACiB,cAArBD,GACAE,GAAmBH,EAAc9B,GACnC,OACE,qCACE,cAACkC,GAAD,CAAYJ,aAAcA,IAC1B,cAACK,GAAD,CACEnb,QAASA,EACT8a,aAAcA,EACdC,iBAAkBA,EAClB/B,WAAYA,EACZgC,eAAgBA,KAEhBA,GACA,cAACI,GAAD,CACEN,aAAcA,EACd9B,WAAYA,EACZ+B,iBAAkBA,IAGtB,cAACM,GAAD,CAAiB5T,KAAMqT,EAAarT,UAK1C,SAASyT,GAAT,GAA2E,IAAD,EAClElY,EAAgB,MAAQ,UAD0C,EAApD8X,aACuBrT,YAAb,eAAmByI,OAAOlN,gBAAiB,GACzE,GAAIG,KAAKuB,MAAQ1B,EAAe,CAC9B,IAAMsY,EAAkBvX,EAAoBf,GAC5C,OACE,sBAAKjO,UAAU,kCAAf,UACE,wDADF,sBACyDumB,KAI3D,OAAO,KAIX,IAAMC,GAAa,CACjBC,cAAe,gBACfC,YAAa,cACbC,UAAW,YACXC,YAAa,eAGf,SAASC,GACPb,EACA/B,GAEA,IAAIhpB,EAASurB,GAAWR,GACpBc,EAAkB,GAOtB,MANyB,cAArBd,EACF/qB,EAAS,gBAET6rB,EAAkB7C,EAAU,WAAOA,EAAWlpB,MAAlB,KAA6B,GAGpD,CAACE,EAAQ6rB,GAAiBlmB,KAAK,KAGxC,SAASwlB,GAAT,GAYI,IAXFnb,EAWC,EAXDA,QACA8a,EAUC,EAVDA,aACAC,EASC,EATDA,iBACA/B,EAQC,EARDA,WACAgC,EAOC,EAPDA,eAQMzO,EAAU8M,KAChB,OACE,sBAAKtkB,UAAU,OAAf,UACE,sBAAKA,UAAU,cAAf,UACE,oBAAIA,UAAU,mDAAd,2BAGA,yBACEA,UAAU,uBACVmG,QAAS,kBAAMqR,EAAQvM,EAAQG,SAFjC,UAIE,sBAAMpL,UAAU,0BAJlB,gBASF,eAAC8G,GAAA,EAAD,WACE,+BACE,yCACA,oBAAI9G,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQH,EAAQG,OAAQka,YAAU,EAAC7mB,KAAG,SAGnD,+BACE,+CACA,oBAAIuB,UAAU,+BAAd,SACE,cAAC,IAAD,CAAYjB,SAAUkM,EAAQlM,UAAY,SAG9C,+BACE,oDACA,oBAAIiB,UAAU,gBAAd,SACE,cAAC,IAAD,CAAYjB,SAAUgnB,EAAarT,KAAKuG,yBAG3CgN,GACC,+BACE,wCACA,oBAAIjmB,UAAU,gBAAd,SACGkmB,GAAmBH,EAAc9B,GAC9B,gBACA4C,GAAcb,EAAkB/B,cASlD,SAASoC,GAAT,GAQI,IAAD,EACGU,EAAarL,EAAiBC,EARlCoK,EAOC,EAPDA,aACAC,EAMC,EANDA,iBACA/B,EAKC,EALDA,WAOMzI,EAAU,OAAGuK,QAAH,IAAGA,GAAH,UAAGA,EAAcxK,aAAjB,aAAG,EAAqBC,WACpCA,IACFuL,EAAcvL,EAAWC,MACzBC,EAAkBF,EAAWE,gBAAgBsL,GAAGpB,IAC5C,IACApK,EAAWE,gBAAgBve,WAC/Bwe,EAAoBH,EAAWG,kBAAkBqL,GAAGpB,IAChD,IACApK,EAAWG,kBAAkBxe,YAVlC,IAYOoe,EAAUwK,EAAVxK,MACR,OACE,sBAAKvb,UAAU,OAAf,UACE,qBAAKA,UAAU,cAAf,SACE,oBAAIA,UAAU,mDAAd,gCAIF,eAAC8G,GAAA,EAAD,WACE,+BACE,wCACA,oBAAI9G,UAAU,gBAAd,SACG6mB,GAAcb,EAAkB/B,QAIpC1I,GACC,qCACE,+BACE,uDACA,oBAAIvb,UAAU,gBAAd,SACE,cAAC,IAAD,CAAYjB,SAAUwc,EAAMC,WAAWD,aAI1C0I,GACC,qCACE,+BACE,oDACA,oBAAIjkB,UAAU,gBAAd,SACE,cAAC,IAAD,CAAYjB,SAAUklB,EAAWnX,cAIrC,+BACE,sDACA,oBAAI9M,UAAU,gBAAd,SACE,cAAC,IAAD,CAAYjB,SAAUklB,EAAWgD,mBAMxCF,GACC,+BACE,wDACA,oBAAI/mB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ2b,EAAazB,YAAU,EAACC,MAAI,SAKnD,+BACE,kDACA,oBAAIvlB,UAAU,gBAAd,SAA+B0b,OAGjC,+BACE,oDACA,oBAAI1b,UAAU,gBAAd,SAA+B2b,gBAS7C,SAAS2K,GAAT,GAAyD,IAA9B5T,EAA6B,EAA7BA,KACnBwU,EAAYxU,EAAKyI,OAAOlN,cAAgB,EAC9C,OACE,sBAAKjO,UAAU,OAAf,UACE,qBAAKA,UAAU,cAAf,SACE,oBAAIA,UAAU,mDAAd,2BAIF,eAAC8G,GAAA,EAAD,WACE,+BACE,yDACA,oBAAI9G,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQsH,EAAKsI,WAAWC,OAAQqK,YAAU,EAACC,MAAI,SAI5D,+BACE,4DACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQsH,EAAKsI,WAAWE,WAAYoK,YAAU,EAACC,MAAI,SAI/D2B,GACC,+BACE,0DACA,oBAAIlnB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQsH,EAAKyI,OAAOE,UAAWiK,YAAU,EAACC,MAAI,eASrE,SAASW,GACPH,EACA9B,GACU,IACF1I,EAAUwK,EAAVxK,MAER,SAAKA,IAAU0I,IAIR1I,EAAMC,WAAWD,MAAMpe,aAAe8mB,EAAWgD,SAAS9pB,WCrR5D,SAASgqB,GAAT,GAAgE,IAAlClc,EAAiC,EAAjCA,QAC3BwJ,EAAsBxJ,EAAtBwJ,QAAS1V,EAAakM,EAAblM,SACThF,EAAYkE,cAAZlE,QACAyQ,EAAkBmH,IAAlBnH,cACR,QAAiBhP,IAAbuD,EAAwB,OAAO,KAEnC,IAAM4U,EAAQpJ,YAAaU,EAAQG,OAAO1E,WAAY3M,EAASyQ,GAC/D,OACE,sBAAKxK,UAAU,OAAf,UACE,qBAAKA,UAAU,iCAAf,SACE,oBAAIA,UAAU,oBAAd,wBAGF,eAAC8G,GAAA,EAAD,WACE,+BACE,yCACA,oBAAI9G,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQH,EAAQG,OAAQka,YAAU,EAAC7mB,KAAG,SAGlDkV,GACC,+BACE,+CACA,oBAAI3T,UAAU,gBAAd,SAA+B2T,OAGnC,+BACE,+CACA,oBAAI3T,UAAU,gBAAd,SACE,cAAC,IAAD,CAAYjB,SAAUA,cAINvD,KAAZ,OAAPiZ,QAAO,IAAPA,OAAA,EAAAA,EAASqP,QACR,+BACE,8CACA,oBAAI9jB,UAAU,gBAAd,SAA+ByU,EAAQqP,WAI1CrP,GACC,+BACE,uCACA,oBAAIzU,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQqJ,EAAQkE,MAAO2M,YAAU,EAACC,MAAI,SAKpD9Q,GACC,+BACE,4CACA,oBAAIzU,UAAU,gBAAd,SACGyU,EAAQyP,WAAa,MAAQ,gB,ICtDhCkD,G,8BAFNC,GAAkB,IAAIC,GCJrB,SAASC,GAAT,GAAyD,IAAlC1kB,EAAiC,EAAjCA,QAC5B,OACE,qBAAK7C,UAAU,OAAf,SACE,sBAAKA,UAAU,wBAAf,UACE,sBAAMA,UAAU,sCACf6C,GAAW,gB,SDCRukB,O,qBAAAA,I,6BAAAA,I,sBAAAA,Q,KEeZ,IAAMI,GAAgB,SAACjC,GACrB,IAAI7d,EAAU,GACd,GAAI6d,EAAM,CACR,IAAMkC,EAAalC,EAAKmC,MAAM,wBAE1BD,IACF/f,EAAU+f,EAAW,IAIzB,OAAO/f,GAGF,SAASigB,GAAT,GAMH,IALF1c,EAKC,EALDA,QACA2c,EAIC,EAJDA,aAKQ7tB,EAAYkE,cAAZlE,QAER,IACE,OAAQ6tB,EAAavb,MACnB,IAAK,OACH,IAAM2N,EAAOO,aAAOqN,EAAa5N,KAAMZ,IACvC,OAAO,cAACyO,GAAD,CAAiB5c,QAASA,EAAS+O,KAAMA,IAElD,IAAK,UACH,IAAMA,EAAOO,aAAOqN,EAAa5N,KAAMvB,IACvC,OAAO,cAACqP,GAAD,CAAkB7c,QAASA,EAAS+O,KAAMA,IAEnD,IAAK,WACH,IAAMA,EAAOO,aAAOqN,EAAa5N,KAAMN,IACvC,OAAO,cAACqO,GAAD,CAAqB9c,QAASA,EAAS+O,KAAMA,KAGxD,MAAOvX,GACH1I,IAAYF,IAAQO,QACtByD,aAAY4E,EAAK,CACfiF,QAASuD,EAAQG,OAAO1E,aAI9B,OAAO,cAACygB,GAAD,CAAoBlc,QAASA,IAGtC,SAAS4c,GAAT,GAMI,IAAD,cAgBGG,EArBJ/c,EAKC,EALDA,QACA+O,EAIC,EAJDA,KAKQxP,EAAkBmH,IAAlBnH,cACFyd,EAAchd,EAAQG,OAAO1E,WAC7BwhB,EAAY5D,KAEZ7Z,EAAYD,EAAcpO,IAAI6rB,GAE9BE,EAAwBX,GAAa,OACzC/c,QADyC,IACzCA,GADyC,UACzCA,EAAW2d,kBAD8B,aACzC,EAAuBC,gBAEnBC,EAAuBd,GAAa,OACxC/c,QADwC,IACxCA,GADwC,UACxCA,EAAW2d,kBAD6B,aACxC,EAAuBG,eAGnBC,EF3CD,SAAsBC,GAA+C,IAAD,EACzCntB,IAAMS,WADmC,mBAClEysB,EADkE,KACxDE,EADwD,KA8CzE,OA5CAptB,IAAMwB,WAAU,WACd,IAAI6rB,EACJ,GAAIF,EAAQ,CACV,IAAMG,EAAc,WAAqB,yDAErCF,EAAY,CACVztB,OAAQmsB,GAAgByB,UAG5BxB,GAAgByB,MACbvH,MAAMkH,GACNrX,MAAK,SAAC4I,GACL0O,EAAY,CACVF,SAAU,CACRO,MAAO/O,EAAKrO,KAAKqd,YAAYC,cAAcC,IAC3CC,UAAWnP,EAAKrO,KAAKqd,YAAYI,aAAaF,IAC9CG,WAAYrP,EAAKrO,KAAKqd,YAAYK,WAAWH,IAC7CI,gBAAiBtP,EAAKrO,KAAKqd,YAAYM,gBACvCC,4BACEvP,EAAKrO,KAAKqd,YAAYO,4BACxBC,aAAc,IAAIpb,KAAK4L,EAAKrO,KAAK6d,eAEnCvuB,OAAQmsB,GAAgBqC,aAG3BC,OAAM,SAAC9mB,GACN8lB,EAAY,CACVztB,OAAQmsB,GAAgB/P,kBAKhCuR,IACAD,EAAWgB,aAAY,WACrBf,GAAY,KA/EE,KAkFlB,OAAO,WACDD,GACFiB,cAAcjB,MAGjB,CAACD,EAAaD,IAEVD,EEHUqB,CAAY,OAACpf,QAAD,IAACA,GAAD,UAACA,EAAW2d,kBAAZ,aAAC,EAAuB0B,aAOrD,OAJY,OAARtB,QAAQ,IAARA,OAAA,EAAAA,EAAUvtB,UAAWmsB,GAAgBqC,UACvCzB,EAAiBQ,EAASA,UAI1B,sCACY,OAAT/d,QAAS,IAATA,GAAA,UAAAA,EAAW2d,kBAAX,eAAuB0B,eACd,OAARtB,QAAQ,IAARA,OAAA,EAAAA,EAAUvtB,UAAWmsB,GAAgByB,SACnC,cAACtB,GAAD,CAAa1kB,QAAQ,6BAExBmlB,GAAkBA,EAAee,OAChC,sBAAK/oB,UAAU,MAAf,UACE,qBAAKA,UAAU,yBAAf,SACE,qBAAKA,UAAU,OAAf,SACE,sBAAKA,UAAU,YAAf,UACE,uCACQ,IACN,uBAAMA,UAAU,gCAAhB,mBACSgoB,EAAesB,sBAG1B,qBAAItpB,UAAU,OAAd,cACIgoB,EAAee,MAAMxnB,QAAQ,GAAI,IAClCymB,EAAeuB,4BAA8B,GAC5C,wBAAOvpB,UAAU,kBAAjB,mBACS,IACNgoB,EAAeuB,4BAA4BhoB,QAAQ,GAFtD,OAKDymB,EAAeuB,4BAA8B,GAC5C,wBAAOvpB,UAAU,kBAAjB,mBACS,IACNgoB,EAAeuB,4BAA4BhoB,QAAQ,GAFtD,OAK8C,IAA/CymB,EAAeuB,6BACd,iDAMV,qBAAKvpB,UAAU,yBAAf,SACE,qBAAKA,UAAU,OAAf,SACE,sBAAKA,UAAU,YAAf,UACE,gDACA,qBAAIA,UAAU,OAAd,cACIqB,YAAkB2mB,EAAemB,qBAK3C,qBAAKnpB,UAAU,yBAAf,SACE,qBAAKA,UAAU,OAAf,SACE,sBAAKA,UAAU,YAAf,UACE,4CACA,qBAAIA,UAAU,OAAd,cACIqB,YAAkB2mB,EAAeqB,eAErC,oBAAGrpB,UAAU,0BAAb,uBACa,IACVkP,EACC8Y,EAAewB,aAAa5Z,wBAQ1C,sBAAK5P,UAAU,OAAf,UACE,sBAAKA,UAAU,cAAf,UACE,oBAAIA,UAAU,mDAAd,SACGyK,EAAY,WAAa,eAE5B,yBAAQzK,UAAU,uBAAuBmG,QAxFjC,kBAAM+hB,EAAUjd,EAAQG,SAwFhC,UACE,sBAAMpL,UAAU,0BADlB,gBAKF,eAAC8G,GAAA,EAAD,WACE,+BACE,yCACA,oBAAI9G,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQH,EAAQG,OAAQka,YAAU,EAAC7mB,KAAG,SAGnD,+BACE,6BAC0B,OAAvBub,EAAKX,cAAyB,eAAiB,mBAElD,oBAAIrZ,UAAU,gBAAd,SACGxB,YAAqBwb,EAAKT,OAAQS,EAAKtb,UAAUqrB,eAChD,QACA,CACEC,sBAAuBhQ,EAAKtb,iBAK1B,OAAT+L,QAAS,IAATA,GAAA,UAAAA,EAAW2d,kBAAX,eAAuB6B,UACtB,+BACE,yCACA,oBAAIjqB,UAAU,gBAAd,SACE,oBACE8Q,IAAI,sBACJrE,OAAO,SACPoE,KAAMpG,EAAU2d,WAAW6B,QAH7B,UAKGxf,EAAU2d,WAAW6B,QACtB,sBAAMjqB,UAAU,qCAKvBga,EAAKX,eACJ,+BACE,gDACA,oBAAIrZ,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKX,cAAeiM,YAAU,EAACC,MAAI,SAIzDvL,EAAKP,iBACJ,+BACE,kDACA,oBAAIzZ,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKP,gBAAiB6L,YAAU,EAACC,MAAI,SAI5D,+BACE,0CACA,oBAAIvlB,UAAU,gBAAd,SAA+Bga,EAAKtb,eAEpCsb,EAAKR,eACL,+BACE,wCACA,oBAAIxZ,UAAU,gBAAd,+BAGM,OAATyK,QAAS,IAATA,GAAA,UAAAA,EAAW2d,kBAAX,eAAuBC,iBAAkBF,GACxC,+BACE,iDACA,oBAAInoB,UAAU,gBAAd,SACE,cAACwkB,GAAD,CAAUrf,KAAMgjB,EAAhB,SACE,mBACEtX,KAAMpG,EAAU2d,WAAWC,eAC3B5b,OAAO,SACPqE,IAAI,aAHN,SAKGqX,YAMD,OAAT1d,QAAS,IAATA,GAAA,UAAAA,EAAW2d,kBAAX,eAAuBG,gBAAiBD,GACvC,+BACE,wDACA,oBAAItoB,UAAU,gBAAd,SACE,cAACwkB,GAAD,CAAUrf,KAAMmjB,EAAhB,SACE,mBACEzX,KAAMpG,EAAU2d,WAAWC,eAC3B5b,OAAO,SACPqE,IAAI,aAHN,SAKGwX,oBAYrB,SAASR,GAAT,GAMI,IAMEoC,EAAMC,EAWH,EAtBPlf,EAKC,EALDA,QACA+O,EAIC,EAJDA,KAKMxC,EAAU8M,KACRvqB,EAAYkE,cAAZlE,QACAyQ,EAAkBmH,IAAlBnH,cACFmJ,EAAQpJ,YAAaU,EAAQG,OAAO1E,WAAY3M,EAASyQ,GAG3DwP,EAAKjB,UACPmR,EAAO,MACPC,EACE,8CAEE,sBAAMnqB,UAAU,iBAAhB,SACG,IAAIoqB,aAAUpQ,EAAKpB,YAAYL,gBAAgB8R,SAAS,UAK/DF,EAAU,mCAAGnQ,EAAKpB,YAAYL,iBAC9B2R,GAAO,UAAA1f,EAAcpO,IAAI4d,EAAKtB,KAAKhS,mBAA5B,eAAyCgE,SAAU,UAG5D,OACE,sBAAK1K,UAAU,OAAf,UACE,sBAAKA,UAAU,cAAf,UACE,oBAAIA,UAAU,mDAAd,2BAGA,yBACEA,UAAU,uBACVmG,QAAS,kBAAMqR,EAAQvM,EAAQG,SAFjC,UAIE,sBAAMpL,UAAU,0BAJlB,gBASF,eAAC8G,GAAA,EAAD,WACE,+BACE,yCACA,oBAAI9G,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQH,EAAQG,OAAQka,YAAU,EAAC7mB,KAAG,SAGlDkV,GACC,+BACE,+CACA,oBAAI3T,UAAU,gBAAd,SAA+B2T,OAGnC,+BACE,sCACA,oBAAI3T,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKtB,KAAM4M,YAAU,EAACC,MAAI,SAG/C,+BACE,uCACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKrB,MAAO2M,YAAU,EAACC,MAAI,SAGhD,+BACE,iDAAoB2E,EAApB,OACA,oBAAIlqB,UAAU,gBAAd,SAA+BmqB,OAEjB,kBAAfnQ,EAAKjf,OACJ,+BACE,wCACA,oBAAIiF,UAAU,gBAAd,8BAGHga,EAAKf,mBACJ,+BACE,2DACA,oBAAIjZ,UAAU,gBAAd,SACE,8CAEE,sBAAMA,UAAU,iBAAhB,SACG,IAAIoqB,aACHpQ,EAAKf,kBAAkBV,gBACvB8R,SAAS,mBAW7B,SAAStC,GAAT,GAMI,IALF9c,EAKC,EALDA,QACA+O,EAIC,EAJDA,KAKMxC,EAAU8M,KAEhB,OACE,sBAAKtkB,UAAU,OAAf,UACE,sBAAKA,UAAU,cAAf,UACE,oBAAIA,UAAU,mDAAd,8BAGA,yBACEA,UAAU,uBACVmG,QAAS,kBAAMqR,EAAQvM,EAAQG,SAFjC,UAIE,sBAAMpL,UAAU,0BAJlB,gBASF,eAAC8G,GAAA,EAAD,WACE,+BACE,yCACA,oBAAI9G,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQH,EAAQG,OAAQka,YAAU,EAAC7mB,KAAG,SAGnD,+BACE,kDACA,oBAAIuB,UAAU,gBAAd,SAA+Bga,EAAKL,wBAEtC,+BACE,+CACA,oBAAI3Z,UAAU,gBAAd,SAA+Bga,EAAKJ,qBAErCI,EAAKH,QAAQxT,KAAI,SAACkF,GAAD,OAChB,+BACE,wCACA,oBAAIvL,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQG,EAAQ+Z,YAAU,EAACC,MAAI,QAHnCha,EAAOpO,gBAOhB6c,EAAKR,eACL,+BACE,wCACA,oBAAIxZ,UAAU,gBAAd,oCClaL,SAASsqB,GAAT,GAUH,IATFC,EASC,EATDA,MACAC,EAQC,EARDA,UACArlB,EAOC,EAPDA,KACAslB,EAMC,EANDA,QAOMC,EAAaF,GAAa,YAChC,OACE,qBAAKxqB,UAAU,OAAf,SACE,sBAAKA,UAAU,wBAAf,UACGmF,EACAolB,GACC,qCACE,sBACEvqB,UAAU,wCACVmG,QAASokB,EAFX,SAIGG,IAEH,qBAAK1qB,UAAU,yBAAf,SACE,sBAAMA,UAAU,sBAAsBmG,QAASokB,EAA/C,SACGG,MAGJD,GACC,sBAAKzqB,UAAU,aAAf,UACE,uBACCyqB,a,kCC3BV,SAASE,GAAUC,GAItB,IAAD,EACOxlB,EAAqBwlB,EAArBxlB,MAAOpF,EAAc4qB,EAAd5qB,UACT0H,EACqB,kBAAlBkjB,EAAMljB,QACTkjB,EAAMljB,QADV,UAEIkjB,EAAMljB,eAFV,aAEI,EAAehB,WACfsL,EAAMD,iBAAuB,MAenC,OAbAjV,qBAAU,WACJ4K,GAAWsK,EAAIC,UACjBD,EAAIC,QAAQ4Y,UAAY,GACxB7Y,EAAIC,QAAQjS,UAAYA,GAAa,GACrCgS,EAAIC,QAAQ6Y,YACVC,MACO,OAAL3lB,QAAK,IAALA,OAAA,EAAAA,EAAOyN,QAAS,GAChBlU,SAASqE,IAAK4I,OAAOlE,GAASvK,SAAS,OAAOoC,MAAM,EAAG,IAAK,SAIjE,CAACmI,EAAStC,EAAOpF,IAEb,qBAAKA,UAAU,oBAAoBgS,IAAKA,EAAK5M,MAAOwlB,EAAMxlB,QCA5D,SAAS4lB,GAAT,GAA6D,IAAD,EAAjC5f,EAAiC,EAAjCA,OAC1B1D,EAAU0D,EAAO1E,WACjBukB,EAAczQ,GAAsB9S,GACpCgT,EAAqBD,KACrBjD,EAAU,kBAAMkD,EAAmBtP,IAJwB,EAK7B9P,IAAMS,UAAS,GALc,mBAK1DmvB,EAL0D,KAK5CC,EAL4C,KAM3DC,EAhBgB,WACtB,IACM3X,EADQtX,cACOC,IAAI,WACzB,MAAe,YAAXqX,GAAmC,WAAXA,EACnBA,EAEA,KAUO4X,GAOhB,GAJA/vB,IAAMwB,WAAU,WACTmuB,GAAazT,MACjB,CAAC9P,SAEgBlM,IAAhByvB,EACF,OAAO,KAdwD,IAiBzDhwB,EAAWgwB,EAAXhwB,OACFoW,EAAM,UAAG4Z,EAAYtf,YAAf,aAAG,EAAkB0F,OAEjC,QADiBpW,IAAW8Z,EAAYkC,gBACZzb,IAAX6V,GAA0C,IAAlBA,EAAOjU,YAE1B5B,IAAX6V,EACF,cAACiZ,GAAD,CAAWC,MAAO/S,EAASrS,KAAK,mCAGnB,IAAlBkM,EAAOjU,OAEP,cAACktB,GAAD,CACEC,MAAO/S,EACPgT,UAAU,YACVrlB,KAAM,4BAMV,qCACG+lB,GACC,qBAAKlrB,UAAU,gBAAgBmG,QAAS,kBAAMglB,GAAY,MAG5D,sBAAKnrB,UAAU,OAAf,UACE,sBAAKA,UAAU,iCAAf,UACE,oBAAIA,UAAU,oBAAd,4BACA,cAAC,GAAD,CACEorB,QAASA,EACTE,OAAQ,kBAAMH,GAAY,SAACrf,GAAD,OAAWA,MACrCA,KAAMof,OAGG,WAAZE,EACC,cAACG,GAAD,CAAqBla,OAAQA,IAE7B,cAACma,GAAD,CAAsBna,OAAQA,UAjC7B,cAACkW,GAAD,CAAa1kB,QAAQ,2BAwChC,SAAS0oB,GAAT,GAA6E,IAA9Cla,EAA6C,EAA7CA,OACvBoa,EAAiC,GAC/BjhB,EAAkBmH,IAAlBnH,cACFkhB,EAAYra,EAAOsa,MACvB,SAACC,GAAD,kBAA8DpwB,KAAvD,UAAAgP,EAAcpO,IAAIwvB,EAAE5R,KAAKtB,KAAKhS,mBAA9B,eAA2CmlB,YAuCpD,OArCAxa,EAAOtM,SAAQ,SAAC6iB,GACd,IAAMlgB,EAAUkgB,EAAaxc,OAAO1E,WAC9BuhB,EAAcL,EAAa5N,KAAKtB,KAAKhS,WACrColB,EAAethB,EAAcpO,IAAI6rB,GACvCwD,EAAYxuB,KACV,+BACGyuB,GACC,oBAAI1rB,UAAU,sBAAd,UACe,OAAZ8rB,QAAY,IAAZA,OAAA,EAAAA,EAAcD,SACb,qBACErb,IAAKsb,EAAaD,QAClBlb,IAAI,aACJ3Q,UAAU,+DAGZ,cAAC2qB,GAAD,CACEjjB,QAASA,EACT1H,UAAU,uDACVoF,MAAO,CAAEyN,MAjGK,QAsGtB,6BACE,cAACwS,GAAD,CAASja,OAAQwc,EAAaxc,OAAQma,MAAI,EAACC,UAAQ,MAErD,6BACE,cAACH,GAAD,CAASja,OAAQwc,EAAa5N,KAAKtB,KAAM6M,MAAI,EAACC,UAAQ,MAExD,+BACGoC,EAAa5N,KAAKpB,YAAYL,eAAgB,IAC9CuT,GAAgBA,EAAaphB,YA1BzBhD,OAiCX,qBAAK1H,UAAU,wBAAf,SACE,wBAAOA,UAAU,yCAAjB,UACE,gCACE,+BACG0rB,GACC,oBAAI1rB,UAAU,iCAAd,kBAEF,oBAAIA,UAAU,aAAd,6BACA,oBAAIA,UAAU,aAAd,0BACA,oBAAIA,UAAU,aAAd,0BAGJ,uBAAOA,UAAU,OAAjB,SAAyByrB,SAMjC,SAASD,GAAT,GAA8E,IAAD,EAA7Cna,EAA6C,EAA7CA,OACtB7G,EAAkBmH,IAAlBnH,cACFuhB,EAAe,IAAI3c,IAFkD,eAG7CiC,GAH6C,IAG3E,2BAAsC,CAAC,IAApB2a,EAAmB,QAAzBhS,KACLiO,EAAc+D,EAAMtT,KAAKhS,WACzBulB,EAAcF,EAAa3vB,IAAI6rB,GAEjCzP,EAASwT,EAAMpT,YAAYL,oBACX/c,IAAhBywB,IACFzT,EAAS,IAAI4R,aAAU6B,GACpBC,KAAKF,EAAMpT,YAAYL,gBACvBpb,YAGL4uB,EAAa1kB,IAAI4gB,EAAazP,IAd2C,8BAiB3E,IAAMiT,EAAiC,GACjCC,EAAYra,EAAOsa,MACvB,SAACC,GAAD,kBAA8DpwB,KAAvD,UAAAgP,EAAcpO,IAAIwvB,EAAE5R,KAAKtB,KAAKhS,mBAA9B,eAA2CmlB,YAiCpD,OA/BAE,EAAahnB,SAAQ,SAACknB,EAAahE,GACjC,IAAM6D,EAAethB,EAAcpO,IAAI6rB,GACvCwD,EAAYxuB,KACV,+BACGyuB,GACC,oBAAI1rB,UAAU,sBAAd,UACe,OAAZ8rB,QAAY,IAAZA,OAAA,EAAAA,EAAcD,SACb,qBACErb,IAAKsb,EAAaD,QAClBlb,IAAI,aACJ3Q,UAAU,+DAGZ,cAAC2qB,GAAD,CACEjjB,QAASugB,EACTjoB,UAAU,uDACVoF,MAAO,CAAEyN,MA5KK,QAiLtB,6BACE,cAACwS,GAAD,CAASja,OAAQ,IAAI4M,IAAUiQ,GAAc1C,MAAI,MAEnD,+BACG0G,EADH,IACiBH,GAAgBA,EAAaphB,YAtBvCud,OA6BX,qBAAKjoB,UAAU,wBAAf,SACE,wBAAOA,UAAU,yCAAjB,UACE,gCACE,+BACG0rB,GACC,oBAAI1rB,UAAU,iCAAd,kBAEF,oBAAIA,UAAU,aAAd,0BACA,oBAAIA,UAAU,aAAd,gCAGJ,uBAAOA,UAAU,OAAjB,SAAyByrB,SAYjC,IAAMU,GAAkB,SAAC,GAA8C,IAA5Cf,EAA2C,EAA3CA,QAASE,EAAkC,EAAlCA,OAAQxf,EAA0B,EAA1BA,KAe1C,OACE,sBAAK9L,UAAU,WAAf,UACE,wBACEA,UAAU,uCACVqM,KAAK,SACLlG,QAASmlB,EAHX,SAKe,WAAZF,EAAuB,WAAa,YAEvC,qBACEprB,UAAS,2CAAsC8L,EAAO,QAAU,IADlE,SAV+B,CAAC,KAAM,UAanBzF,KAAI,SAAC+lB,GACpB,OACE,cAAC,IAAD,CAEE9e,GAAI,SAAC1Q,GAAD,OA9BM,SAACA,EAAoBwuB,GACzC,IAAMlkB,EAAS,IAAIH,gBAAgBnK,EAASM,QAM5C,OALgB,OAAZkuB,EACFlkB,EAAOlK,OAAO,WAEdkK,EAAOG,IAAI,UAAW+jB,GAEjB,2BACFxuB,GADL,IAEEM,OAAQgK,EAAO/J,aAqBWkvB,CAAczvB,EAAUwvB,IAC1CpsB,UAAS,uBACPosB,IAAkBhB,EAAU,UAAY,IAE1CjlB,QAASmlB,EANX,SAQqB,WAAlBc,EAA6B,WAAa,WAPtCA,GAAiB,iBCvP7B,SAASE,GAAT,GAMI,IALTrW,EAKQ,EALRA,UACAqP,EAIQ,EAJRA,WACAC,EAGQ,EAHRA,KACAC,EAEQ,EAFRA,SACAE,EACQ,EADRA,cAEI6G,EAAiBtW,EAMrB,OAJIyP,IACF6G,EAAiBtW,EAAU1W,MAAM,EAAGmmB,GAAiB,UAIrD,qBACE1lB,UAAS,oCACPslB,EAAa,sBAAwB,IAFzC,SAKE,cAACd,GAAD,CAAUrf,KAAM8Q,EAAWwO,aAAca,EAAzC,SACE,sBAAMtlB,UAAU,iBAAhB,SACGulB,EACC,cAAC,IAAD,CACEvlB,UAAWwlB,EAAW,mCAAqC,GAC3DlY,GAAItG,YAAY,OAAD,OAAQiP,IAFzB,SAIGsW,IAGHA,QClCL,SAASC,GAAT,GAAsC,IAAtB9P,EAAqB,EAArBA,KACrB,OAD0C,EAAf6I,KAEzB,cAACf,GAAD,CAAUrf,KAAMuX,EAAKvf,WAArB,SACE,sBAAM6C,UAAU,iBAAhB,SACE,cAAC,IAAD,CAAMsN,GAAItG,YAAY,UAAD,OAAW0V,IAAhC,SACGA,EAAKqN,eAAe,eAK3B,sBAAM/pB,UAAU,iBAAhB,SAAkC0c,EAAKqN,eAAe,WCCnD,IAAMtuB,GAAeH,IAAMC,mBAAiCC,GACtDE,GAAkBJ,IAAMC,mBACnCC,GAIK,SAASixB,GAAT,GAA8D,IAAnC7wB,EAAkC,EAAlCA,SACxBuC,EAAQF,cAARE,IAD0D,EAExCoY,EAA0BpY,GAFc,mBAE3DpD,EAF2D,KAEpDe,EAFoD,KAQlE,OAJAR,IAAMwB,WAAU,WACdhB,EAAS,CAAEuQ,KAAM2I,EAAWU,MAAOvX,UAClC,CAACrC,EAAUqC,IAGZ,cAAC,GAAab,SAAd,CAAuBC,MAAOxC,EAA9B,SACE,cAAC,GAAgBuC,SAAjB,CAA0BC,MAAOzB,EAAjC,SACGF,M,gDAMT,WACEE,EACAma,EACAlc,EACAoE,GAJF,kBAAAX,EAAA,6DAME1B,EAAS,CACPuQ,KAAM2I,EAAWW,OACjB1a,OAAQ8Z,EAAYkC,SACpBpQ,IAAKoP,EACL9X,QAVJ,kBAgBwB,IAAIT,IAAWS,GAAKuuB,8BACtCzW,GAjBN,OAgBI0W,EAhBJ,OAmBIxI,EAAcpP,EAAYqC,QAnB9B,gDAqBQrd,IAAYF,IAAQO,QACtByD,aAAY,EAAD,GAAQ,CAAEM,QAEvBgmB,EAAcpP,EAAYsC,YAxB9B,QA0BEvb,EAAS,CACPuQ,KAAM2I,EAAWW,OACjB1a,OAAQkpB,EACRtd,IAAKoP,EACLtK,KAAM,CAAEghB,eACRxuB,QA/BJ,0D,sBAmCO,SAASyuB,KACd,IAAM9wB,EAAWR,IAAMyC,WAAWrC,IAClC,IAAKI,EACH,MAAM,IAAIkC,MAAJ,yEAHmC,MAQlBC,cAAjBlE,EARmC,EAQnCA,QAASoE,EAR0B,EAQ1BA,IACjB,OAAO7C,IAAMsI,aACX,SAACqS,GACC9X,G,2CAAO0uB,CAAa/wB,EAAUma,EAAWlc,EAASoE,KAEpD,CAACrC,EAAU/B,EAASoE,IAIjB,SAAS2uB,GACd7W,GAEA,IAAM/X,EAAU5C,IAAMyC,WAAWtC,IAEjC,IAAKyC,EACH,MAAM,IAAIF,MAAJ,oEAKR,OAAOE,EAAQsV,QAAQyC,GCxGlB,IAAM8W,GAAwB,CACnC,8CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,+CACA,gDAGIC,GAAgD,CACpDC,EAAG,kBACHC,EAAG,OACHC,EAAG,0BACHC,EAAG,2BACHC,EAAG,4CACHC,EAAG,+CAGE,SAASC,GACdziB,GAEA,OAAOiiB,GAAYnnB,SAASkF,EAAYvE,UAAUG,YAG7C,SAAS8mB,GACd1iB,GAEA,IAAM2iB,EAAO3iB,EAAYa,KAAK,GAE9B,KAAM8hB,KAAQT,IACZ,MAAM,IAAIhvB,MAAJ,oDAAuDyvB,IAG/D,OAAOT,GAAmBS,GCrCrB,IAAMV,GAAwB,CACnC,+CAGIC,GAAgD,CACpDC,EAAG,4BACHC,EAAG,qBACHC,EAAG,wBACHC,EAAG,kBACHC,EAAG,mBACHC,EAAG,SACHI,EAAG,aACHC,EAAG,iBACHC,EAAG,mBAGE,SAASC,GACd/iB,GAEA,OAAOiiB,GAAYnnB,SAASkF,EAAYvE,UAAUG,YAG7C,SAASonB,GACdhjB,GAEA,IAAM2iB,EAAO3iB,EAAYa,KAAK,GAE9B,KAAM8hB,KAAQT,IACZ,MAAM,IAAIhvB,MAAJ,uDAA0DyvB,IAGlE,OAAOT,GAAmBS,G,aCxBtBM,GAAoB,CACxB,+CACA,gDAMWC,GAAO7V,aAAM,CAAC,MAAO,SAGrB8V,GAAY9V,aAAM,CAAC,QAAS,MAAO,aAoBnC+V,GAAyB7hB,aAAK,CACzC8hB,YAAavT,GACbwT,aAAcxT,GACdyT,WAAY/V,eACZgW,mBAAoB1T,GACpB2T,iBAAkB3T,KAGb,SAAS4T,GACdloB,GAEA,IAAMwO,EAAUyF,aACdkU,6BAAkBnoB,EAAGqF,MAAM+iB,iBAC3BR,IAqBF,MAlByC,CACvCS,OAAQroB,EAAGyE,KAAK,GAAGK,OACnBwjB,aAActoB,EAAGyE,KAAK,GAAGK,OACzByjB,WAAYvoB,EAAGyE,KAAK,GAAGK,OACvB0jB,KAAMxoB,EAAGyE,KAAK,GAAGK,OACjB2jB,KAAMzoB,EAAGyE,KAAK,GAAGK,OACjB4jB,UAAW1oB,EAAGyE,KAAK,GAAGK,OACtB6jB,WAAY3oB,EAAGyE,KAAK,GAAGK,OACvB8jB,SAAU5oB,EAAGyE,KAAK,GAAGK,OACrB+jB,UAAW7oB,EAAGyE,KAAK,GAAGK,OACtB7E,UAAWD,EAAGC,UACd4nB,YAAarZ,EAAQqZ,YACrBC,aAActZ,EAAQsZ,aACtBC,WAAYvZ,EAAQuZ,WACpBC,mBAAoBxZ,EAAQwZ,mBAC5BC,iBAAkBzZ,EAAQyZ,kBAuBvB,IAAMa,GAAiB/iB,aAAK,CACjCgjB,KAAMrB,GACNsB,WAAY1U,GACZ2U,YAAa3U,GACb4U,UAAWvB,GACXwB,SAAU7U,GACV8U,kBAAmB5W,aAASjB,MAGvB,SAAS8X,GAAerpB,GAC7B,IAAMwO,EAAUyF,aAAOkU,6BAAkBnoB,EAAGqF,MAAMikB,SAAUR,IAExDQ,EAAqB,CACvBjB,OAAQroB,EAAGyE,KAAK,GAAGK,OACnBykB,WAAYvpB,EAAGyE,KAAK,GAAGK,OACvBwjB,aAActoB,EAAGyE,KAAK,GAAGK,OACzB0kB,MAAOxpB,EAAGyE,KAAK,GAAGK,OAClBuN,MAAOrS,EAAGyE,KAAK,GAAGK,OAClB4jB,UAAW1oB,EAAGyE,KAAK,GAAGK,OACtB6jB,WAAY3oB,EAAGyE,KAAK,GAAGK,OACvB7E,UAAWD,EAAGC,UACd8oB,KAAMva,EAAQua,KACdC,WAAYxa,EAAQwa,WACpBC,YAAaza,EAAQya,YACrBC,UAAW1a,EAAQ0a,UACnBC,SAAU3a,EAAQ2a,UAOpB,OAJI3a,EAAQ4a,oBACVE,EAASF,kBAAoB5a,EAAQ4a,mBAGhCE,EAeF,IAAMG,GAAoB1jB,aAAK,CACpC8K,MAAOmB,iBAGF,SAAS0X,GAAkB1pB,GAChC,IAAMwO,EAAUyF,aACdkU,6BAAkBnoB,EAAGqF,MAAMskB,YAC3BF,IAeF,MAZiC,CAC/BpB,OAAQroB,EAAGyE,KAAK,GAAGK,OACnBwjB,aAActoB,EAAGyE,KAAK,GAAGK,OACzByjB,WAAYvoB,EAAGyE,KAAK,GAAGK,OACvB0jB,KAAMxoB,EAAGyE,KAAK,GAAGK,OACjB2jB,KAAMzoB,EAAGyE,KAAK,GAAGK,OACjB4jB,UAAW1oB,EAAGyE,KAAK,GAAGK,OACtB6jB,WAAY3oB,EAAGyE,KAAK,GAAGK,OACvB7E,UAAWD,EAAGC,UACd4Q,MAAOrC,EAAQqC,OAcZ,IAAM+Y,GAAsB7jB,aAAK,CACtC8K,MAAOmB,iBAGF,SAAS6X,GAAoB7pB,GAClC,IAAMwO,EAAUyF,aACdkU,6BAAkBnoB,EAAGqF,MAAMykB,cAC3BF,IAWF,MARqC,CACnCG,mBAAoB/pB,EAAGyE,KAAKxL,MAAM,GAAI,GAAG8G,KAAI,SAACiqB,GAAD,OAAOA,EAAEllB,UACtDujB,OAAQroB,EAAGyE,KAAKzE,EAAGyE,KAAK3N,OAAS,GAAGgO,OACpCyjB,WAAYvoB,EAAGyE,KAAKzE,EAAGyE,KAAK3N,OAAS,GAAGgO,OACxC7E,UAAWD,EAAGC,UACd4Q,MAAOrC,EAAQqC,OAiBZ,IAAMoZ,GAAoBlkB,aAAK,CACpCgjB,KAAMrB,GACNwC,QAAS5V,GACT6V,eAAgBnY,iBAGX,SAASoY,GAAkBpqB,GAChC,IAAMwO,EAAUyF,aACdkU,6BAAkBnoB,EAAGqF,MAAMglB,YAC3BJ,IAcF,MAXiC,CAC/B5B,OAAQroB,EAAGyE,KAAK,GAAGK,OACnBykB,WAAYvpB,EAAGyE,KAAK,GAAGK,OACvBwjB,aAActoB,EAAGyE,KAAK,GAAGK,OACzBuN,MAAOrS,EAAGyE,KAAK,GAAGK,OAClB7E,UAAWD,EAAGC,UACdkqB,eAAgB3b,EAAQ2b,eACxBD,QAAS1b,EAAQ0b,QACjBnB,KAAMva,EAAQua,MAeX,IAAMuB,GAA8BvkB,aAAK,CAC9CojB,SAAU7U,KAGL,SAASiW,GACdvqB,GAEA,IAAMwO,EAAUyF,aACdkU,6BAAkBnoB,EAAGqF,MAAMmlB,sBAC3BF,IAYF,MATqD,CACnDjC,OAAQroB,EAAGyE,KAAK,GAAGK,OACnBykB,WAAYvpB,EAAGyE,KAAK,GAAGK,OACvBwjB,aAActoB,EAAGyE,KAAK,GAAGK,OACzBuN,MAAOrS,EAAGyE,KAAK,GAAGK,OAClB7E,UAAWD,EAAGC,UACdkpB,SAAU3a,EAAQ2a,UAmBf,SAASsB,GAAkBzqB,GAChC,IAAI0qB,EAA2B,CAC7BrC,OAAQroB,EAAGyE,KAAK,GAAGK,OACnBykB,WAAYvpB,EAAGyE,KAAK,GAAGK,OACvBuN,MAAOrS,EAAGyE,KAAK,GAAGK,OAClB4jB,UAAW1oB,EAAGyE,KAAK,GAAGK,OACtB6jB,WAAY3oB,EAAGyE,KAAK,GAAGK,OACvB6lB,WAAY3qB,EAAGyE,KAAK,GAAGK,OACvB8lB,YAAa5qB,EAAGyE,KAAK,GAAGK,OACxB+lB,YAAa7qB,EAAGyE,KAAK,GAAGK,OACxB7E,UAAWD,EAAGC,WAOhB,OAJID,EAAGyE,KAAK3N,OAAS,IACnB4zB,EAAYI,oBAAsB9qB,EAAGyE,KAAK,GAAGK,QAGxC4lB,EAGF,SAASK,GAAmBvmB,GACjC,OACEijB,GAAkBnoB,SAASkF,EAAYvE,UAAUG,aACjD4qB,WAAQ3F,MACN,SAACgD,GAAD,OACEA,EAAOpoB,WAAaooB,EAAOpoB,UAAU8E,OAAOP,EAAYvE,cAkBhE,IAAMgrB,GAA+C,CACnDtE,EAAG,oBACHC,EAAG,YACHC,EAAG,eACHC,EAAG,iBACHC,EAAG,eACHC,EAAG,eACHI,EAAG,4BACHC,EAAG,iBACHC,EAAG,aACH4D,EAAG,YACHC,GAAI,YACJC,GAAI,eACJC,GAAI,4BACJC,GAAI,YACJC,GAAI,oBACJC,GAAI,oBAGC,SAASC,GAA0BjnB,GACxC,OAAOA,EAAYa,KAAKpM,MAAM,EAAG,GAAGyyB,aAAa,GAG5C,SAASC,GACdnnB,GAEA,IAAM2iB,EAAOsE,GAA0BjnB,GAEvC,KAAM2iB,KAAQ8D,IACZ,MAAM,IAAIvzB,MAAJ,+CAAkDyvB,IAG1D,OAAO8D,GAAkB9D,G,aC1UdO,GAAO7V,aAAM,CAAC,EAAG,IAGjB8V,GAAY9V,aAAM,CAAC,EAAG,EAAG,IAEhC+Z,GAAoBpa,aAAOG,eAAUgC,gBAAO,SAAC1c,GAAD,OAAWA,EAAMmJ,cAgBtDyrB,GAAsB9lB,aAAK,CACtC+lB,SAAUna,eACVoa,iBAAkBvZ,aAASR,gBAC3Bga,gBAAiBha,iBAGNia,GAAsB,SACjCjsB,GAEA,IAAMwO,EAAUyF,aACdkU,6BAAkBnoB,EAAGqF,KAAM6mB,eAAYC,MACvCN,IAeF,MAbqC,CACnCO,qBAAsBpsB,EAAGyE,KAAK,GAAGK,OACjCunB,kBAAmBrsB,EAAGyE,KAAK,GAAGK,OAC9BwnB,uBAAwBtsB,EAAGyE,KAAK,GAAGK,OACnCynB,YAAavsB,EAAGyE,KAAK,GAAGK,OACxB0nB,YAAaxsB,EAAGyE,KAAK,GAAGK,OACxB2nB,aAAczsB,EAAGyE,KAAK,GAAGK,OACzBgnB,SAAUtd,EAAQsd,SAClBC,iBAAkBvd,EAAQud,iBAC1BC,gBAAiBxd,EAAQwd,gBACzB/rB,UAAWD,EAAGC,YAsBLysB,GAAkB3mB,aAAK,CAClC+lB,SAAUna,eACVgb,oBAAqB3a,eACrB4a,SAAU5a,eACV6a,eAAgBrZ,aAAMxB,gBACtB8a,QAAStZ,aAAMoY,MAGJmB,GAAkB,SAAC/sB,GAC9B,IAAMwO,EAAUyF,aACdkU,6BAAkBnoB,EAAGqF,KAAM6mB,eAAYc,QACvCN,IAkBF,MAhB6B,CAC3BO,kBAAmBjtB,EAAGyE,KAAK,GAAGK,OAC9BooB,eAAgBltB,EAAGyE,KAAK,GAAGK,OAC3BqoB,QAASntB,EAAGyE,KAAK,GAAGK,OACpBsoB,QAASptB,EAAGyE,KAAK,GAAGK,OACpBgnB,SAAUtd,EAAQsd,SAClBuB,mBAAoBrtB,EAAGyE,KAAK,GAAGK,OAC/BwoB,eAAgBttB,EAAGyE,KAAK,GAAGK,OAC3ByoB,kBAAmBvtB,EAAGyE,KAAK,GAAGK,OAC9B+nB,eAAgBre,EAAQqe,eACxBC,QAASte,EAAQse,QACjBH,oBAAqBne,EAAQme,oBAC7BC,SAAUpe,EAAQoe,SAClB3sB,UAAWD,EAAGC,YAmBLutB,GAAgBznB,aAAK,CAChC+lB,SAAUna,eACV8b,gBAAiBzb,iBAGN0b,GAAgB,SAAC1tB,GAC5B,IAAMwO,EAAUyF,aACdkU,6BAAkBnoB,EAAGqF,KAAM6mB,eAAYyB,SACvCH,IAgBF,MAbyB,CACvBP,kBAAmBjtB,EAAGyE,KAAK,GAAGK,OAC9B7E,UAAWD,EAAGC,UACd2tB,0BAA2B5tB,EAAGyE,KAAK,GAAGK,OACtC+oB,sBAAuB7tB,EAAGyE,KAAK,GAAGK,OAClCgpB,qBAAsB9tB,EAAGyE,KAAK,GAAGK,OACjCqoB,QAASntB,EAAGyE,KAAK,GAAGK,OACpBsoB,QAASptB,EAAGyE,KAAK,GAAGK,OACpBuoB,mBAAoBrtB,EAAGyE,KAAK,GAAGK,OAC/BgnB,SAAUtd,EAAQsd,SAClB2B,gBAAiBjf,EAAQif,kBAkChBM,GAAehoB,aAAK,CAC/B+lB,SAAUna,eACVoX,KAAMrB,GACNsB,WAAYhX,eACZgc,yBAA0Bhc,eAC1BkX,UAAWvB,GACXwB,SAAUnX,eACVic,YAAajc,eACbkc,UAAWlc,eACXmc,WAAYxc,iBAGDyc,GAAoB,SAACpuB,GAA6C,IAAD,EACtEwO,EAAUyF,aACdkU,6BAAkBnoB,EAAGqF,KAAM6mB,eAAYmC,aACvCN,IAiCF,MA9BiC,CAC/B9tB,UAAWD,EAAGC,UACdstB,kBAAmBvtB,EAAGyE,KAAK,GAAGK,OAC9BujB,OAAQroB,EAAGyE,KAAK,GAAGK,OACnBwpB,kBAAmBtuB,EAAGyE,KAAK,GAAGK,OAC9BypB,cAAevuB,EAAGyE,KAAK,GAAGK,OAC1B0pB,kBAAmBxuB,EAAGyE,KAAK,GAAGK,OAC9B2pB,gBAAiBzuB,EAAGyE,KAAK,GAAGK,OAC5B4pB,gBAAiB1uB,EAAGyE,KAAK,GAAGK,OAC5B6pB,gBAAiB3uB,EAAGyE,KAAK,GAAGK,OAC5BsoB,QAASptB,EAAGyE,KAAK,GAAGK,OACpB8pB,aAAc5uB,EAAGyE,KAAK,GAAGK,OACzB+pB,WAAY7uB,EAAGyE,KAAK,IAAIK,OACxBmoB,kBAAmBjtB,EAAGyE,KAAK,IAAIK,OAC/BgqB,cAAe9uB,EAAGyE,KAAK,IAAIK,OAC3BiqB,cAAe/uB,EAAGyE,KAAK,IAAIK,OAC3BkqB,eAAc,UAAEhvB,EAAGyE,KAAK,WAAV,aAAE,EAAaK,OAG7BgnB,SAAUtd,EAAQsd,SAClB/C,KAAMva,EAAQua,KACdC,WAAYxa,EAAQwa,WACpBgF,yBAA0Bxf,EAAQwf,yBAClC9E,UAAW1a,EAAQ0a,UACnBC,SAAU3a,EAAQ2a,SAClB8E,YAAazf,EAAQyf,YACrBC,UAAW1f,EAAQ0f,UACnBC,WAAY3f,EAAQ2f,aAqBXlE,GAAoBlkB,aAAK,CACpC+lB,SAAUna,eACVoX,KAAMrB,GACNwC,QAASlY,iBAGEoY,GAAoB,SAACpqB,GAChC,IAAMwO,EAAUyF,aACdkU,6BAAkBnoB,EAAGqF,KAAM6mB,eAAY+C,aACvChF,IAkBF,MAfiC,CAC/BhqB,UAAWD,EAAGC,UACdstB,kBAAmBvtB,EAAGyE,KAAK,GAAGK,OAC9BujB,OAAQroB,EAAGyE,KAAK,GAAGK,OACnBypB,cAAevuB,EAAGyE,KAAK,GAAGK,OAC1B2pB,gBAAiBzuB,EAAGyE,KAAK,GAAGK,OAC5B4pB,gBAAiB1uB,EAAGyE,KAAK,GAAGK,OAC5B6pB,gBAAiB3uB,EAAGyE,KAAK,GAAGK,OAC5BsoB,QAASptB,EAAGyE,KAAK,GAAGK,OACpBgqB,cAAe9uB,EAAGyE,KAAK,GAAGK,OAE1BgnB,SAAUtd,EAAQsd,SAClB/C,KAAMva,EAAQua,KACdmB,QAAS1b,EAAQ0b,UAsBRgF,GAAoBnpB,aAAK,CACpC+lB,SAAUna,eACVwd,QAASnd,eACTkY,QAAS1X,aAASR,kBAGPyY,GAAoB,SAACzqB,GAA6C,IAAD,EACtEwO,EAAUyF,aACdkU,6BAAkBnoB,EAAGqF,KAAM6mB,eAAYkD,aACvCF,IAmBF,MAhBiC,CAC/BjvB,UAAWD,EAAGC,UACdooB,OAAQroB,EAAGyE,KAAK,GAAGK,OACnBypB,cAAevuB,EAAGyE,KAAK,GAAGK,OAC1BsoB,QAASptB,EAAGyE,KAAK,GAAGK,OACpBuqB,YAAarvB,EAAGyE,KAAK,GAAGK,OACxB8pB,aAAc5uB,EAAGyE,KAAK,GAAGK,OACzB+pB,WAAY7uB,EAAGyE,KAAK,GAAGK,OACvBwqB,iBAAkBtvB,EAAGyE,KAAK,GAAGK,OAC7ByqB,eAAgBvvB,EAAGyE,KAAK,GAAGK,OAC3B0qB,eAAgBxvB,EAAGyE,KAAK,GAAGK,OAC3BmoB,kBAAmBjtB,EAAGyE,KAAK,GAAGK,OAC9BgqB,cAAe9uB,EAAGyE,KAAK,IAAIK,OAC3BkqB,eAAc,UAAEhvB,EAAGyE,KAAK,WAAV,aAAE,EAAaK,OAC7BgnB,SAAUtd,EAAQsd,WAgBT2D,GAAe1pB,aAAK,CAC/B+lB,SAAUna,eACV8b,gBAAiBzb,iBAGN0d,GAAe,SAAC1vB,GAC3B,IAAMwO,EAAUyF,aACdkU,6BAAkBnoB,EAAGqF,KAAM6mB,eAAYyD,QACvCF,IAcF,MAXuB,CACrBxvB,UAAWD,EAAGC,UACdgtB,kBAAmBjtB,EAAGyE,KAAK,GAAGK,OAC9BqoB,QAASntB,EAAGyE,KAAK,GAAGK,OACpBsoB,QAASptB,EAAGyE,KAAK,GAAGK,OACpB8qB,wBAAyB5vB,EAAGyE,KAAK,GAAGK,OACpC+qB,mBAAoB7vB,EAAGyE,KAAK,GAAGK,OAC/BgnB,SAAUtd,EAAQsd,SAClB2B,gBAAiBjf,EAAQif,kBAkBhBqC,GAAoB/pB,aAAK,CACpC+lB,SAAUna,iBAGCoe,GAAoB,SAAC/vB,GAChC,IAAMwO,EAAUyF,aACdkU,6BAAkBnoB,EAAGqF,KAAM6mB,eAAY8D,aACvCF,IAeF,MAZiC,CAC/B7vB,UAAWD,EAAGC,UACdgtB,kBAAmBjtB,EAAGyE,KAAK,GAAGK,OAC9BooB,eAAgBltB,EAAGyE,KAAK,GAAGK,OAC3BsoB,QAASptB,EAAGyE,KAAK,GAAGK,OACpBqoB,QAASntB,EAAGyE,KAAK,GAAGK,OACpBmrB,2BAA4BjwB,EAAGyE,KAAK,GAAGK,OACvCorB,uBAAwBlwB,EAAGyE,KAAK,GAAGK,OACnCqrB,gBAAiBnwB,EAAGyE,KAAK,GAAGK,OAC5BgnB,SAAUtd,EAAQsd,WAMTsE,GAA0B,SACrC5rB,GAEA,OAAOA,EAAYvE,UAAU8E,OAAOsrB,2BAGzB3J,GAAgD,CAC3DC,EAAG,iBACHC,EAAG,aACHC,EAAG,UACHC,EAAG,eACHC,EAAG,eACHC,EAAG,eACHI,EAAG,SACHC,EAAG,gBAGQiJ,GAAkC,SAC7C9rB,GAEA,IAAM2iB,EAAO3iB,EAAYa,KAAK,GAE9B,KAAM8hB,KAAQT,IACZ,MAAM,IAAIhvB,MAAJ,qDAAwDyvB,IAEhE,OAAOT,GAAmBS,ICxZfhyB,GAAeH,IAAMC,mBAAiCC,GACtDE,GAAkBJ,IAAMC,mBACnCC,GAIK,SAASq7B,GAAT,GAAiE,IAAnCj7B,EAAkC,EAAlCA,SAC3BuC,EAAQF,cAARE,IAD6D,EAE3CoY,EAA0BpY,GAFiB,mBAE9DpD,EAF8D,KAEvDe,EAFuD,KAQrE,OAJAR,IAAMwB,WAAU,WACdhB,EAAS,CAAEuQ,KAAM2I,EAAWU,MAAOvX,UAClC,CAACrC,EAAUqC,IAGZ,cAAC,GAAab,SAAd,CAAuBC,MAAOxC,EAA9B,SACE,cAAC,GAAgBuC,SAAjB,CAA0BC,MAAOzB,EAAjC,SACGF,MAMF,SAASk7B,GACd7gB,GAEA,IAAM/X,EAAU5C,IAAMyC,WAAWtC,IAEjC,IAAKyC,EACH,MAAM,IAAIF,MAAJ,uEAKR,OAAOE,EAAQsV,QAAQyC,G,gDAGzB,WACEna,EACAma,EACAlc,EACAoE,GAJF,0BAAAX,EAAA,+EAQ2B,IAAIE,IAAWS,GAAK44B,eAAe9gB,GAR9D,OAQU+gB,EARV,OASI7S,EAAcpP,EAAYqC,QAEtBzL,EAAgB,CAAElN,IAAK,MACV,OAAbu4B,IAAoB,EACUA,EAASrK,YAAjC9pB,EADa,EACbA,QAAS6T,EADI,EACJA,WACjB/K,EAAO,CACLlN,IAAK,CACHoE,UACA6T,aACAiW,YAAa7oB,IAAYC,SAASlB,EAAS6T,MAKjD5a,EAAS,CACPuQ,KAAM2I,EAAWW,OACjB1a,OAAQkpB,EACRtd,IAAKoP,EACLtK,OACAxN,QA5BN,kDA+BQpE,IAAYF,IAAQO,QACtByD,aAAY,EAAD,GAAQ,CAAEM,QAhC3B,2D,sBAqCO,SAAS84B,KACd,IAAMn7B,EAAWR,IAAMyC,WAAWrC,IAClC,IAAKI,EACH,MAAM,IAAIkC,MAAJ,qEAH+B,MAQdC,cAAjBlE,EAR+B,EAQ/BA,QAASoE,EARsB,EAQtBA,IACjB,OAAO7C,IAAMsI,aACX,SAACqS,GACC9X,G,2CAAO+4B,CAAoBp7B,EAAUma,EAAWlc,EAASoE,KAE3D,CAACrC,EAAU/B,EAASoE,IC3ExB,IAAM1C,GAAeH,IAAMC,mBAAiCC,GACtDE,GAAkBJ,IAAMC,mBAAoCC,GAG3D,SAAS27B,GAAT,GAAwE,IAAxCv7B,EAAuC,EAAvCA,SAC7BuC,EAAQF,cAARE,IADoE,EAElDoY,EAAoCpY,GAFc,mBAErEpD,EAFqE,KAE9De,EAF8D,KAS5E,OAJAR,IAAMwB,WAAU,WACdhB,EAAS,CAAEuQ,KAAM2I,EAAWU,MAAOvX,UAClC,CAACrC,EAAUqC,IAGZ,cAAC,GAAab,SAAd,CAAuBC,MAAOxC,EAA9B,SACE,cAAC,GAAgBuC,SAAjB,CAA0BC,MAAOzB,EAAjC,SACE,cAAC+6B,GAAD,UACE,cAACpK,GAAD,UAAkB7wB,U,gDAOrB,WACLE,EACAma,EACAlc,EACAoE,GAJK,gCAAAX,EAAA,6DAML1B,EAAS,CACPuQ,KAAM2I,EAAWW,OACjB9O,IAAKoP,EACLhb,OAAQ8Z,EAAYkC,SACpB9Y,QAVG,SAgBGV,EAAa,IAAIC,IAAWS,GAhB/B,SAiBqBV,EAAW25B,mBAAmBnhB,EAAW,CAC/DohB,0BAA0B,IAlBzB,mBAiBK95B,EAjBL,EAiBKA,MAIJyc,EAAO,KACG,OAAVzc,EAtBD,wBAyBC+5B,EADiC,kBAAxB/5B,EAAM+5B,cACC/5B,EAAM+5B,cAEN,MAGdC,EAAY,KA9Bf,oBAgCmB95B,EAAW+5B,aAAaj6B,EAAMmf,MAhCjD,QAgCC6a,EAhCD,0DAkCKx9B,IAAYF,IAAQI,aAAiC,QAAlBq9B,GACrCz5B,aAAY,EAAD,GAAQ,CAAE6e,KAAK,GAAD,OAAKnf,EAAMmf,QAnCvC,QAsCGQ,EAAqC,OAAdqa,EAAqBA,EAAY,cAE5Dvd,EAAO,CACL0C,KAAMnf,EAAMmf,KACZQ,YACAoa,gBACAG,mBAAoBl6B,EAAMk6B,mBAC1B/2B,OAAQ,CAAE+B,IAAKlF,EAAMkF,MA7CtB,QAgDHkJ,EAAO,CAAEsK,YAAW+D,QACpBmK,EAAcpP,EAAYqC,QAjDvB,kDAmDCrd,IAAYF,IAAQO,QACtByD,aAAY,EAAD,GAAQ,CAAEM,QAEvBgmB,EAAcpP,EAAYsC,YAtDvB,QAyDLvb,EAAS,CACPuQ,KAAM2I,EAAWW,OACjB9O,IAAKoP,EACLhb,OAAQkpB,EACRxY,OACAxN,QA9DG,mE,sBA4EA,SAASu5B,GACdzhB,GAEA,IAAM/X,EAAU5C,IAAMyC,WAAWtC,IAEjC,IAAKyC,EACH,MAAM,IAAIF,MAAJ,mEAKR,QAAkBxC,IAAdya,EAIJ,OAAO/X,EAAQsV,QAAQyC,GAGlB,SAAS0hB,KACd,IAAM77B,EAAWR,IAAMyC,WAAWrC,IAClC,IAAKI,EACH,MAAM,IAAIkC,MAAJ,wEAHkC,MAQjBC,cAAjBlE,EARkC,EAQlCA,QAASoE,EARyB,EAQzBA,IACjB,OAAO7C,IAAMsI,aACX,SAACqS,IAxGE,SAAP,kCAyGM2hB,CAAuB97B,EAAUma,EAAWlc,EAASoE,KAEvD,CAACrC,EAAU/B,EAASoE,IC3JxB,SAAS05B,GAAT,GAUI,IATF98B,EASC,EATDA,MACA+8B,EAQC,EARDA,OACAC,EAOC,EAPDA,MACA5yB,EAMC,EANDA,KAOA,MAAc,SAAVpK,EAAyB,KAE3B,sBACEiF,UAAS,6BAAwB83B,EAAS,SAAW,OAA5C,OACPC,EAAQ,SAAW,GADZ,SADX,UAKE,qBAAK/3B,UAAS,eAAU+3B,EAAQ,SAAW,MAC3C,qBAAK/3B,UAAU,eAAf,SAA+BmF,OAK9B,SAAS6yB,GAAT,GAAgE,IAAzCF,EAAwC,EAAxCA,OAAQC,EAAgC,EAAhCA,MAAO5yB,EAAyB,EAAzBA,KAAMvJ,EAAmB,EAAnBA,SAAmB,EAC1CG,mBAAgB,QAD0B,mBAC7DhB,EAD6D,KACtD2pB,EADsD,KAG9DuT,EAAUF,EAAQ,MAAQ,QAChC,OACE,sBACE/3B,UAAU,0BACVk4B,YAAa,kBAAMxT,EAAS,SAC5ByT,WAAY,kBAAMzT,EAAS,SAH7B,UAKE,sBAAK1kB,UAAS,oDAA+Ci4B,GAA7D,UACGr8B,EACD,sBAAMoE,UAAU,8BAElB,cAAC63B,GAAD,CAASC,OAAQA,EAAQC,MAAOA,EAAOh9B,MAAOA,EAAOoK,KAAMA,OC7C1D,SAASizB,GAAT,GAMH,IACEC,EANJC,EAKC,EALDA,MAKC,IAJDC,aAIC,SAOD,OAJIA,IACFF,EAAO,cAAC,IAAD,CAAYt5B,SAAUu5B,EAAME,cAGjCF,EAAMG,GAAG,GAET,uBAAMz4B,UAAU,2BAAhB,cACIu4B,EAAQF,EAAOC,EAAMn7B,cAGlBm7B,EAAMI,GAAG,GAEhB,sBAAM14B,UAAU,2BAAhB,SACGu4B,EAAQ,yCAAIF,KAAWC,EAAMn7B,aAK7B,sBAAM6C,UAAU,6BAAhB,eCTF,SAAS24B,GAAT,GAA2D,IAAD,gBACzDlkB,EAAUqY,GAD+C,EAA7B7W,WAE1BzL,EAAkBmH,IAAlBnH,cAER,IAAKiK,EACH,OAAO,KAGT,IAAMmkB,EAAgB,UAAGnkB,EAAQ9I,YAAX,iBAAG,EAAcghB,mBAAjB,iBAAG,EAA2Bja,YAA9B,aAAG,EAAiCkmB,iBACpDC,EAAiB,UAAGpkB,EAAQ9I,YAAX,iBAAG,EAAcghB,mBAAjB,iBAAG,EAA2Bja,YAA9B,aAAG,EAAiCmmB,kBAErDryB,EAAW,UACfiO,EAAQ9I,YADO,iBACf,EAAcghB,mBADC,aACf,EAA2BA,YAAY9pB,QAAQ2D,YAEjD,IAAKoyB,IAAqBC,IAAsBryB,EAC9C,OAAO,KAGT,IAAMsyB,EAsDD,SACLF,EACAC,EACA7tB,GAEA,IAAI+tB,EAAmD,GAEvDH,EAAiB7zB,SACf,SAAColB,GAAD,OAAc4O,EAAc5O,EAAQ6O,cAAgB7O,KAGtD,IAAI2O,EAA0B,GAgE9B,OA9DAD,EAAkB9zB,SAAQ,YAA4C,IAAzCk0B,EAAwC,EAAxCA,cAAeD,EAAyB,EAAzBA,aAActgB,EAAW,EAAXA,KAClDwgB,EAAaH,EAAcC,GAC3B/tB,EAAUD,EAASguB,GAAc5tB,OAEvC,GAAK6tB,EAAc1gB,eAAnB,CAMA,GAAI2gB,GAAcA,EAAWxgB,OAASA,EAAM,CAC1C,IAAKwgB,EAAWD,cAAc1gB,eAE5B,OAsBF,OAnBAugB,EAAK77B,KAAK,CACRgO,QAASD,EAASguB,GAAc5tB,OAChC4tB,eACA7O,QAAS,CACPzrB,SAAUw6B,EAAWD,cAAcv6B,SACnC8Z,OAAQ,IACR2gB,SAAU,GAEZb,MAAO,IAAIlO,cAAW8O,EAAWD,cAAc1gB,gBAC/CG,KAAMwgB,EAAWxgB,YAGnBogB,EAAK77B,KAAK,CACRgO,QAASD,EAASguB,GAAc5tB,OAChC4tB,eACA7O,QAAS8O,EACTX,MAAO,IAAIlO,aAAU6O,EAAc1gB,gBACnCG,KAAMA,IAKV,IAAI4f,EAEJ,GAAIY,EAAY,CACd,IAAKA,EAAWD,cAAc1gB,eAE5B,OAGF+f,EAAQ,IAAIlO,aAAU6O,EAAc1gB,gBAAgB6gB,MAClDF,EAAWD,cAAc1gB,qBAG3B+f,EAAQ,IAAIlO,aAAU6O,EAAc1gB,gBAGtCugB,EAAK77B,KAAK,CACRgO,UACAyN,OACAyR,QAAS8O,EACTX,QACAU,qBAIGF,EAAKO,MAAK,SAAC77B,EAAG87B,GAAJ,OAAU97B,EAAEw7B,aAAeM,EAAEN,gBAjIjCO,CACXX,EACAC,EACAryB,GAGF,GAAIsyB,EAAK17B,OAAS,EAChB,OAAO,KAGT,IAAMo8B,EAAcV,EAAKzyB,KAAI,YAAwC,IAAD,EAApC4E,EAAoC,EAApCA,QAASqtB,EAA2B,EAA3BA,MAAOnO,EAAoB,EAApBA,QAASzR,EAAW,EAAXA,KACjD7R,EAAMoE,EAAQvE,WAAagS,EAC3B7W,GAAQ,UAAA2I,EAAcpO,IAAIsc,UAAlB,eAAyBhO,SAAU,SAEjD,OACE,+BACE,6BACE,cAAC2a,GAAD,CAASja,OAAQH,EAASsa,MAAI,MAEhC,6BACE,cAACF,GAAD,CAASja,OAAQ,IAAI4M,IAAUU,GAAO6M,MAAI,MAE5C,6BACE,cAAC6S,GAAD,CAAcE,MAAOA,MAEvB,+BACGnO,EAAQ5R,eADX,IAC4B1W,OAXrBgF,MAiBb,OACE,sBAAK7G,UAAU,OAAf,UACE,qBAAKA,UAAU,cAAf,SACE,oBAAIA,UAAU,oBAAd,8BAEF,qBAAKA,UAAU,wBAAf,SACE,wBAAOA,UAAU,yCAAjB,UACE,gCACE,+BACE,oBAAIA,UAAU,aAAd,qBACA,oBAAIA,UAAU,aAAd,mBACA,oBAAIA,UAAU,aAAd,oBACA,oBAAIA,UAAU,aAAd,+BAGJ,uBAAOA,UAAU,OAAjB,SAAyBw5B,YCnF5B,SAASC,GAAT,GAA6D,IAAvCnzB,EAAsC,EAAtCA,GACrBqF,EAAOrF,EAAGqF,KAAKxO,SAAS,OAC9B,OACE,qCACGmJ,EAAGyE,KAAK1E,KAAI,WAAmCqzB,GAAnC,IAAGtuB,EAAH,EAAGA,OAAQE,EAAX,EAAWA,SAAUE,EAArB,EAAqBA,WAArB,OACX,+BACE,+BACE,sBAAKxL,UAAU,mBAAf,sBAA4C05B,EAAW,MACrDluB,GACA,sBAAMxL,UAAU,6BAAhB,sBAEDsL,GACC,sBAAMtL,UAAU,6BAAhB,uBAGJ,oBAAIA,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQA,EAAQka,YAAU,EAACC,MAAI,QAXnCmU,MAgBX,+BACE,mDACmB,sBAAM15B,UAAU,aAAhB,sBAEnB,oBAAIA,UAAU,gBAAd,SACE,qBAAKA,UAAU,0CAAf,SAA0D2L,YC3B7D,SAASguB,GAAT,GAMH,IALFrzB,EAKC,EALDA,GACA1K,EAIC,EAJDA,SAKA,OACE,qCACGA,EAED,+BACE,mDACmB,sBAAMoE,UAAU,aAAhB,uBAEnB,oBAAIA,UAAU,gBAAd,SACE,qBAAKA,UAAU,qCAAf,SACG0E,KAAKC,UAAU2B,EAAGuQ,OAAQ,KAAM,aCMtC,SAAS+iB,GAAT,GASe,IAOwB,IAf5C3U,EAQmB,EARnBA,MACArpB,EAOmB,EAPnBA,SACA8E,EAMmB,EANnBA,OACAmE,EAKmB,EALnBA,MACAyB,EAImB,EAJnBA,GACAuzB,EAGmB,EAHnBA,WACAC,EAEmB,EAFnBA,WACAC,EACmB,EADnBA,WACmB,EAiFrB,SAAkBr5B,EAAyBmE,GACzC,GAAInE,EAAO+B,IAAK,CACd,IACMmC,EADMlE,EAAO+B,IACA,iBACnB,GAAImC,GAAWZ,MAAMg2B,QAAQp1B,GAAU,CAAC,IAAD,cACTA,EADS,GAC9Bq1B,EAD8B,KAClBr3B,EADkB,KAErC,GAAIiS,OAAOqlB,UAAUD,IAAeA,IAAep1B,EACjD,MAAO,CAAC,UAAD,iBAAsBH,KAAKC,UAAU/B,KAGhD,MAAO,CAAC,QAEV,MAAO,CAAC,WA5Fcu3B,CAASz5B,EAAQmE,GAAhCu1B,EADY,sBAEW9+B,IAAMS,SAAS89B,IAAc,GAFxC,mBAEZQ,EAFY,KAEHC,EAFG,KAGbrkB,EAAYlY,qBAAWw8B,IACvBC,EAAa1D,GAAyB7gB,GAExCxX,OAA0CjD,EAC1Cg/B,QAA6Bh/B,IAAfu+B,IAChBt7B,EAAG,OAAG+7B,QAAH,IAAGA,GAAH,UAAGA,EAAY7uB,YAAf,iBAAG,EAAkBlN,WAArB,aAAG,EAAuBkuB,YAAYvmB,aAAavB,IAGxD,IAAM41B,EAAWxD,KAWjB,OACE,sBAAKj3B,UAAU,OAAf,UACE,sBAAKA,UAAU,cAAf,UACE,qBAAIA,UAAU,mDAAd,UACE,uBAAMA,UAAS,2BAAsBo6B,EAAtB,SAAf,cACIv1B,EAAQ,OACMrJ,IAAfu+B,EAAA,WAA+BA,EAAa,GAAM,MAEpD9U,KAGH,yBACEyV,SAAUb,EACV75B,UAAS,4BACPq6B,EAAU,mBAAqB,aAEjCl0B,QAxBgB,WAKtB,OAJK0zB,GAAeQ,GAAY57B,GAHJg8B,EAASxkB,GAO9BqkB,GAAW,SAACK,GAAD,OAAQA,MActB,UAOE,sBAAM36B,UAAU,oBAPlB,YAWF,qBAAKA,UAAU,wBAAf,SACE,uBAAOA,UAAU,yCAAjB,SACE,wBAAOA,UAAU,OAAjB,UACGq6B,EACC,qCACE,+BACE,yCACA,oBAAIr6B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ9E,EAAGC,UAAW+e,YAAU,EAACC,MAAI,SAGjD,WAAYjf,EACX,cAACqzB,GAAD,CAAkBrzB,GAAIA,EAAtB,SACG7H,EAAM,cAACg7B,GAAD,CAAYnzB,GAAI7H,IAAU,OAGnC,cAACg7B,GAAD,CAAYnzB,GAAIA,OAIpB1K,EAEDk+B,GAAcA,EAAW18B,OAAS,GACjC,6BACE,qBAAIw9B,QAAS,EAAb,+BAEE,qBAAK56B,UAAU,cAAf,SAA8B85B,mBCnGzC,IAAMe,GAAYxuB,aAAK,CAC5BpB,QAAS4M,GACTijB,MAAO7iB,eACP8iB,OAAQziB,iBAIG0iB,GAAe3uB,aAAK,CAC/BpB,QAAS4M,KAI6BM,aAAM,CAAC,QAAS,aCVjD,SAAS8iB,GAAT,GAYH,IAXF30B,EAWC,EAXDA,GACAzB,EAUC,EAVDA,MACAnE,EASC,EATDA,OACAo5B,EAQC,EARDA,WACAC,EAOC,EAPDA,WAQA,OACE,cAACH,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,UACN6U,WAAYA,EACZC,WAAYA,EACZF,YAAU,ICJT,SAASqB,GAAqBtQ,GACnC,IACE,IAAM/T,EAAS0D,aAAOqQ,EAAMtkB,GAAGuQ,OAAQ8D,IAEvC,OAAQ9D,EAAOxK,MACb,IAAK,QACH,IAAM2N,EAAOO,aAAO1D,EAAOmD,KAAM6gB,IACjC,OAAO,cAACM,GAAD,aAA2BnhB,KAAMA,GAAU4Q,IAEpD,IAAK,WACH,IAAM5Q,EAAOO,aAAO1D,EAAOmD,KAAMghB,IACjC,OAAO,cAACI,GAAD,aAA8BphB,KAAMA,GAAU4Q,IAEvD,QACE,OAAO,cAACqQ,GAAD,eAAwBrQ,KAEnC,MAAOhoB,GAIP,OAHA/E,aAAY+E,EAAO,CACjBqT,UAAW2U,EAAM/mB,GAAG6S,WAAW,KAE1B,cAACukB,GAAD,eAAwBrQ,KAa5B,SAASuQ,GAA0BvQ,GAA0B,IAC1DtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WACvCe,EAAQt6B,YAAKwZ,EAAK8gB,MAAO,IAC/B,OACE,eAAClB,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,sBACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,yCACA,oBAAI/5B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQrB,IAAuBub,YAAU,EAACC,MAAI,SAI3D,+BACE,yCACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK/O,QAASqa,YAAU,EAACC,MAAI,SAIlD,+BACE,wCACQ,sBAAMvlB,UAAU,aAAhB,0BAER,oBAAIA,UAAU,gBAAd,SACE,qBAAKA,UAAU,gCAAf,SAAgD86B,SAIpD,+BACE,wCACA,oBAAI96B,UAAU,gBAAd,SAA+Bga,EAAK+gB,eAMrC,SAASK,GAA6BxQ,GAA6B,IAChEtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAE7C,OACE,eAACH,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,yBACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,yCACA,oBAAI/5B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQrB,IAAuBub,YAAU,EAACC,MAAI,SAI3D,+BACE,yCACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK/O,QAASqa,YAAU,EAACC,MAAI,YCrHjD,SAAS8V,GAAT,GAYH,IAXF/0B,EAWC,EAXDA,GACAzB,EAUC,EAVDA,MACAnE,EASC,EATDA,OACAo5B,EAQC,EARDA,WACAC,EAOC,EAPDA,WAQMpuB,EAAOnL,YAAK8F,EAAGuQ,OAAQ,IAC7B,OACE,eAAC+iB,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,OACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,yCACA,oBAAI/5B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ9E,EAAGC,UAAW+e,YAAU,EAACC,MAAI,SAIlD,+BACE,8CACA,oBAAIvlB,UAAU,gBAAd,SACE,qBAAKA,UAAU,gCAAf,SAAgD2L,YCjCnD,SAAS2vB,GAAoB1Q,GAOhC,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAE7C,OACE,eAACH,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,mBACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,yCACA,oBAAI/5B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKzT,UAAW+e,YAAU,EAACC,MAAI,SAIpD,+BACE,wCACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK2U,OAAQrJ,YAAU,EAACC,MAAI,SAIjD,+BACE,6CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK6V,WAAYvK,YAAU,EAACC,MAAI,SAIrD,+BACE,+CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK4U,aAActJ,YAAU,EAACC,MAAI,SAIvD,+BACE,uCACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK8V,MAAOxK,YAAU,EAACC,MAAI,SAIhD,+BACE,uCACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKrB,MAAO2M,YAAU,EAACC,MAAI,SAIhD,+BACE,4CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKgV,UAAW1J,YAAU,EAACC,MAAI,SAIpD,+BACE,6CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKiV,WAAY3J,YAAU,EAACC,MAAI,SAIrD,+BACE,sCACA,oBAAIvlB,UAAU,gBAAd,SAA+Bga,EAAKqV,UAGtC,+BACE,4CACA,oBAAIrvB,UAAU,gBAAd,SAA+Bga,EAAKwV,eAGtC,+BACE,6CACA,oBAAIxvB,UAAU,gBAAd,SAA+Bga,EAAKsV,WAAWnyB,SAAS,SAG1D,+BACE,8CACA,oBAAI6C,UAAU,gBAAd,SAA+Bga,EAAKuV,YAAYpyB,SAAS,SAG3D,+BACE,2CACA,oBAAI6C,UAAU,gBAAd,SAA+Bga,EAAKyV,SAAStyB,SAAS,YCjGvD,SAASo+B,GAAuB3Q,GAOnC,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAE7C,OACE,eAACH,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,sBACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,yCACA,oBAAI/5B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKzT,UAAW+e,YAAU,EAACC,MAAI,SAIpD,+BACE,wCACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK2U,OAAQrJ,YAAU,EAACC,MAAI,SAIjD,+BACE,+CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK4U,aAActJ,YAAU,EAACC,MAAI,SAIvD,+BACE,6CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK6U,WAAYvJ,YAAU,EAACC,MAAI,SAIrD,+BACE,sCACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK8U,KAAMxJ,YAAU,EAACC,MAAI,SAI/C,+BACE,sCACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK+U,KAAMzJ,YAAU,EAACC,MAAI,SAI/C,+BACE,4CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKgV,UAAW1J,YAAU,EAACC,MAAI,SAIpD,+BACE,6CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKiV,WAAY3J,YAAU,EAACC,MAAI,SAIrD,+BACE,uCACA,oBAAIvlB,UAAU,gBAAd,SAA+Bga,EAAK7C,cC7ErC,SAASqkB,GAA4B5Q,GAOxC,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAE7C,OACE,eAACH,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,2BACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,yCACA,oBAAI/5B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKzT,UAAW+e,YAAU,EAACC,MAAI,SAIpD,+BACE,wCACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK2U,OAAQrJ,YAAU,EAACC,MAAI,SAIjD,+BACE,+CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK4U,aAActJ,YAAU,EAACC,MAAI,SAIvD,+BACE,6CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK6U,WAAYvJ,YAAU,EAACC,MAAI,SAIrD,+BACE,sCACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK8U,KAAMxJ,YAAU,EAACC,MAAI,SAI/C,+BACE,sCACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK+U,KAAMzJ,YAAU,EAACC,MAAI,SAI/C,+BACE,4CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKgV,UAAW1J,YAAU,EAACC,MAAI,SAIpD,+BACE,6CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKiV,WAAY3J,YAAU,EAACC,MAAI,SAIrD,+BACE,2CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKkV,SAAU5J,YAAU,EAACC,MAAI,SAInD,+BACE,4CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKmV,UAAW7J,YAAU,EAACC,MAAI,SAIpD,+BACE,+CACA,oBAAIvlB,UAAU,gBAAd,SAA+Bga,EAAKmU,YAAYhxB,SAAS,SAG3D,+BACE,gDACA,oBAAI6C,UAAU,gBAAd,SAA+Bga,EAAKoU,aAAajxB,SAAS,SAG5D,+BACE,8CACA,oBAAI6C,UAAU,gBAAd,SAA+Bga,EAAKqU,gBAGtC,+BACE,sDACA,oBAAIruB,UAAU,gBAAd,SACGga,EAAKsU,mBAAmBnxB,SAAS,SAItC,+BACE,oDACA,oBAAI6C,UAAU,gBAAd,SAA+Bga,EAAKuU,iBAAiBpxB,SAAS,YCjH/D,SAASs+B,GAAyB7Q,GAOrC,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAE7C,OACE,eAACH,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,wBACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,yCACA,oBAAI/5B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKzT,UAAW+e,YAAU,EAACC,MAAI,SAIpD,+BACE,wCACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK2U,OAAQrJ,YAAU,EAACC,MAAI,SAIjD,+BACE,6CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK6U,WAAYvJ,YAAU,EAACC,MAAI,SAIrD,+BACE,sDACA,oBAAIvlB,UAAU,gBAAd,SACGga,EAAKqW,mBAAmBhqB,KAAI,SAAC4E,EAASpG,GACrC,OAAO,cAACwgB,GAAD,CAASja,OAAQH,EAAqBqa,YAAU,EAACC,MAAI,GAAtB1gB,WAK5C,+BACE,uCACA,oBAAI7E,UAAU,gBAAd,SAA+Bga,EAAK7C,cCnDrC,SAASukB,GAAuB9Q,GAOnC,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAE7C,OACE,eAACH,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,sBACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,yCACA,oBAAI/5B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKzT,UAAW+e,YAAU,EAACC,MAAI,SAIpD,+BACE,wCACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK2U,OAAQrJ,YAAU,EAACC,MAAI,SAIjD,+BACE,6CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK6V,WAAYvK,YAAU,EAACC,MAAI,SAIrD,+BACE,+CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK4U,aAActJ,YAAU,EAACC,MAAI,SAIvD,+BACE,uCACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKrB,MAAO2M,YAAU,EAACC,MAAI,SAIhD,+BACE,sCACA,oBAAIvlB,UAAU,gBAAd,SAA+Bga,EAAKqV,UAGtC,+BACE,kDACA,oBAAIrvB,UAAU,gBAAd,SAA+Bga,EAAKyW,oBAGtC,+BACE,0CACA,oBAAIzwB,UAAU,gBAAd,SAA+Bga,EAAKwW,QAAQrzB,SAAS,YClEtD,SAASw+B,GAAiC/Q,GAO7C,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAE7C,OACE,eAACH,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,mCACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,wCACA,oBAAI/5B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK2U,OAAQrJ,YAAU,EAACC,MAAI,SAIjD,+BACE,6CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK6V,WAAYvK,YAAU,EAACC,MAAI,SAIrD,+BACE,+CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK4U,aAActJ,YAAU,EAACC,MAAI,SAIvD,+BACE,uCACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKrB,MAAO2M,YAAU,EAACC,MAAI,SAIhD,+BACE,2CACA,oBAAIvlB,UAAU,gBAAd,SAA+Bga,EAAKyV,SAAStyB,SAAS,YCjDvD,SAASy+B,GAAuBhR,GAOnC,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAE7C,OACE,eAACH,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,sBACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,yCACA,oBAAI/5B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKzT,UAAW+e,YAAU,EAACC,MAAI,SAIpD,+BACE,wCACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK2U,OAAQrJ,YAAU,EAACC,MAAI,SAIjD,+BACE,6CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK6V,WAAYvK,YAAU,EAACC,MAAI,SAIrD,+BACE,uCACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKrB,MAAO2M,YAAU,EAACC,MAAI,SAIhD,+BACE,4CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKgV,UAAW1J,YAAU,EAACC,MAAI,SAIpD,+BACE,6CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKiV,WAAY3J,YAAU,EAACC,MAAI,SAIrD,+BACE,6CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKiX,WAAY3L,YAAU,EAACC,MAAI,SAIrD,+BACE,8CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKkX,YAAa5L,YAAU,EAACC,MAAI,SAItD,+BACE,8CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKmX,YAAa7L,YAAU,EAACC,MAAI,SAIrDvL,EAAKoX,qBACJ,+BACE,uDACA,oBAAIpxB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKoX,oBAAqB9L,YAAU,EAACC,MAAI,YClE/D,SAASsW,GAAiBjR,GAO7B,IAKE3F,EAJI3e,EAAyDskB,EAAzDtkB,GAAIzB,EAAqD+lB,EAArD/lB,MAAOnE,EAA8CkqB,EAA9ClqB,OAAQuV,EAAsC2U,EAAtC3U,UAAW6jB,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAE1C57B,EAAQF,cAARE,IAGR,IAIE,GAHA8mB,EAAQgN,GAA2B3rB,GACtByrB,GAA0BzrB,IrB3BV,EqB8B3B,OrBwQC,SACLwE,GAEA,IAAMgK,EAAU2Z,6BAAkB3jB,EAAYa,MACxCZ,EAAOwI,OAAOxI,KAAK+J,GAEzB,GAAI/J,EAAK3N,OAAS,EAChB,MAAM,IAAIY,MAAM,qCAGlB,OAAO+M,EAAK,GqBlRA+wB,CAAyBx1B,IAC/B,IAAK,mBACH,OACE,cAACk1B,GAAD,aACExhB,KAAMwU,GAAuBloB,IACzBskB,IAGV,IAAK,WACH,OAAO,cAAC0Q,GAAD,aAAqBthB,KAAM2V,GAAerpB,IAASskB,IAC5D,IAAK,cACH,OACE,cAAC2Q,GAAD,aAAwBvhB,KAAMgW,GAAkB1pB,IAASskB,IAE7D,IAAK,gBACH,OACE,cAAC6Q,GAAD,aACEzhB,KAAMmW,GAAoB7pB,IACtBskB,IAGV,IAAK,cACH,OACE,cAAC8Q,GAAD,aAAwB1hB,KAAM0W,GAAkBpqB,IAASskB,IAE7D,IAAK,wBACH,OACE,cAAC+Q,GAAD,aACE3hB,KAAM6W,GAA4BvqB,IAC9BskB,IAGV,IAAK,cACH,OACE,cAACgR,GAAD,aAAwB5hB,KAAM+W,GAAkBzqB,IAASskB,KAIjE,MAAOhoB,GACP/E,aAAY+E,EAAO,CACjBzE,IAAKA,EACL8X,UAAWA,IAIf,OACE,cAAC2jB,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAK,iBAAYA,GAAS,WAC1B6U,WAAYA,EACZC,WAAYA,EACZF,YAAU,ICrFT,SAASkC,GAAsBnR,GAOlC,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAE7C,OACE,eAACH,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,mBACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,yCACA,oBAAI/5B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ7B,IAAahD,UAAW+e,YAAU,EAACC,MAAI,SAI5D,+BACE,+CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK+L,aAAcT,YAAU,EAACC,MAAI,SAIvD,+BACE,yDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKgB,WAAWC,OAAQqK,YAAU,EAACC,MAAI,SAI5D,+BACE,4DACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKgB,WAAWE,WAAYoK,YAAU,EAACC,MAAI,SAI/DvL,EAAKmB,OAAOC,MAAQ,GACnB,+BACE,qDACA,oBAAIpb,UAAU,gBAAd,SAA+Bga,EAAKmB,OAAOC,WAI9CpB,EAAKmB,OAAOlN,cAAgB,GAC3B,+BACE,yDACA,oBAAIjO,UAAU,+BAAd,SACGgP,EAAgD,IAA5BgL,EAAKmB,OAAOlN,qBAKrC+L,EAAKmB,OAAOE,UAAUhQ,OAAO7B,IAAcjD,YAC3C,+BACE,0DACA,oBAAIvG,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKmB,OAAOE,UAAWiK,YAAU,EAACC,MAAI,YCrE5D,SAASyW,GAAoBpR,GAOhC,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAE7C,OACE,eAACH,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,iBACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,yCACA,oBAAI/5B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ7B,IAAahD,UAAW+e,YAAU,EAACC,MAAI,SAI5D,+BACE,+CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK+L,aAAcT,YAAU,EAACC,MAAI,SAIvD,+BACE,wDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKiiB,YAAa3W,YAAU,EAACC,MAAI,SAItD,+BACE,mDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKkiB,eAAgB5W,YAAU,EAACC,MAAI,YC3CxD,SAAS4W,GAAqBvR,GAOjC,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAE7C,OACE,eAACH,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,kBACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,yCACA,oBAAI/5B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ7B,IAAahD,UAAW+e,YAAU,EAACC,MAAI,SAI5D,+BACE,+CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK+L,aAAcT,YAAU,EAACC,MAAI,SAIvD,+BACE,uDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK0D,UAAW4H,YAAU,EAACC,MAAI,SAIpD,+BACE,uDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKoiB,aAAc9W,YAAU,EAACC,MAAI,SAIvD,+BACE,gDACA,oBAAIvlB,UAAU,gBAAd,SAA+Bga,EAAKqiB,sBChDrC,SAASC,GAAiB1R,GAO7B,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAE7C,OACE,eAACH,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,cACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,yCACA,oBAAI/5B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ7B,IAAahD,UAAW+e,YAAU,EAACC,MAAI,SAI5D,+BACE,+CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK+L,aAAcT,YAAU,EAACC,MAAI,SAIvD,+BACE,mDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKkiB,eAAgB5W,YAAU,EAACC,MAAI,SAIzD,+BACE,mDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKuiB,gBAAiBjX,YAAU,EAACC,MAAI,SAI1D,+BACE,oDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAAC,IAAD,CAAYjB,SAAUib,EAAKjb,mBClD9B,SAASy9B,GAAoB5R,GAOhC,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAE7C,OACE,eAACH,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,iBACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,yCACA,oBAAI/5B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ7B,IAAahD,UAAW+e,YAAU,EAACC,MAAI,SAI5D,+BACE,+CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK+L,aAAcT,YAAU,EAACC,MAAI,SAIvD,+BACE,mDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKyiB,kBAAmBnX,YAAU,EAACC,MAAI,SAI5D,+BACE,4CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK0iB,YAAapX,YAAU,EAACC,MAAI,SAItD,+BACE,uDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAAC,IAAD,CAAYjB,SAAUib,EAAKjb,mBCnD9B,SAAS49B,GAAsB/R,GAOlC,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAE7C,OACE,eAACH,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,mBACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,yCACA,oBAAI/5B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ7B,IAAahD,UAAW+e,YAAU,EAACC,MAAI,SAI5D,+BACE,+CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK+L,aAAcT,YAAU,EAACC,MAAI,SAIvD,+BACE,mDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKkiB,eAAgB5W,YAAU,EAACC,MAAI,YCxCxD,IAAMqX,GAAiBvwB,aAAK,CACjC0Z,aAAclO,GACdmD,WAAY3O,aAAK,CACf4O,OAAQpD,GACRqD,WAAYrD,KAEdsD,OAAQ9O,aAAK,CACX4B,cAAeqK,eACf8C,MAAO9C,eACP+C,UAAWxD,OAKFglB,GAAexwB,aAAK,CAC/B0Z,aAAclO,GACdokB,YAAapkB,GACbqkB,eAAgBrkB,KAILilB,GAAgBzwB,aAAK,CAChCgwB,cAAepkB,eACf8N,aAAclO,GACd6F,UAAW7F,GACXukB,aAAcvkB,KAIHklB,GAAY1wB,aAAK,CAC5B0Z,aAAclO,GACdqkB,eAAgBrkB,GAChB0kB,gBAAiB1kB,GACjB9Y,SAAUuZ,iBAIC0kB,GAAe3wB,aAAK,CAC/B0Z,aAAclO,GACd4kB,kBAAmB5kB,GACnB6kB,YAAa7kB,GACb9Y,SAAUuZ,iBAIC2kB,GAAiB5wB,aAAK,CACjC0Z,aAAclO,GACdqkB,eAAgBrkB,KAILqlB,GAAY7wB,aAAK,CAC5B8wB,OAAQtlB,GACR6kB,YAAa7kB,GACbqkB,eAAgBrkB,GAChBulB,mBAAoBvlB,GACpBwlB,YAAaxlB,KAIqBM,aAAM,CACxC,aACA,WACA,YACA,QACA,WACA,aACA,UC/DK,SAASmlB,GAAiB1S,GAO7B,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAE7C,OACE,eAACH,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,cACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,yCACA,oBAAI/5B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ7B,IAAahD,UAAW+e,YAAU,EAACC,MAAI,SAI5D,+BACE,8CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKmjB,OAAQ7X,YAAU,EAACC,MAAI,SAIjD,+BACE,mDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK0iB,YAAapX,YAAU,EAACC,MAAI,SAItD,+BACE,mDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKkiB,eAAgB5W,YAAU,EAACC,MAAI,SAIzD,+BACE,8CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKqjB,YAAa/X,YAAU,EAACC,MAAI,SAItD,+BACE,sDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKojB,mBAAoB9X,YAAU,EAACC,MAAI,YC9B5D,SAASgY,GAAiB3S,GAC/B,IACE,IAAM/T,EAAS0D,aAAOqQ,EAAMtkB,GAAGuQ,OAAQ8D,IAEvC,OAAQ9D,EAAOxK,MACb,IAAK,aACH,IAAM2N,EAAOO,aAAO1D,EAAOmD,KAAM4iB,IACjC,OAAO,cAACb,GAAD,aAAuB/hB,KAAMA,GAAU4Q,IAEhD,IAAK,WACH,IAAM5Q,EAAOO,aAAO1D,EAAOmD,KAAM6iB,IACjC,OAAO,cAACb,GAAD,aAAqBhiB,KAAMA,GAAU4Q,IAE9C,IAAK,YACH,IAAM5Q,EAAOO,aAAO1D,EAAOmD,KAAM8iB,IACjC,OAAO,cAACX,GAAD,aAAsBniB,KAAMA,GAAU4Q,IAE/C,IAAK,QACH,IAAM5Q,EAAOO,aAAO1D,EAAOmD,KAAM+iB,IACjC,OAAO,cAACT,GAAD,aAAkBtiB,KAAMA,GAAU4Q,IAE3C,IAAK,WACH,IAAM5Q,EAAOO,aAAO1D,EAAOmD,KAAMgjB,IACjC,OAAO,cAACR,GAAD,aAAqBxiB,KAAMA,GAAU4Q,IAE9C,IAAK,aACH,IAAM5Q,EAAOO,aAAO1D,EAAOmD,KAAMijB,IACjC,OAAO,cAACN,GAAD,aAAuB3iB,KAAMA,GAAU4Q,IAEhD,IAAK,QACH,IAAM5Q,EAAOO,aAAO1D,EAAOmD,KAAMkjB,IACjC,OAAO,cAACI,GAAD,aAAkBtjB,KAAMA,GAAU4Q,IAE3C,QACE,OAAO,cAACqQ,GAAD,eAAwBrQ,KAEnC,MAAOhoB,GAIP,OAHA/E,aAAY+E,EAAO,CACjBqT,UAAW2U,EAAM/mB,GAAG6S,WAAW,KAE1B,cAACukB,GAAD,eAAwBrQ,KClE5B,SAAS4S,GAAoB5S,GAOhC,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAE7C,OACE,eAACH,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,WACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,yCACA,oBAAI/5B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ5B,IAAcjD,UAAW+e,YAAU,EAACC,MAAI,SAI7D,+BACE,8CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKmjB,OAAQ7X,YAAU,EAACC,MAAI,SAIjD,+BACE,4CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK0iB,YAAapX,YAAU,EAACC,MAAI,SAItD,+BACE,uDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAAC,IAAD,CAAYjB,SAAUib,EAAKjb,mBC5C9B,SAAS0+B,GAAoB7S,GAOhC,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAE7C,OACE,eAACH,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,mBACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,yCACA,oBAAI/5B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ5B,IAAcjD,UAAW+e,YAAU,EAACC,MAAI,SAI7D,+BACE,iDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK/O,QAASqa,YAAU,EAACC,MAAI,SAIlD,+BACE,yDACA,oBAAIvlB,UAAU,gBAAd,SAA+Bga,EAAK8J,cClCrC,SAAS4Z,GAA4B9S,GAOxC,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAE7C,OACE,eAACH,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,2BACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,yCACA,oBAAI/5B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ5B,IAAcjD,UAAW+e,YAAU,EAACC,MAAI,SAI7D,+BACE,iDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK/O,QAASqa,YAAU,EAACC,MAAI,SAIlD,+BACE,8CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK2jB,KAAMrY,YAAU,EAACC,MAAI,SAI/C,+BACE,sCACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACwkB,GAAD,CAAUrf,KAAM6U,EAAK4jB,KAArB,SACE,+BAAO5jB,EAAK4jB,cAKlB,+BACE,yDACA,oBAAI59B,UAAU,gBAAd,SAA+Bga,EAAK8J,WAGtC,+BACE,gDACA,oBAAI9jB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKrB,MAAO2M,YAAU,EAACC,MAAI,YC1D/C,SAASsY,GAAkBjT,GAO9B,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAE7C,OACE,eAACH,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,iBACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,yCACA,oBAAI/5B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ5B,IAAcjD,UAAW+e,YAAU,EAACC,MAAI,SAI7D,+BACE,iDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK/O,QAASqa,YAAU,EAACC,MAAI,SAIlD,+BACE,gDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKrB,MAAO2M,YAAU,EAACC,MAAI,YCnC/C,SAASuY,GAA0BlT,GAOtC,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAE7C,OACE,eAACH,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,yBACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,yCACA,oBAAI/5B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ5B,IAAcjD,UAAW+e,YAAU,EAACC,MAAI,SAI7D,+BACE,iDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK/O,QAASqa,YAAU,EAACC,MAAI,SAIlD,+BACE,8CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK2jB,KAAMrY,YAAU,EAACC,MAAI,SAI/C,+BACE,sCACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACwkB,GAAD,CAAUrf,KAAM6U,EAAK4jB,KAArB,SACE,+BAAO5jB,EAAK4jB,cAKlB,+BACE,gDACA,oBAAI59B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKrB,MAAO2M,YAAU,EAACC,MAAI,YCpD/C,SAASwY,GAAkBnT,GAO9B,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAE7C,OACE,eAACH,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,iBACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,yCACA,oBAAI/5B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ5B,IAAcjD,UAAW+e,YAAU,EAACC,MAAI,SAI7D,+BACE,8CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKmjB,OAAQ7X,YAAU,EAACC,MAAI,SAIjD,+BACE,6CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKgkB,WAAY1Y,YAAU,EAACC,MAAI,SAIrD,+BACE,uDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAAC,IAAD,CAAYjB,SAAUib,EAAKjb,gBAI/B,+BACE,yDACA,oBAAIiB,UAAU,gBAAd,SAA+Bga,EAAK8J,WAGtC,+BACE,gDACA,oBAAI9jB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKrB,MAAO2M,YAAU,EAACC,MAAI,YCtD/C,SAAS0Y,GAA0BrT,GAOtC,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAE7C,OACE,eAACH,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,yBACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,yCACA,oBAAI/5B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ5B,IAAcjD,UAAW+e,YAAU,EAACC,MAAI,SAI7D,+BACE,8CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKmjB,OAAQ7X,YAAU,EAACC,MAAI,SAIjD,+BACE,6CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKgkB,WAAY1Y,YAAU,EAACC,MAAI,SAIrD,+BACE,8CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK2jB,KAAMrY,YAAU,EAACC,MAAI,SAI/C,+BACE,sCACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACwkB,GAAD,CAAUrf,KAAM6U,EAAK4jB,KAArB,SACE,+BAAO5jB,EAAK4jB,cAKlB,+BACE,uDACA,oBAAI59B,UAAU,gBAAd,SACE,cAAC,IAAD,CAAYjB,SAAUib,EAAKjb,gBAI/B,+BACE,yDACA,oBAAIiB,UAAU,gBAAd,SAA+Bga,EAAK8J,WAGtC,+BACE,gDACA,oBAAI9jB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKrB,MAAO2M,YAAU,EAACC,MAAI,YCzE/C,SAAS2Y,GAA2BtT,GAOvC,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAE7C,OACE,eAACH,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,mBACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,yCACA,oBAAI/5B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ5B,IAAcjD,UAAW+e,YAAU,EAACC,MAAI,SAI7D,+BACE,+CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKmkB,aAAc7Y,YAAU,EAACC,MAAI,SAIvD,+BACE,mDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKokB,eAAgB9Y,YAAU,EAACC,MAAI,YCpCxD,SAAS8Y,GAAwBzT,GAOpC,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAE7C,OACE,eAACH,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,gBACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,yCACA,oBAAI/5B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ5B,IAAcjD,UAAW+e,YAAU,EAACC,MAAI,SAI7D,+BACE,+CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKmkB,aAAc7Y,YAAU,EAACC,MAAI,SAIvD,+BACE,mDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKokB,eAAgB9Y,YAAU,EAACC,MAAI,YCnCxD,SAAS+Y,GAAyB1T,GAOrC,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAE7C,OACE,eAACH,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,iBACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,yCACA,oBAAI/5B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ5B,IAAcjD,UAAW+e,YAAU,EAACC,MAAI,SAI7D,+BACE,+CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKmkB,aAAc7Y,YAAU,EAACC,MAAI,SAIvD,+BACE,mDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKokB,eAAgB9Y,YAAU,EAACC,MAAI,SAIzD,+BACE,4CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK0iB,YAAapX,YAAU,EAACC,MAAI,SAItD,+BACE,uDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAAC,IAAD,CAAYjB,SAAUib,EAAKjb,mBCnD9B,SAASw/B,GAA0B3T,GAOtC,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAE7C,OACE,eAACH,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,kBACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,yCACA,oBAAI/5B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ5B,IAAcjD,UAAW+e,YAAU,EAACC,MAAI,SAI7D,+BACE,+CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKmkB,aAAc7Y,YAAU,EAACC,MAAI,SAIvD,+BACE,uDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKokB,eAAgB9Y,YAAU,EAACC,MAAI,SAIzD,+BACE,uDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKwkB,cAAelZ,YAAU,EAACC,MAAI,YCzCvD,SAASkZ,GAA4B7T,GAOxC,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAE7C,OACE,eAACH,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,mBACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,yCACA,oBAAI/5B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ5B,IAAcjD,UAAW+e,YAAU,EAACC,MAAI,SAI7D,+BACE,8CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKmjB,OAAQ7X,YAAU,EAACC,MAAI,SAIjD,+BACE,qDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK0iB,YAAapX,YAAU,EAACC,MAAI,SAItD,+BACE,8CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK0kB,WAAYpZ,YAAU,EAACC,MAAI,SAIrD,+BACE,uDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAAC,IAAD,CAAYjB,SAAUib,EAAKjb,gBAI/B,+BACE,sCACA,oBAAIiB,UAAU,gBAAd,SACE,cAACwkB,GAAD,CAAUrf,KAAM6U,EAAK2kB,WAArB,SACE,+BAAO3kB,EAAK2kB,oBAKlB,+BACE,8CACA,oBAAI3+B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK4kB,YAAatZ,YAAU,EAACC,MAAI,YCxErD,IAAMsZ,GAAoBxyB,aAAK,CACpC8wB,OAAQtlB,GACRmmB,WAAYnmB,GACZ9Y,SAAUuZ,eACVwL,MAAOxL,eACPK,MAAOd,KAIIinB,GAAazyB,aAAK,CAC7BpB,QAAS4M,GACTc,MAAOd,KAIIknB,GAAe1yB,aAAK,CAC/B8wB,OAAQtlB,GACR6kB,YAAa7kB,GACb9Y,SAAUuZ,iBAIC0mB,GAA4B3yB,aAAK,CAC5C8wB,OAAQtlB,GACRmmB,WAAYnmB,GACZ8lB,KAAM9lB,GACN+lB,KAAM3lB,eACNlZ,SAAUuZ,eACVwL,MAAOxL,eACPK,MAAOd,KAIIonB,GAAmB5yB,aAAK,CACnC8xB,aAActmB,GACdumB,eAAgBvmB,KAILqnB,GAAoB7yB,aAAK,CACpC8xB,aAActmB,GACd6kB,YAAa7kB,GACbumB,eAAgBvmB,GAChB9Y,SAAUuZ,iBAIC6mB,GAAsB9yB,aAAK,CACtC8xB,aAActmB,GACdumB,eAAgBvmB,KAILunB,GAAqB/yB,aAAK,CACrC8xB,aAActmB,GACdumB,eAAgBvmB,GAChB2mB,cAAe3mB,KAIJwnB,GAAehzB,aAAK,CAC/BpB,QAAS4M,GACTiM,MAAOxL,iBAIIgnB,GAAuBjzB,aAAK,CACvCpB,QAAS4M,GACT8lB,KAAM9lB,GACN+lB,KAAM3lB,eACN6L,MAAOxL,eACPK,MAAOd,KAII0nB,GAAqBlzB,aAAK,CACrCpB,QAAS4M,GACT8lB,KAAM9lB,GACN+lB,KAAM3lB,eACNU,MAAOd,KAII2nB,GAAuBnzB,aAAK,CACvC8wB,OAAQtlB,GACR6mB,WAAY7mB,GACZ6kB,YAAa7kB,GACb9Y,SAAUuZ,eACVqmB,WAAY1mB,eACZ2mB,YAAa/mB,KAIsBM,aAAM,CACzC,gBACA,wBACA,WACA,mBACA,SACA,iBACA,WACA,eACA,gBACA,iBACA,kBACA,qBChEK,SAASsnB,GAAkB7U,GAChC,IACE,IAAM/T,EAAS0D,aAAOqQ,EAAMtkB,GAAGuQ,OAAQ8D,IACvC,OAAQ9D,EAAOxK,MACb,IAAK,gBACH,IAAM2N,EAAOO,aAAO1D,EAAOmD,KAAM6kB,IACjC,OAAO,cAACd,GAAD,aAAmB/jB,KAAMA,GAAU4Q,IAE5C,IAAK,wBACH,IAAM5Q,EAAOO,aAAO1D,EAAOmD,KAAMglB,IACjC,OAAO,cAACf,GAAD,aAA2BjkB,KAAMA,GAAU4Q,IAEpD,IAAK,WACH,IAAM5Q,EAAOO,aAAO1D,EAAOmD,KAAMqlB,IACjC,OAAO,cAAC5B,GAAD,aAAqBzjB,KAAMA,GAAU4Q,IAE9C,IAAK,mBACH,IAAM5Q,EAAOO,aAAO1D,EAAOmD,KAAMslB,IACjC,OAAO,cAAC5B,GAAD,aAA6B1jB,KAAMA,GAAU4Q,IAEtD,IAAK,SACH,IAAM5Q,EAAOO,aAAO1D,EAAOmD,KAAM8kB,IACjC,OAAO,cAACjB,GAAD,aAAmB7jB,KAAMA,GAAU4Q,IAE5C,IAAK,iBACH,IAAM5Q,EAAOO,aAAO1D,EAAOmD,KAAMulB,IACjC,OAAO,cAACzB,GAAD,aAA2B9jB,KAAMA,GAAU4Q,IAEpD,IAAK,WACH,IAAM5Q,EAAOO,aAAO1D,EAAOmD,KAAM+kB,IACjC,OAAO,cAACvB,GAAD,aAAqBxjB,KAAMA,GAAU4Q,IAE9C,IAAK,eACH,IAAM5Q,EAAOO,aAAO1D,EAAOmD,KAAMilB,IACjC,OAAO,cAACZ,GAAD,aAAyBrkB,KAAMA,GAAU4Q,IAElD,IAAK,gBACH,IAAM5Q,EAAOO,aAAO1D,EAAOmD,KAAMklB,IACjC,OAAO,cAACZ,GAAD,aAA0BtkB,KAAMA,GAAU4Q,IAEnD,IAAK,iBACH,IAAM5Q,EAAOO,aAAO1D,EAAOmD,KAAMolB,IACjC,OAAO,cAACb,GAAD,aAA2BvkB,KAAMA,GAAU4Q,IAEpD,IAAK,kBACH,IAAM5Q,EAAOO,aAAO1D,EAAOmD,KAAMmlB,IACjC,OAAO,cAACjB,GAAD,aAA4BlkB,KAAMA,GAAU4Q,IAErD,IAAK,mBACH,IAAM5Q,EAAOO,aAAO1D,EAAOmD,KAAMwlB,IACjC,OAAO,cAACf,GAAD,aAA6BzkB,KAAMA,GAAU4Q,IAEtD,QACE,OAAO,cAACqQ,GAAD,eAAwBrQ,KAEnC,MAAOhoB,GAIP,OAHA/E,aAAY+E,EAAO,CACjBqT,UAAW2U,EAAM/mB,GAAG6S,WAAW,KAE1B,cAACukB,GAAD,eAAwBrQ,KC1F5B,IAAM8U,GAAgBrzB,aAAK,CAChCmM,OAAQP,eACRvZ,SAAU4Z,eACVC,eAAgBN,iBAGZ0nB,GAAiBtzB,aAAK,CAC1BqM,KAAMb,GACNnZ,SAAU4Z,eACVe,cAAexB,GACf+nB,WAAY/nB,GACZ4B,gBAAiBX,aAASjB,MAGtBgoB,GAAoBxzB,aAAK,CAC7BpB,QAAS4M,GACTa,KAAMb,GACNc,MAAOd,GACP+nB,WAAY/nB,KAGRioB,GAAqBzzB,aAAK,CAC9B0zB,SAAUloB,GACV+nB,WAAY/nB,GACZgC,QAASC,aAAMjC,IACfxV,EAAGiW,iBAIQ0nB,GAAW3zB,aAAK,CAC3B8wB,OAAQtlB,GACR6kB,YAAa7kB,GACbW,OAAQgI,aAAM,CAACvI,eAAUK,iBACzBoF,UAAW5E,aAASjB,IACpBooB,kBAAmBnnB,aAASjB,IAC5BgC,QAASf,aAASgB,aAAMjC,OAGpBqoB,GAAU7zB,aAAK,CACnB8wB,OAAQtlB,GACRgB,SAAUhB,GACVW,OAAQgI,aAAM,CAACvI,eAAUK,iBACzBK,MAAOG,aAASjB,IAChBsoB,cAAernB,aAASjB,IACxBgC,QAASf,aAASgB,aAAMjC,OAGpBuoB,GAAS/zB,aAAK,CAClB8wB,OAAQtlB,GACRc,MAAOG,aAASjB,IAChBsoB,cAAernB,aAASjB,IACxBgC,QAASf,aAASgB,aAAMjC,OAGpBwoB,GAAgBloB,aAAM,CAC1B,aACA,gBACA,eACA,iBAGImoB,GAAej0B,aAAK,CACxBqM,KAAMI,aAASjB,IACf5M,QAAS6N,aAASjB,IAClBwkB,cAAegE,GACfjE,aAAc9iB,aAASzB,IACvB6F,UAAW5E,aAASjB,IACpBooB,kBAAmBnnB,aAASjB,IAC5BgC,QAASf,aAASgB,aAAMjC,OAGpB0oB,GAASl0B,aAAK,CAClBqM,KAAMb,GACN5M,QAAS4M,GACTW,OAAQgI,aAAM,CAACvI,eAAUK,iBACzBe,cAAeP,aAASjB,IACxB2oB,sBAAuB1nB,aAASjB,IAChCgC,QAASf,aAASgB,aAAMjC,OAGpB4oB,GAAOp0B,aAAK,CAChBpB,QAAS4M,GACTa,KAAMb,GACNW,OAAQgI,aAAM,CAACvI,eAAUK,iBACzBoF,UAAW5E,aAASjB,IACpBooB,kBAAmBnnB,aAASjB,IAC5BgC,QAASf,aAASgB,aAAMjC,OAGpB6oB,GAAer0B,aAAK,CACxBpB,QAAS4M,GACT6kB,YAAa7kB,GACbc,MAAOG,aAASjB,IAChBsoB,cAAernB,aAASjB,IACxBgC,QAASf,aAASgB,aAAMjC,OAGpB8oB,GAAgBt0B,aAAK,CACzBpB,QAAS4M,GACTa,KAAMb,GACN4B,gBAAiBX,aAASjB,IAC1B+oB,wBAAyB9nB,aAASjB,IAClCgC,QAASf,aAASgB,aAAMjC,OAGpBgpB,GAAcx0B,aAAK,CACvBpB,QAAS4M,GACTa,KAAMb,GACN4B,gBAAiBX,aAASjB,IAC1B+oB,wBAAyB9nB,aAASjB,IAClCgC,QAASf,aAASgB,aAAMjC,OAIbipB,GAAkBz0B,aAAK,CAClC8wB,OAAQtlB,GACRa,KAAMb,GACN6kB,YAAa7kB,GACb6F,UAAW5E,aAASjB,IACpBooB,kBAAmBnnB,aAASjB,IAC5BgC,QAASf,aAASgB,aAAMjC,KACxBe,YAAa8mB,KAGTqB,GAAiB10B,aAAK,CAC1B8wB,OAAQtlB,GACRa,KAAMb,GACNgB,SAAUhB,GACVc,MAAOG,aAASjB,IAChBsoB,cAAernB,aAASjB,IACxBgC,QAASf,aAASgB,aAAMjC,KACxBe,YAAa8mB,KAGTsB,GAAgB30B,aAAK,CACzBpB,QAAS4M,GACTa,KAAMb,GACNwB,cAAeP,aAASjB,IACxB2oB,sBAAuB1nB,aAASjB,IAChCgC,QAASf,aAASgB,aAAMjC,KACxBe,YAAa8mB,KAGTuB,GAAc50B,aAAK,CACvBpB,QAAS4M,GACTa,KAAMb,GACN6F,UAAW5E,aAASjB,IACpBooB,kBAAmBnnB,aAASjB,IAC5BgC,QAASf,aAASgB,aAAMjC,KACxBe,YAAa8mB,KAIFwB,GAAuB/oB,aAAM,CACxC,iBACA,oBACA,qBACA,WACA,UACA,SACA,eACA,SACA,OACA,eACA,gBACA,cACA,YACA,WACA,UACA,QACA,kBACA,iBACA,gBACA,gBAGWgpB,GAAa,CACxBC,eAAgBzB,GAChB0B,kBAAmBxB,GACnByB,mBAAoBxB,GACpByB,SAAUvB,GACVwB,QAAStB,GACTuB,OAAQrB,GACRsB,aAAcpB,GACdqB,OAAQpB,GACRqB,KAAMnB,GACNoB,aAAcnB,GACdoB,cAAenB,GACfoB,YAAalB,GACbmB,UAAWlB,GACXmB,SAAUlB,GACVmB,QAASlB,GACTmB,MAAOlB,GACPmB,gBAAiBtB,GACjBuB,eAAgBtB,GAChBuB,cAAetB,GACfuB,YAAatB,IAGFuB,GAAY,CACvBpB,eAAgB,kBAChBC,kBAAmB,qBACnBC,mBAAoB,sBACpBC,SAAU,WACVC,QAAS,UACTC,OAAQ,SACRC,aAAc,gBACdC,OAAQ,UACRC,KAAM,OACNC,aAAc,gBACdC,cAAe,iBACfC,YAAa,eACbC,UAAW,qBACXC,SAAU,oBACVC,QAAS,oBACTC,MAAO,iBACPC,gBAAiB,qBACjBC,eAAgB,oBAChBC,cAAe,oBACfC,YAAa,kBCtMR,SAASE,GAAiB7X,GAC/B,IACE,IAAM/T,EAAS0D,aAAOqQ,EAAMtkB,GAAGuQ,OAAQ8D,IACzB+nB,EAAkB7rB,EAAxBxK,KAAe2N,EAASnD,EAATmD,KACjB3N,EAAOkO,aAAOmoB,EAASxB,IACvBjc,EAAK,iBAAaud,GAAUn2B,IAC5Bs2B,EAAUpoB,aAAOP,EAAMmnB,GAAW90B,IACxC,OAAO,cAACu2B,GAAD,aAAkB3d,MAAOA,EAAOjL,KAAM2oB,GAAa/X,IAC1D,MAAOnoB,GAIP,OAHA5E,aAAY4E,EAAK,CACfwT,UAAW2U,EAAM/mB,GAAG6S,WAAW,KAE1B,cAACukB,GAAD,eAAwBrQ,KAcnC,SAASgY,GAAiBhY,GAAmB,IAAD,EACatvB,IAAMma,SAAQ,WACnE,IAAIwS,EACA4a,EAGJ,MAAM,WAAYjY,EAAM5Q,MAEpB,SAAU4Q,EAAM5Q,MAAQ4Q,EAAM5Q,KAAKtB,gBAAgBV,IACrDiQ,EAAc2C,EAAM5Q,KAAKtB,KAAKhS,WAE9B,YAAakkB,EAAM5Q,MACnB4Q,EAAM5Q,KAAK/O,mBAAmB+M,IAE9B6qB,EAAejY,EAAM5Q,KAAK/O,QAAQvE,WAElC,WAAYkkB,EAAM5Q,MAClB4Q,EAAM5Q,KAAKmjB,kBAAkBnlB,MAE7B6qB,EAAejY,EAAM5Q,KAAKmjB,OAAOz2B,YAE5B,CACLuhB,cACA4a,iBAjBoC,KAmBrC,IAxBkBC,EADqB,EAClC7a,YAA8B4a,EADI,EACJA,aA0BhCp4B,E9DwND,SACL/C,GAEA,IAAM2S,EAAc+J,GAAe1c,GACnC,QAAgBlM,IAAZkM,EAEJ,IAAK,IAAD,IACIiE,EAAI,OAAG0O,QAAH,IAAGA,GAAH,UAAGA,EAAa1O,YAAhB,iBAAG,EAAmB8I,eAAtB,aAAG,EAA4B9I,KACzC,IAAKA,EAAM,OACX,GAAqB,cAAjBA,EAAKoY,SAAgD,YAArBpY,EAAKkL,OAAOxK,KAC9C,OAGF,OAAOkO,aAAO5O,EAAKkL,OAAOmD,KAAMvB,IAChC,MAAOhW,GACP5E,aAAY4E,EAAK,CAAEiF,a8DvOHq7B,CAAoBF,GAChC5a,EAAc6a,IAAe,OAAIr4B,QAAJ,IAAIA,OAAJ,EAAIA,EAAWiO,KAAKhS,YACjDs8B,EAAW3e,GAAmB4D,GAC5Bzd,EAAkBmH,IAAlBnH,cACF+Z,EAAmBD,KAEzBhpB,IAAMwB,WAAU,WACV+lC,IAAiBp4B,GACnB8Z,EAAiB,IAAIvM,IAAU6qB,MAEhC,CAACte,EAAkBse,IAEtBvnC,IAAMwB,WAAU,WACVmrB,IAAgB+a,GAClBze,EAAiB,IAAIvM,IAAUiQ,MAEhC,CAAC1D,EAAkB0D,IAEtB,IAAMgb,EAA4B,GAC9BvkC,EAAQ,OAAGskC,QAAH,IAAGA,OAAH,EAAGA,EAAUtkC,SACrBwkC,EAAc,GAMlB,GAJI,gBAAiBtY,EAAM5Q,OACzBtb,EAAWksB,EAAM5Q,KAAKpB,YAAYla,UAGhCupB,EAAa,CACf,IAAM6D,EAAethB,EAAcpO,IAAI6rB,GAEnC6D,IACFoX,EAAcpX,EAAaphB,QAG7Bu4B,EAAWhmC,KACT,+BACE,uCACA,oBAAI+C,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ,IAAI4M,IAAUiQ,GAAc3C,YAAU,EAACC,MAAI,QAHvD0C,IASb,IAAK,IAAIphB,KAAO+jB,EAAM5Q,KAAM,CAC1B,IAAIzc,EAAQqtB,EAAM5Q,KAAKnT,GACvB,QAAcrL,IAAV+B,EAGJ,GAAIyG,MAAMg2B,QAAQz8B,IAAUA,EAAM4lC,OAAM,SAACC,GAAD,OAAOA,aAAaprB,OAC1D,IAAK,IAAIwL,EAAI,EAAGA,EAAIjmB,EAAMH,OAAQomB,IAAK,CACrC,IAAI6f,EAAY9lC,EAAMimB,GAClB7P,EAAK,UAAM9M,EAAI1F,OAAO,GAAGC,cAAgByF,EAAItH,MAAM,GAA9C,eAAuDikB,EAAI,GAEpEyf,EAAWhmC,KACT,+BACE,6BAAK0W,IACL,oBAAI3T,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQi4B,EAAW/d,YAAU,EAACC,MAAI,QAHtC1e,EAAM2c,QANrB,CAiBY,gBAAR3c,IACFA,EAAM,SACNtJ,EAASA,EAAwBib,QAGnC,IAAI8qB,OAAG,EACHC,EAAc,GAClB,GAAIhmC,aAAiBya,IACnBsrB,EAAM,cAACje,GAAD,CAASja,OAAQ7N,EAAO+nB,YAAU,EAACC,MAAI,SACxC,GAAY,WAAR1e,EAAkB,CAC3B,IAAI2R,OAAM,OACOhd,IAAbkD,GACF6kC,EAAc,SACd/qB,EAAS,IAAI5Y,KAAKC,aAAa,SAASC,OAAOvC,IAE/Cib,EAAS,IAAI5Y,KAAKC,aAAa,QAAS,CACtCmqB,sBAAuBtrB,EACvBgB,sBAAuBhB,IACtBoB,OAAOtB,YAAqBjB,EAAOmB,IAExC4kC,EACE,qCACG9qB,EADH,IACY0qB,UAIdI,EAAM,mCAAG/lC,IAGX,IAAIoW,EAAQ9M,EAAI1F,OAAO,GAAGC,cAAgByF,EAAItH,MAAM,GAAKgkC,EAEzDN,EAAWhmC,KACT,+BACE,6BAAK0W,IACL,oBAAI3T,UAAU,gBAAd,SAA+BsjC,MAFxBz8B,KAOb,OACE,cAAC+yB,GAAD,CACEtzB,GAAIskB,EAAMtkB,GACVzB,MAAO+lB,EAAM/lB,MACbnE,OAAQkqB,EAAMlqB,OACdukB,MAAO2F,EAAM3F,MACb6U,WAAYlP,EAAMkP,WAClBC,WAAYnP,EAAMmP,WANpB,SAQGkJ,ICpMA,SAASO,GAAT,GAcH,IAGEve,EAhBJ3e,EAaC,EAbDA,GACAzB,EAYC,EAZDA,MACAnE,EAWC,EAXDA,OACAuV,EAUC,EAVDA,UACA6jB,EASC,EATDA,WACAC,EAQC,EARDA,WASQ57B,EAAQF,cAARE,IAGR,IACE8mB,EAAQ6I,GAAkCxnB,GAC1C,MAAO1D,GACP/E,aAAY+E,EAAO,CACjBzE,IAAKA,EACL8X,UAAWA,IAIf,OACE,cAAC2jB,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAK,yBAAoBA,GAAS,WAClC6U,WAAYA,EACZC,WAAYA,EACZF,YAAU,ICnCT,SAAS4J,GAAT,GAcH,IAGExe,EAhBJ3e,EAaC,EAbDA,GACAzB,EAYC,EAZDA,MACAnE,EAWC,EAXDA,OACAuV,EAUC,EAVDA,UACA6jB,EASC,EATDA,WACAC,EAQC,EARDA,WASQ57B,EAAQF,cAARE,IAGR,IACE8mB,EAAQuI,GAA+BlnB,GACvC,MAAO1D,GACP/E,aAAY+E,EAAO,CACjBzE,IAAKA,EACL8X,UAAWA,IAIf,OACE,cAAC2jB,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAK,sBAAiBA,GAAS,WAC/B6U,WAAYA,EACZC,WAAYA,EACZF,YAAU,ICxCT,IAAM9M,GAAwB,CACnC,+CAGIC,GAAgD,CACpDC,EAAG,oBACHC,EAAG,sBACHC,EAAG,WACHC,EAAG,0BACHC,EAAG,oBACHC,EAAG,gBACHI,EAAG,oBACHC,EAAG,wBCPE,SAAS+V,GAAT,GAcH,IAGEze,EAhBJ3e,EAaC,EAbDA,GACAzB,EAYC,EAZDA,MACAnE,EAWC,EAXDA,OACAuV,EAUC,EAVDA,UACA6jB,EASC,EATDA,WACAC,EAQC,EARDA,WASQ57B,EAAQF,cAARE,IAGR,IACE8mB,EDHG,SACLna,GAEA,IAAM2iB,EAAO3iB,EAAYa,KAAK,GAE9B,KAAM8hB,KAAQT,IACZ,MAAM,IAAIhvB,MAAJ,kDAAqDyvB,IAG7D,OAAOT,GAAmBS,GCNhBkW,CAA6Br9B,GACrC,MAAO1D,GACP/E,aAAY+E,EAAO,CACjBzE,IAAKA,EACL8X,UAAWA,IAIf,OACE,cAAC2jB,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAK,oBAAeA,GAAS,WAC7B6U,WAAYA,EACZC,WAAYA,EACZF,YAAU,ICpCT,SAAS6B,GAAuB9Q,GAOnC,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAE7C,OACE,eAACH,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,sBACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,yCACA,oBAAI/5B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKzT,UAAW+e,YAAU,EAACC,MAAI,SAIpD,+BACE,wCACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK2U,OAAQrJ,YAAU,EAACC,MAAI,SAIjD,+BACE,yDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK6Z,kBAAmBvO,YAAU,EAACC,MAAI,SAI5D,+BACE,6CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK6a,cAAevP,YAAU,EAACC,MAAI,SAIxD,+BACE,mDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK+a,gBAAiBzP,YAAU,EAACC,MAAI,SAI1D,+BACE,4CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKgb,gBAAiB1P,YAAU,EAACC,MAAI,SAI1D,+BACE,4CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKib,gBAAiB3P,YAAU,EAACC,MAAI,SAI1D,+BACE,6CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK0Z,QAASpO,YAAU,EAACC,MAAI,SAIlD,+BACE,kDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKob,cAAe9P,YAAU,EAACC,MAAI,SAIxD,+BACE,2CACA,oBAAIvlB,UAAU,gBAAd,SAA+Bga,EAAKoY,cAGtC,+BACE,sCACA,oBAAIpyB,UAAU,gBAAd,SAA+Bga,EAAKqV,UAGtC,+BACE,0CACA,oBAAIrvB,UAAU,gBAAd,SAA+Bga,EAAKwW,QAAQrzB,SAAS,YC9FtD,SAASymC,GAAuBhZ,GAOnC,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAE7C,OACE,eAACH,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,4BACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,yCACA,oBAAI/5B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKzT,UAAW+e,YAAU,EAACC,MAAI,SAIpD,+BACE,iDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKuc,2BAA4BjR,YAAU,EAACC,MAAI,SAIrE,+BACE,gDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKwc,uBAAwBlR,YAAU,EAACC,MAAI,SAIjE,+BACE,8CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKyc,gBAAiBnR,YAAU,EAACC,MAAI,SAI1D,+BACE,2CACA,oBAAIvlB,UAAU,gBAAd,SAA+Bga,EAAKoY,iBCjDrC,SAASyR,GAAqBjZ,GAOjC,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAE7C,OACE,eAACH,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,0BACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,yCACA,oBAAI/5B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKzT,UAAW+e,YAAU,EAACC,MAAI,SAIpD,+BACE,gDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKyZ,QAASnO,YAAU,EAACC,MAAI,SAIlD,+BACE,6CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK0Z,QAASpO,YAAU,EAACC,MAAI,SAIlD,+BACE,2DACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK2Z,mBAAoBrO,YAAU,EAACC,MAAI,SAI7D,+BACE,kDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK4Z,eAAgBtO,YAAU,EAACC,MAAI,SAIzD,+BACE,yDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK6Z,kBAAmBvO,YAAU,EAACC,MAAI,SAI5D,+BACE,2CACA,oBAAIvlB,UAAU,gBAAd,SAA+Bga,EAAKoY,cAGtC,+BACE,2CACA,oBAAIpyB,UAAU,gBAAd,SAA+Bga,EAAKkZ,cAGtC,+BACE,uDACA,oBAAIlzB,UAAU,gBAAd,SAA+Bga,EAAKiZ,yBAGtC,+BACE,+CACA,oBAAIjzB,UAAU,gBAAd,SAA+Bga,EAAKoZ,aAGtC,+BACE,iDACA,oBAAIpzB,UAAU,gBAAd,SAA+Bga,EAAKmZ,uBCnFrC,SAAS2Q,GAAmBlZ,GAO/B,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAE7C,OACE,eAACH,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,uBACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,yCACA,oBAAI/5B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKzT,UAAW+e,YAAU,EAACC,MAAI,SAIpD,+BACE,6DACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKka,0BAA2B5O,YAAU,EAACC,MAAI,SAIpE,+BACE,iDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKma,sBAAuB7O,YAAU,EAACC,MAAI,SAIhE,+BACE,8CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKoa,qBAAsB9O,YAAU,EAACC,MAAI,SAI/D,+BACE,gDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKyZ,QAASnO,YAAU,EAACC,MAAI,SAIlD,+BACE,6CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK0Z,QAASpO,YAAU,EAACC,MAAI,SAIlD,+BACE,2DACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK2Z,mBAAoBrO,YAAU,EAACC,MAAI,SAI7D,+BACE,2CACA,oBAAIvlB,UAAU,gBAAd,SAA+Bga,EAAKoY,cAGtC,+BACE,mDACA,oBAAIpyB,UAAU,gBAAd,SAA+Bga,EAAK+Z,gBAAgB52B,mBC3ErD,SAAS4mC,GAAyBnZ,GAOrC,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAE7C,OACE,eAACH,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,8BACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,yCACA,oBAAI/5B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKzT,UAAW+e,YAAU,EAACC,MAAI,SAIpD,+BACE,8CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK6Y,YAAavN,YAAU,EAACC,MAAI,SAItD,+BACE,8CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK8Y,YAAaxN,YAAU,EAACC,MAAI,SAItD,+BACE,2CACA,oBAAIvlB,UAAU,gBAAd,SAA+Bga,EAAKoY,cAGtC,+BACE,sDACA,oBAAIpyB,UAAU,gBAAd,SAA+Bga,EAAKqY,sBAGtC,+BACE,mDACA,oBAAIryB,UAAU,gBAAd,SAA+Bga,EAAKsY,wBCpDrC,SAAS0R,GAAkBpZ,GAO9B,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAE7C,OACE,eAACH,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,sBACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,yCACA,oBAAI/5B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKzT,UAAW+e,YAAU,EAACC,MAAI,SAIpD,+BACE,gDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKyZ,QAASnO,YAAU,EAACC,MAAI,SAIlD,+BACE,6CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK0Z,QAASpO,YAAU,EAACC,MAAI,SAIlD,+BACE,wDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKmc,mBAAoB7Q,YAAU,EAACC,MAAI,SAI7D,+BACE,0DACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKmc,mBAAoB7Q,YAAU,EAACC,MAAI,SAI7D,+BACE,2CACA,oBAAIvlB,UAAU,gBAAd,SAA+Bga,EAAKoY,cAGtC,+BACE,mDACA,oBAAIpyB,UAAU,gBAAd,SAA+Bga,EAAK+Z,wBC7DrC,SAAS6H,GAAuBhR,GAOnC,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAC7C,OACE,eAACH,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,4BACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,yCACA,oBAAI/5B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKzT,UAAW+e,YAAU,EAACC,MAAI,SAIpD,+BACE,wCACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK2U,OAAQrJ,YAAU,EAACC,MAAI,SAIjD,+BACE,6CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK6a,cAAevP,YAAU,EAACC,MAAI,SAIxD,+BACE,6CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK0Z,QAASpO,YAAU,EAACC,MAAI,SAIlD,+BACE,gDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK2b,YAAarQ,YAAU,EAACC,MAAI,SAItD,+BACE,4CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKkb,aAAc5P,YAAU,EAACC,MAAI,SAIvD,+BACE,0CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKmb,WAAY7P,YAAU,EAACC,MAAI,SAIrD,+BACE,oDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK4b,iBAAkBtQ,YAAU,EAACC,MAAI,SAI3D,+BACE,kDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK6b,eAAgBvQ,YAAU,EAACC,MAAI,SAIzD,+BACE,8CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK8b,eAAgBxQ,YAAU,EAACC,MAAI,SAIzD,+BACE,kDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKob,cAAe9P,YAAU,EAACC,MAAI,SAIxD,+BACE,2CACA,oBAAIvlB,UAAU,gBAAd,SAA+Bga,EAAKoY,iBC7FrC,SAAS6R,GAAuBrZ,GAOnC,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAE7C,OADAp3B,QAAQqC,IAAI,QAEV,eAAC40B,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,4BACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,yCACA,oBAAI/5B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKzT,UAAW+e,YAAU,EAACC,MAAI,SAIpD,+BACE,yDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK6Z,kBAAmBvO,YAAU,EAACC,MAAI,SAI5D,+BACE,wCACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK2U,OAAQrJ,YAAU,EAACC,MAAI,SAIjD,+BACE,yDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK4a,kBAAmBtP,YAAU,EAACC,MAAI,SAI5D,+BACE,4CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK6a,cAAevP,YAAU,EAACC,MAAI,SAIxD,+BACE,qDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK8a,kBAAmBxP,YAAU,EAACC,MAAI,SAI5D,+BACE,mDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK+a,gBAAiBzP,YAAU,EAACC,MAAI,SAI1D,+BACE,4CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKgb,gBAAiB1P,YAAU,EAACC,MAAI,SAI1D,+BACE,4CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKib,gBAAiB3P,YAAU,EAACC,MAAI,SAI1D,+BACE,6CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAK0Z,QAASpO,YAAU,EAACC,MAAI,SAIlD,+BACE,4CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKkb,aAAc5P,YAAU,EAACC,MAAI,SAIvD,+BACE,0CACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKmb,WAAY7P,YAAU,EAACC,MAAI,SAIrD,+BACE,kDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ4O,EAAKob,cAAe9P,YAAU,EAACC,MAAI,SAIxD,+BACE,gDACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ,IAAI4M,IAAUgC,EAAKya,YAAanP,YAAU,EAACC,MAAI,SAIpE,+BACE,2CACA,oBAAIvlB,UAAU,gBAAd,SAA+Bga,EAAKoY,cAGtC,+BACE,sCACA,oBAAIpyB,UAAU,gBAAd,SAA+Bga,EAAKqV,UAGtC,+BACE,6CACA,oBAAIrvB,UAAU,gBAAd,SAA+Bga,EAAKsV,gBAGtC,+BACE,gDACA,oBAAItvB,UAAU,gBAAd,SAA+Bga,EAAKsa,8BAGtC,+BACE,4CACA,oBAAIt0B,UAAU,gBAAd,SAA+Bga,EAAKwV,eAGtC,+BACE,+CACA,oBAAIxvB,UAAU,gBAAd,SAA+Bga,EAAKua,YAAYp3B,gBAGlD,+BACE,6CACA,oBAAI6C,UAAU,gBAAd,SAA+Bga,EAAKwa,UAAUr3B,mBCtI/C,SAAS+mC,GAAsBtZ,GAOlC,IAKE3F,EAJI3e,EAAyDskB,EAAzDtkB,GAAIzB,EAAqD+lB,EAArD/lB,MAAOnE,EAA8CkqB,EAA9ClqB,OAAQuV,EAAsC2U,EAAtC3U,UAAW6jB,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAE1C57B,EAAQF,cAARE,IAGR,IAGE,OAFA8mB,EAAQ2R,GAAgCtwB,IAGtC,IAAK,iBACH,OACE,cAACy9B,GAAD,aAA0B/pB,KAAMuY,GAAoBjsB,IAASskB,IAEjE,IAAK,aACH,OAAO,cAACiZ,GAAD,aAAsB7pB,KAAMqZ,GAAgB/sB,IAASskB,IAC9D,IAAK,UACH,OAAO,cAACkZ,GAAD,aAAoB9pB,KAAMga,GAAc1tB,IAASskB,IAC1D,IAAK,eACH,OACE,cAACqZ,GAAD,aAAwBjqB,KAAM0a,GAAkBpuB,IAASskB,IAE7D,IAAK,eACH,OACE,cAAC,GAAD,aAAwB5Q,KAAM0W,GAAkBpqB,IAASskB,IAE7D,IAAK,eAIL,IAAK,cACH,OACE,cAAC,GAAD,aAAwB5Q,KAAM+W,GAAkBzqB,IAASskB,IAE7D,IAAK,SACH,OAAO,cAACoZ,GAAD,aAAmBhqB,KAAMgc,GAAa1vB,IAASskB,IACxD,IAAK,eACH,OACE,cAACgZ,GAAD,aAAwB5pB,KAAMqc,GAAkB/vB,IAASskB,KAG/D,MAAOhoB,GACP/E,aAAY+E,EAAO,CACjBzE,IAAKA,EACL8X,UAAWA,IAIf,OACE,cAAC2jB,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAK,uBAAkBA,GAAS,WAChC6U,WAAYA,EACZC,WAAYA,EACZF,YAAU,IClFT,IAAMgB,GAAYxuB,aAAK,CAC5BpB,QAAS4M,GACT6F,UAAW7F,GACXijB,MAAO7iB,eACP8iB,OAAQziB,iBAIG6rB,GAAuB93B,aAAK,CACvCpB,QAAS4M,GACT6F,UAAW7F,KAIAusB,GAAc/3B,aAAK,CAC9Bg4B,mBAAoBxsB,GACpBysB,eAAgBzsB,GAChB0sB,cAAe1sB,GACf2sB,aAAc3sB,GACd6F,UAAW7F,GACX+nB,WAAY/nB,GACZwlB,YAAaxlB,KAIF4sB,GAAmBp4B,aAAK,CACnCpB,QAAS4M,GACT6F,UAAW7F,GACXukB,aAAc9iB,aAASzB,MAIZ6sB,GAA2Br4B,aAAK,CAC3Cg4B,mBAAoBxsB,GACpBysB,eAAgBzsB,GAChBkb,aAAclb,GACd0sB,cAAe1sB,GACf6F,UAAW7F,GACX+nB,WAAY/nB,GACZwlB,YAAaxlB,GACb8sB,cAAe9sB,GACf+sB,WAAYtsB,iBAMqCH,aAAM,CACvD,mBACA,uBACA,eACA,QACA,aC3BK,SAAS0sB,GAAgCja,GAC9C,IACE,IAAM/T,EAAS0D,aAAOqQ,EAAMtkB,GAAGuQ,OAAQ8D,IACvC,OAAQ9D,EAAOxK,MACb,IAAK,QACH,OAAOy4B,GAAyBla,EAAO/T,EAAQgkB,IAEjD,IAAK,UACH,OAAOiK,GAA2Bla,EAAO/T,EAAQutB,IAEnD,IAAK,eACH,OAAOU,GAAgCla,EAAO/T,EAAQ4tB,IAExD,IAAK,uBACH,OAAOK,GACLla,EACA/T,EACA6tB,IAGJ,IAAK,mBACH,OAAOI,GACLla,EACA/T,EACAstB,IAGJ,QACE,OAAO,cAAClJ,GAAD,eAAwBrQ,KAEnC,MAAOhoB,GAIP,OAHA/E,aAAY+E,EAAO,CACjBqT,UAAW2U,EAAM/mB,GAAG6S,WAAW,KAE1B,cAACukB,GAAD,eAAwBrQ,KAInC,SAASka,GACPla,EACA/T,EACAkuB,GAKA,IAHA,IAAM/qB,EAAOO,aAAO1D,EAAOmD,KAAM+qB,GAE3B9B,EAA4B,GAClC,MAAyB1vB,OAAOC,QAAQwG,GAAxC,eAA+C,CAAC,IAAD,sBAArCnT,EAAqC,KAAhCtJ,EAAgC,KACzCA,aAAiBya,IACnBza,EAAQ,cAAC8nB,GAAD,CAASja,OAAQ7N,EAAO+nB,YAAU,EAACC,MAAI,IAC9B,UAAR1e,IACTtJ,EACE,qBAAKyC,UAAU,0CAAf,SAA0DzC,KAI9D0lC,EAAWhmC,KACT,+BACE,+BACGgE,YAAiB4F,GAAM,IACf,UAARA,GAAmB,sBAAM7G,UAAU,aAAhB,0BAEtB,oBAAIA,UAAU,gBAAd,SAA+BzC,MALxBsJ,IAUb,OACE,eAAC+yB,GAAD,2BACMhP,GADN,IAEE3F,MAAK,kCAA6BhkB,YAAiB4V,EAAOxK,OAF5D,UAIE,+BACE,yCACA,oBAAIrM,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQwf,EAAMtkB,GAAGC,UAAW+e,YAAU,EAACC,MAAI,SAGvD0d,MC9FuB52B,aAAK,CACjC4vB,YAAapkB,GACb+nB,WAAY/nB,GACZwlB,YAAaxlB,GACbmtB,KAAMntB,GACNoE,gBAAiBpE,GACjBiF,qBAAsBjF,GACtBkF,WAAYzE,iBAPP,IAWMwkB,GAAgBzwB,aAAK,CAChC4vB,YAAapkB,GACbwlB,YAAaxlB,GACb6F,UAAW7F,GACXukB,aAAcvkB,GACdwkB,cAAe/jB,iBAIJ2sB,GAAW54B,aAAK,CAC3BgxB,YAAaxlB,GACbqtB,iBAAkBrtB,GAClBokB,YAAapkB,GACbstB,cAAettB,GACfutB,KAAM/4B,aAAK,CACTmT,KAAMvH,eACN5X,MAAOyZ,aAAMxB,gBACb4E,UAAWpE,aAASQ,aAAShB,qBAKpB0kB,GAAe3wB,aAAK,CAC/B4vB,YAAapkB,GACb6kB,YAAa7kB,GACb4kB,kBAAmB5kB,GACnB9Y,SAAUuZ,iBAIC+sB,GAAsBh5B,aAAK,CACtC4vB,YAAapkB,GACbytB,qBAAsBztB,GACtB4kB,kBAAmB5kB,KAIR0tB,GAAuBl5B,aAAK,CACvC4vB,YAAapkB,GACb4kB,kBAAmB5kB,GACnBkF,WAAYzE,iBAIDktB,GAAiBn5B,aAAK,CACjC4vB,YAAapkB,GACbqtB,iBAAkBrtB,GAClBwlB,YAAaxlB,GACbstB,cAAettB,GACfutB,KAAM/4B,aAAK,CACTmT,KAAMvH,eACN5X,MAAOyZ,aAAMxB,gBACb4E,UAAW5E,iBAEbkH,KAAMvH,iBC1DD,SAASwtB,GAAgB7a,GAAiC,IACvDzsB,EAAQF,cAARE,IAER,IACE,IAAM0Y,EAAS0D,aAAOqQ,EAAMtkB,GAAGuQ,OAAQ8D,IAEvC,OAAQ9D,EAAOxK,MACb,IAAK,OACH,OAAOy4B,GAAwBla,EAAO/T,EAAQouB,IAChD,IAAK,YACH,OAAOH,GAA6Bla,EAAO/T,EAAQimB,IACrD,IAAK,WACH,OAAOgI,GAA4Bla,EAAO/T,EAAQmmB,IACpD,IAAK,kBACH,OAAO8H,GACLla,EACA/T,EACAwuB,IAEJ,IAAK,mBACH,OAAOP,GACLla,EACA/T,EACA0uB,IAEJ,IAAK,aACH,OAAOT,GAA8Bla,EAAO/T,EAAQ2uB,KAExD,MAAO5iC,GACP/E,aAAY+E,EAAO,CACjBzE,QAIJ,OAAO,cAAC88B,GAAD,eAAwBrQ,IAGjC,SAASka,GACPla,EACA/T,EACAkuB,GAKA,IAHA,IAAM/qB,EAAOO,aAAO1D,EAAOmD,KAAM+qB,GAC3B9B,EAA4B,GAElC,MAAyB1vB,OAAOC,QAAQwG,GAAxC,eAA+C,CAAC,IAAD,sBAArCnT,EAAqC,KAAhCtJ,EAAgC,KACzCA,aAAiBya,MACnBza,EAAQ,cAAC8nB,GAAD,CAASja,OAAQ7N,EAAO+nB,YAAU,EAACC,MAAI,KAGrC,SAAR1e,GACFo8B,EAAWhmC,KACT,+BACE,2CACA,oBAAI+C,UAAU,gBAAd,SACE,qBAAKA,UAAU,gCAAf,SAAgDzC,EAAMiiB,WAHlD,cAQNjiB,EAAM2f,WACR+lB,EAAWhmC,KACT,+BACE,2CACA,oBAAI+C,UAAU,+BAAd,SACGgO,EAAmC,IAAlBzQ,EAAM2f,eAHpB,cASZ+lB,EAAWhmC,KACT,+BACE,uCACA,oBAAI+C,UAAU,+BAAd,SACE,qBAAKA,UAAU,gCAAf,SACGzC,EAAM8C,MAAMO,KAAK,YAJhB,gBAUVqiC,EAAWhmC,KACT,+BACE,+BAAKgE,YAAiB4F,GAAtB,OACA,oBAAI7G,UAAU,gBAAd,SAA+BzC,MAFxBsJ,IAQf,OACE,eAAC+yB,GAAD,2BACMhP,GADN,IAEE3F,MAAK,gBAAWhkB,YAAiB4V,EAAOxK,OAF1C,UAIE,+BACE,yCACA,oBAAIrM,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQwf,EAAMtkB,GAAGC,UAAW+e,YAAU,EAACC,MAAI,SAGvD0d,MCtHA,SAASyC,GAAT,GAYH,IAXFp/B,EAWC,EAXDA,GACAzB,EAUC,EAVDA,MACAnE,EASC,EATDA,OACAo5B,EAQC,EARDA,WACAC,EAOC,EAPDA,WAQM/f,EAAO1T,EAAGuQ,OAAOmD,KACvB,OACE,eAAC4f,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,mCACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,yCACA,oBAAI/5B,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ9E,EAAGC,UAAW+e,YAAU,EAACC,MAAI,SAIlD,+BACE,yCACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ,IAAI4M,IAAUgC,EAAK/O,SAAUqa,YAAU,EAACC,MAAI,SAIjE,+BACE,sCACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ,IAAI4M,IAAUgC,EAAKtB,MAAO4M,YAAU,EAACC,MAAI,SAI9D,+BACE,wCACA,oBAAIvlB,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ,IAAI4M,IAAUgC,EAAK2rB,QAASrgB,YAAU,EAACC,MAAI,Y,aCjChEqgB,GAAcC,UAAOC,MAAMC,OAAOtyB,QACtC,SAACuyB,GAAD,MAA0B,cAAfA,EAAM5nC,QAIf6nC,GAAwE,GAC5E,SAASC,GACPxrC,EACA2oC,GAEA,GAAIA,EAAU38B,aAAcu/B,GAC1B,OAAOA,GAAiB5C,EAAU38B,YAEpC,IACMy/B,EADa,IAAIzoC,IAAWhD,GACIwrC,eAAe7C,GAErD,OADA4C,GAAiB5C,EAAU38B,YAAcy/B,EAClCA,EAGT,SAASC,GAAgB7/B,GACvB,IAAM8/B,EAAWT,GAAYnyB,QAAO,SAACuyB,GAAD,OAClCA,EAAMM,eAAej7B,OAAO9E,MAE9B,GAAI8/B,EAASjpC,OACX,OAAOipC,EAAS,GAIb,IAAME,GAAqB,SAACz7B,GACjC,OAAO86B,GACJv/B,KAAI,SAAC2/B,GAAD,OAAWA,EAAMM,eAAe5/B,cACpCd,SAASkF,EAAYvE,UAAUG,aAGvBsmB,GAAgD,CAC3DC,EAAG,iBACHC,EAAG,mBACHC,EAAG,UACHC,EAAG,WACHC,EAAG,gBACHC,EAAG,cACHI,EAAG,SACHC,EAAG,cACHC,EAAG,iBACH4D,EAAG,iBACHC,GAAI,YACJC,GAAI,gBACJC,GAAI,iBACJC,GAAI,4BACJC,GAAI,kBACJC,GAAI,gBACJ0U,GAAI,mBACJC,GAAI,gBACJC,GAAI,YACJC,GAAI,cACJC,GAAI,kBACJC,GAAI,iBACJC,GAAI,YACJC,GAAI,eACJC,GAAI,wBACJC,GAAI,wBACJC,GAAI,yBACJC,GAAI,wBACJC,GAAI,sBACJC,GAAI,aACJC,GAAI,wBACJC,GAAI,yBACJC,GAAI,qBACJC,GAAI,aACJC,GAAI,sBACJC,GAAI,cACJC,GAAI,eACJC,GAAI,0BAGOC,GAA6B,SACxCh9B,GAEA,IAAM2iB,EAAO3iB,EAAYa,KAAK,GAE9B,KAAM8hB,KAAQT,IACZ,MAAM,IAAIhvB,MAAJ,+CAAkDyvB,IAE1D,OAAOT,GAAmBS,IAoDfsa,GAAuB,SAClCzhC,GAEA,IAAMwO,EAAUkzB,0BAAuBp8B,OAAOtF,EAAGqF,MAYjD,MAXuC,CACrC0jB,KAAMva,EAAQmzB,eAAe5Y,KAAKlyB,WAClCmyB,WAAYxa,EAAQmzB,eAAe3Y,WAAWkJ,WAC9C0P,gBAAiBpzB,EAAQmzB,eAAeC,gBAAgB1P,WACxD2P,iBAAkBrzB,EAAQmzB,eAAeE,iBAAiB3P,WAC1D4P,kBAAmBtzB,EAAQmzB,eAAeG,kBAC1C5Y,UAAW1a,EAAQmzB,eAAezY,UAAUryB,WAC5CsyB,SAAU3a,EAAQmzB,eAAexY,SAAStyB,WAC1Cga,MAAOrC,EAAQmzB,eAAe9wB,MAAMha,aAW3BkrC,GAAwB,SACnC/hC,GAEA,IAAMwO,EAAUkzB,0BAAuBp8B,OAAOtF,EAAGqF,MAKjD,MAJyC,CACvC6kB,QAAS1b,EAAQwzB,gBAAgB9X,QAAQrzB,WACzCkyB,KAAMva,EAAQwzB,gBAAgBjZ,KAAKlyB,aAY1BorC,GAAuB,SAClCjiC,GAEA,IAAMwO,EAAUkzB,0BAAuBp8B,OAAOtF,EAAGqF,MASjD,MARuC,CACrCod,MAAOjU,EAAQ0zB,eAAezf,MAAMyP,WACpCiQ,SAAU3zB,EAAQ0zB,eAAeC,SAASjQ,WAC1CkQ,cAAe5zB,EAAQ0zB,eAAeE,cAAcvrC,WACpDkyB,KAAMva,EAAQ0zB,eAAenZ,KAAKlyB,WAClCqyB,UAAW1a,EAAQ0zB,eAAehZ,UAAUryB,aAWnCwrC,GAAwB,SACnCriC,GAEA,IAAMwO,EAAUkzB,0BAAuBp8B,OAAOtF,EAAGqF,MAKjD,MAJyC,CACvC6kB,QAAS1b,EAAQ8zB,gBAAgBpY,QAAQrzB,WACzC0rC,YAAa/zB,EAAQ8zB,gBAAgBC,YAAY1rC,aA0BxC2rC,GAA+B,SAC1CxiC,GAEA,IAAMwO,EAAUkzB,0BAAuBp8B,OAAOtF,EAAGqF,MAuBjD,MAtBuD,CACrDo9B,oBAAqBj0B,EAAQk0B,uBAAuBD,oBACpDE,cAAen0B,EAAQk0B,uBAAuBC,cAAc9rC,WAC5D+rC,mBAAoBp0B,EAAQk0B,uBAAuBE,mBACnDC,aAAcr0B,EAAQk0B,uBAAuBG,aAAahsC,WAC1DisC,qBAAsBt0B,EAAQk0B,uBAAuBI,qBACrDC,eAAgBv0B,EAAQk0B,uBAAuBK,eAAelsC,WAC9DmsC,eAAgBx0B,EAAQk0B,uBAAuBM,eAC/CC,SAAUz0B,EAAQk0B,uBAAuBO,SAASpsC,WAClDqsC,eAAgB10B,EAAQk0B,uBAAuBQ,eAC/CC,SAAU30B,EAAQk0B,uBAAuBS,SAAStsC,WAClDusC,WAAY50B,EAAQk0B,uBAAuBU,WAC3CC,KAAM70B,EAAQk0B,uBAAuBW,KAAKxsC,WAC1CysC,kBAAmB90B,EAAQk0B,uBAAuBY,kBAClDC,YAAa/0B,EAAQk0B,uBAAuBa,YAAY1sC,WACxD2sC,yBACEh1B,EAAQk0B,uBAAuBc,yBACjCC,mBACEj1B,EAAQk0B,uBAAuBe,mBAAmB5sC,WACpD6sC,oBAAqBl1B,EAAQk0B,uBAAuBgB,oBACpDC,cAAen1B,EAAQk0B,uBAAuBiB,cAAc9sC,aAenD+sC,GAAsB,SACjC5jC,GAEA,IAAMwO,EAAUkzB,0BAAuBp8B,OAAOtF,EAAGqF,MAUjD,MATqC,CACnCw+B,YAAar1B,EAAQs1B,cAAcD,YAAY3R,WAC/CyQ,cAAen0B,EAAQs1B,cAAcnB,cAAczQ,WACnD2Q,aAAcr0B,EAAQs1B,cAAcjB,aAAa3Q,WACjD6Q,eAAgBv0B,EAAQs1B,cAAcf,eAAe7Q,WACrD6R,YAAav1B,EAAQs1B,cAAcC,YAAY7R,WAC/C8R,YAAax1B,EAAQs1B,cAAcE,YAAY9R,WAC/C+R,QAASz1B,EAAQs1B,cAAcG,QAAQ/R,aAoB9BgS,GAAsB,SACjClkC,GAEA,IAAMwO,EAAUkzB,0BAAuBp8B,OAAOtF,EAAGqF,MAejD,MAdqC,CACnCw+B,YAAar1B,EAAQ21B,cAAcN,YAAY3R,WAC/CyQ,cAAen0B,EAAQ21B,cAAcxB,cAAczQ,WACnD2Q,aAAcr0B,EAAQ21B,cAActB,aAAa3Q,WACjD6Q,eAAgBv0B,EAAQ21B,cAAcpB,eAAe7Q,WACrD+Q,SAAUz0B,EAAQ21B,cAAclB,SAAS/Q,WACzCiR,SAAU30B,EAAQ21B,cAAchB,SAASjR,WACzCrK,YAAarZ,EAAQ21B,cAActc,YAAYqK,WAC/CpK,aAActZ,EAAQ21B,cAAcrc,aAAaoK,WACjDmR,KAAM70B,EAAQ21B,cAAcd,KAAKnR,WACjCqR,YAAa/0B,EAAQ21B,cAAcZ,YAAYrR,WAC/CuR,mBAAoBj1B,EAAQ21B,cAAcV,mBAAmBvR,WAC7DyR,cAAen1B,EAAQ21B,cAAcR,cAAczR,aAgBhD,SAASkS,GACdpkC,EACAqkC,GAEA,IAAMC,EAAcxE,GAAgB9/B,EAAGC,WACvC,QAAoB/K,IAAhBovC,EAAJ,CAGA,IAAMC,EAAoBD,EAAYE,YAAYr3B,QAAO,SAACs3B,GAAD,OACvDJ,EAAWv/B,OAAOC,OAAO0/B,EAAgB1H,cAE3C,OAAIwH,EAAkBztC,OACbytC,EAAkB,QAD3B,GAKK,SAAeG,GAAtB,uC,gDAAO,WACLzkC,EACA7L,EACAuwC,GAHK,kBAAAztC,EAAA,yDAKCC,EAAa,IAAIC,IAAWhD,QAEdc,KADdovC,EAAcxE,GAAgB7/B,IAN/B,iEAUQ2kC,UAAOC,KAClB1tC,EACAwtC,EAAsB5H,eACtB7nC,EACAovC,EAAYhX,gBAdT,oF,sBAkBA,SAASwX,GACd9kC,EACA+kC,GAEA,IAAMT,EAAcxE,GAAgB9/B,EAAGC,WACvC,QAAoB/K,IAAhBovC,EAAJ,CAGA,IAAMU,EAAoBV,EAAYW,YAAY93B,QAAO,SAAC+3B,GAAD,OACvDH,EAAWjgC,OAAOC,OAAOmgC,EAAgBnI,cAE3C,OAAIiI,EAAkBluC,OACbkuC,EAAkB,QAD3B,GAKK,SAAeG,GAAtB,qC,gDAAO,WACL/wC,EACAgxC,GAFK,kBAAAluC,EAAA,sEAIa0oC,GAAexrC,EAAYgxC,EAAsBrI,WAJ9D,cAICsI,EAJD,OAKC72B,EAAU82B,oBAAiBhgC,OAAjB,OAAwB+/B,QAAxB,IAAwBA,OAAxB,EAAwBA,EAAKhgC,MALxC,kBAOE,IAAIkgC,cACTH,EAAsBrI,UACtBqI,EAAsBI,aACtBJ,EAAsBK,cACtBj3B,IAXG,4C,sBAeA,SAASk3B,GACd1lC,EACA6jC,GAEA,IAAMS,EAAcxE,GAAgB9/B,EAAGC,WACvC,QAAoB/K,IAAhBovC,EAAJ,CAGA,IAAMC,EAAoBD,EAAYE,YAAYr3B,QAChD,SAACw4B,GAAD,OAAsBA,EAAiB9B,cAAgBA,KAEzD,OAAKU,EAAkBztC,OAGhBytC,EAAkB,GAAGzsC,KAFnB,WCvaJ,SAAS8tC,GAAqBthB,GAMjC,IACMtkB,EAA8CskB,EAA9CtkB,GAAIzB,EAA0C+lB,EAA1C/lB,MAAOnE,EAAmCkqB,EAAnClqB,OAAQo5B,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAEvC,OACE,cAACH,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,mBACN6U,WAAYA,EACZC,WAAYA,I,yBCdX,SAASoS,GAAyBvhB,GAOrC,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAE7C,OACE,eAACH,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,uBACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,8CACA,oBAAI/5B,UAAU,gBAAd,SAA+Bga,EAAKmwB,iBAEtC,+BACE,sDACA,oBAAInqC,UAAU,gBAAd,SAA+Bga,EAAKivB,mBAEtC,+BACE,kDACA,oBAAIjpC,UAAU,gBAAd,SAA+Bga,EAAKmvB,kBAEtC,+BACE,iDACA,oBAAInpC,UAAU,gBAAd,SAA+Bga,EAAKqvB,oBAEtC,+BACE,2CACA,oBAAIrpC,UAAU,gBAAd,SAA+Bga,EAAKuvB,cAEtC,+BACE,2CACA,oBAAIvpC,UAAU,gBAAd,SAA+Bga,EAAKyvB,cAEtC,+BACE,+CACA,oBAAIzpC,UAAU,gBAAd,SAA+Bga,EAAKmU,iBAEtC,+BACE,gDACA,oBAAInuB,UAAU,gBAAd,SAA+Bga,EAAKoU,kBAEtC,+BACE,sCACA,oBAAIpuB,UAAU,gBAAd,SAA+Bga,EAAK2vB,UAEtC,+BACE,+CACA,oBAAI3pC,UAAU,gBAAd,SAA+Bga,EAAK6vB,iBAEtC,+BACE,0CACW,IACRuC,KAAOC,SAASryB,EAAK+vB,mBAAoB,WAAWxpC,cAEvD,qBAAIP,UAAU,gBAAd,UACGga,EAAKiwB,cADR,aCjED,SAASqC,GAAyB1hB,GAOrC,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAE7C,OACE,eAACH,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,uBACN6U,WAAYA,EACZC,WAAYA,EANd,UAQiD,YAA9CiS,GAAoB1lC,EAAI0T,EAAKmwB,cAC5B,+BACE,wCACA,oBAAInqC,UAAU,gBAAd,SACGgsC,GAAoB1lC,EAAI0T,EAAKmwB,kBAIpC,+BACE,8CACA,oBAAInqC,UAAU,gBAAd,SAA+Bga,EAAKmwB,iBAEtC,+BACE,gDACA,oBAAInqC,UAAU,gBAAd,SAA+Bga,EAAKivB,mBAEtC,+BACE,+CACA,oBAAIjpC,UAAU,gBAAd,SAA+Bga,EAAKmvB,kBAEtC,+BACE,iDACA,oBAAInpC,UAAU,gBAAd,SAA+Bga,EAAKqvB,oBAEtC,+BACE,8CACA,oBAAIrpC,UAAU,gBAAd,SAA+Bga,EAAKqwB,iBAEtC,+BACE,8CACA,oBAAIrqC,UAAU,gBAAd,SAA+Bga,EAAKswB,iBAEtC,+BACE,0CACA,oBAAItqC,UAAU,gBAAd,SAA+Bga,EAAKuwB,gBCpDrC,SAASgC,GAA2B3hB,GAOvC,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WACvCyS,EAAelmC,EAAGyE,KAAK,GACvB0hC,EAAwBnmC,EAAGyE,KAAK,GAChC2gC,EAAwBN,GAC5B9kC,EACAmmC,GAGF,OACE,eAAC7S,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,yBACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,+CACA,6BACE,cAAC1U,GAAD,CAASja,OAAQohC,EAAaphC,OAAQka,YAAU,EAACC,MAAI,cAI9B/pB,IAA1BkwC,GACC,+BACE,6CACA,oBAAI1rC,UAAU,gBAAd,SAA+B0rC,EAAsBttC,UAIzD,+BACE,qDACA,6BACE,cAACinB,GAAD,CAASja,OAAQqhC,EAAsBrhC,OAAQka,YAAU,EAACC,MAAI,SAIlE,+BACE,0CACA,oBAAIvlB,UAAU,gBAAd,SAA+Bga,EAAKwW,gBChDrC,SAASkc,GAA2B9hB,GAOvC,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WACvCyS,EAAelmC,EAAGyE,KAAK,GACvB4hC,EAAwBrmC,EAAGyE,KAAK,GAChCkgC,EAAwBP,GAC5BpkC,EACAqmC,GAGF,OACE,eAAC/S,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,yBACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,+CACA,6BACE,cAAC1U,GAAD,CAASja,OAAQohC,EAAaphC,OAAQka,YAAU,EAACC,MAAI,cAI9B/pB,IAA1ByvC,GACC,+BACE,6CACA,oBAAIjrC,UAAU,gBAAd,SAA+BirC,EAAsB7sC,UAIzD,+BACE,qDACA,6BACE,cAACinB,GAAD,CAASja,OAAQuhC,EAAsBvhC,OAAQka,YAAU,EAACC,MAAI,SAIlE,+BACE,0CACA,oBAAIvlB,UAAU,gBAAd,SAA+Bga,EAAKwW,gBC1CrC,SAASoc,GAAkChiB,GAO9C,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAGvC2R,EAAwBN,GAC5B9kC,EAF4BA,EAAGyE,KAAK,IAMhChR,EAAUkE,cATf,EAUmDlC,mBAClD,MAXD,mBAUMguC,EAVN,KAU0B8C,EAV1B,KA+BD,OAlBA/vC,qBAAU,WAAM,8CACd,6BAAAU,EAAA,8DACgChC,IAA1BkwC,EADN,iEAIgCD,GAC5B1xC,EAAQoE,IACRutC,GANJ,OAIQF,EAJR,OASEqB,EACErB,EAAgBsB,oBAAoB/C,mBAAmBvR,YAV3D,4CADc,uBAAC,WAAD,wBAeduU,KACC,CAAChzC,EAAQoE,IAAKutC,IAGf,eAAC9R,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,gCACN6U,WAAYA,EACZC,WAAYA,EANd,UAQG/f,EAAKkvB,oBACJ,+BACE,+CACA,oBAAIlpC,UAAU,gBAAd,SAA+Bga,EAAKmvB,kBAGvCnvB,EAAKovB,sBACJ,+BACE,iDACA,oBAAIppC,UAAU,gBAAd,SAA+Bga,EAAKqvB,oBAGvCrvB,EAAK+uB,qBACJ,+BACE,gDACA,oBAAI/oC,UAAU,gBAAd,SAA+Bga,EAAKivB,mBAGvCjvB,EAAKsvB,gBACJ,+BACE,2CACA,oBAAItpC,UAAU,gBAAd,SAA+Bga,EAAKuvB,cAGvCvvB,EAAKgwB,qBACJ,+BACE,0CACW,IACe,OAAvBD,GACCqC,KAAOC,SAAStC,EAAoB,WAAWxpC,cAEnD,qBAAIP,UAAU,gBAAd,UACGga,EAAKiwB,cADR,UAMHjwB,EAAK4vB,mBACJ,+BACE,+CACA,oBAAI5pC,UAAU,gBAAd,SAA+Bga,EAAK6vB,iBAGvC7vB,EAAK0vB,YACJ,+BACE,sCACA,oBAAI1pC,UAAU,gBAAd,SAA+Bga,EAAK2vB,UAGvC3vB,EAAKwvB,gBACJ,+BACE,2CACA,oBAAIxpC,UAAU,gBAAd,SAA+Bga,EAAKyvB,cAGvCzvB,EAAK8vB,0BACJ,+BACE,sDACA,oBAAI9pC,UAAU,gBAAd,SAA+Bga,EAAK+vB,2BC/GvC,SAAStO,GAAyB7Q,GAMrC,IACMtkB,EAA8CskB,EAA9CtkB,GAAIzB,EAA0C+lB,EAA1C/lB,MAAOnE,EAAmCkqB,EAAnClqB,OAAQo5B,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAEjC0S,EAAwBnmC,EAAGyE,KAAK,GAChC2gC,EAAwBN,GAC5B9kC,EACAmmC,GAGF,OACE,eAAC7S,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAO,uBACP6U,WAAYA,EACZC,WAAYA,EANd,eAQ6Bv+B,IAA1BkwC,GACC,+BACE,6CACA,oBAAI1rC,UAAU,gBAAd,SAA+B0rC,EAAsBttC,UAIzD,+BACE,qDACA,6BACE,cAACinB,GAAD,CAASja,OAAQqhC,EAAsBrhC,OAAQka,YAAU,EAACC,MAAI,YCnCjE,SAASynB,GAA8BpiB,GAQ1C,IAEAtkB,EAOEskB,EAPFtkB,GACAzB,EAME+lB,EANF/lB,MACAnE,EAKEkqB,EALFlqB,OACAusC,EAIEriB,EAJFqiB,wBACAhoB,EAGE2F,EAHF3F,MACA6U,EAEElP,EAFFkP,WACAC,EACEnP,EADFmP,WAEIyS,EAAelmC,EAAGyE,KAAKkiC,GAE7B,OACE,cAACrT,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAO,UAAYA,EACnB6U,WAAYA,EACZC,WAAYA,EANd,SAQE,+BACE,+CACA,6BACE,cAAC1U,GAAD,CAASja,OAAQohC,EAAaphC,OAAQka,YAAU,EAACC,MAAI,WC/BxD,SAAS2nB,GAA2BtiB,GASvC,IAEAtkB,EAQEskB,EARFtkB,GACAzB,EAOE+lB,EAPF/lB,MACAnE,EAMEkqB,EANFlqB,OACAusC,EAKEriB,EALFqiB,wBACAE,EAIEviB,EAJFuiB,sBACAloB,EAGE2F,EAHF3F,MACA6U,EAEElP,EAFFkP,WACAC,EACEnP,EADFmP,WAEIyS,EAAelmC,EAAGyE,KAAKkiC,GACvBR,EAAwBnmC,EAAGyE,KAAKoiC,GAChCzB,EAAwBN,GAC5B9kC,EACAmmC,GAGF,OACE,eAAC7S,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAO,UAAYA,EACnB6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,+CACA,6BACE,cAAC1U,GAAD,CAASja,OAAQohC,EAAaphC,OAAQka,YAAU,EAACC,MAAI,cAI9B/pB,IAA1BkwC,GACC,+BACE,6CACA,oBAAI1rC,UAAU,gBAAd,SAA+B0rC,EAAsBttC,UAIzD,+BACE,qDACA,6BACE,cAACinB,GAAD,CAASja,OAAQqhC,EAAsBrhC,OAAQka,YAAU,EAACC,MAAI,YCrDjE,SAAS6nB,GAA2BxiB,GASvC,IAEAtkB,EAQEskB,EARFtkB,GACAzB,EAOE+lB,EAPF/lB,MACAnE,EAMEkqB,EANFlqB,OACA2sC,EAKEziB,EALFyiB,mBACAC,EAIE1iB,EAJF0iB,sBACAroB,EAGE2F,EAHF3F,MACA6U,EAEElP,EAFFkP,WACAC,EACEnP,EADFmP,WAEIyS,EAAelmC,EAAGyE,KAAKsiC,GACvBV,EAAwBrmC,EAAGyE,KAAKuiC,GAChCrC,EAAwBP,GAC5BpkC,EACAqmC,GAGF,OACE,eAAC/S,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAO,UAAYA,EACnB6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,+CACA,6BACE,cAAC1U,GAAD,CAASja,OAAQohC,EAAaphC,OAAQka,YAAU,EAACC,MAAI,cAI9B/pB,IAA1ByvC,GACC,+BACE,6CACA,oBAAIjrC,UAAU,gBAAd,SAA+BirC,EAAsB7sC,UAIzD,+BACE,qDACA,6BACE,cAACinB,GAAD,CAASja,OAAQuhC,EAAsBvhC,OAAQka,YAAU,EAACC,MAAI,YC7CjE,SAASgoB,GAA0B3iB,GAOtC,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WACvCyS,EAAelmC,EAAGyE,KAAK,GACvB0hC,EAAwBnmC,EAAGyE,KAAK,GAChC2gC,EAAwBN,GAC5B9kC,EACAmmC,GAGI1yC,EAAUkE,cATf,EAWClC,mBAAiC,MAXlC,mBAUMyxC,EAVN,KAUuBC,EAVvB,KAmCD,OAvBA3wC,qBAAU,WAAM,8CACd,iCAAAU,EAAA,8DACgChC,IAA1BkwC,EADN,iEAIgCD,GAC5B1xC,EAAQoE,IACRutC,GANJ,OAIQF,EAJR,OAQQtD,EAAkBsD,EAAgBkC,iBACtC,IAAI7yB,KAAGb,EAAKyuB,SAAStrC,aAEjBmyB,EAAakc,EAAgBmC,kBACjC,IAAI9yB,KAAGb,EAAK+O,MAAM5rB,aAEpBswC,EAAmB,CACjB1kB,MAAOuG,EACPse,KAAM1F,IAhBV,4CADc,uBAAC,WAAD,wBAoBd2F,KACC,CAAC9zC,EAAQoE,IAAK6b,EAAKyuB,SAAUzuB,EAAK+O,MAAO2iB,IAG1C,eAAC9R,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,wBACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,+CACA,+BACG,IACD,cAAC1U,GAAD,CAASja,OAAQohC,EAAaphC,OAAQka,YAAU,EAACC,MAAI,eAI9B/pB,IAA1BkwC,GACC,+BACE,6CACA,oBAAI1rC,UAAU,gBAAd,SAA+B0rC,EAAsBttC,UAIzD,+BACE,qDACA,6BACE,cAACinB,GAAD,CAASja,OAAQqhC,EAAsBrhC,OAAQka,YAAU,EAACC,MAAI,SAI1C,MAAvBvL,EAAK0uB,eACJ,+BACE,iDACA,oBAAI1oC,UAAU,gBAAd,SAA+Bga,EAAK0uB,mBAIxC,+BACE,4CACA,oBAAI1oC,UAAU,gBAAd,SAA+Bga,EAAKwV,eAEtC,+BACE,sCACA,oBAAIxvB,UAAU,gBAAd,SAA+Bga,EAAKqV,UAGjB,OAApBme,GACC,+BACE,uCACA,qBAAIxtC,UAAU,gBAAd,iBAA+BwtC,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAiBzkB,MAAhD,cAIiB,OAApBykB,GACC,+BACE,0CACA,oBAAIxtC,UAAU,gBAAd,gBAA+BwtC,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAiBI,aCnGnD,SAASE,GAA0BljB,GAOtC,IACMtkB,EAAoDskB,EAApDtkB,GAAIzB,EAAgD+lB,EAAhD/lB,MAAOnE,EAAyCkqB,EAAzClqB,OAAQsZ,EAAiC4Q,EAAjC5Q,KAAM8f,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WACvCyS,EAAelmC,EAAGyE,KAAK,GACvB4hC,EAAwBrmC,EAAGyE,KAAK,GAChCkgC,EAAwBP,GAC5BpkC,EACAqmC,GAGI5yC,EAAUkE,cATf,EAWClC,mBAAiC,MAXlC,mBAUMyxC,EAVN,KAUuBC,EAVvB,KA6CD,OAjCA3wC,qBAAU,WAAM,8CACd,iCAAAU,EAAA,8DACgChC,IAA1ByvC,EADN,iEAIgCD,GAC5B1kC,EAAGC,UACHxM,EAAQoE,IACR8sC,GAPJ,eAS0BzvC,KALlBuvC,EAJR,yDAYQ7C,EAAkB6C,EAAgBgD,qBACtC,IAAIlzB,KAAGb,EAAKkuB,gBAAgB/qC,aAExBmyB,EAAayb,EAAgB4C,kBACjC,IAAI9yB,KAAGb,EAAKsV,WAAWnyB,aAEzBswC,EAAmB,CACjB1kB,MAAOuG,EACPse,KAAM1F,IApBV,6CADc,uBAAC,WAAD,wBAwBd2F,KACC,CACD9zC,EAAQoE,IACR6b,EAAKkuB,gBACLluB,EAAKsV,WACLhpB,EAAGC,UACH0kC,IAIA,eAACrR,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAM,wBACN6U,WAAYA,EACZC,WAAYA,EANd,UAQE,+BACE,+CACA,+BACG,IACD,cAAC1U,GAAD,CAASja,OAAQohC,EAAaphC,OAAQka,YAAU,EAACC,MAAI,eAI9B/pB,IAA1ByvC,GACC,+BACE,6CACA,oBAAIjrC,UAAU,gBAAd,SAA+BirC,EAAsB7sC,UAIzD,+BACE,qDACA,6BACE,cAACinB,GAAD,CAASja,OAAQuhC,EAAsBvhC,OAAQka,YAAU,EAACC,MAAI,SAIlE,+BACE,4CACA,oBAAIvlB,UAAU,gBAAd,SAA+Bga,EAAKwV,eAGnB,MAAlBxV,EAAKyV,UACJ,+BACE,2CACA,oBAAIzvB,UAAU,gBAAd,SAA+Bga,EAAKyV,cAIxC,+BACE,sCACA,oBAAIzvB,UAAU,gBAAd,SAA+Bga,EAAKqV,UAGjB,OAApBme,GACC,+BACE,6CAEA,qBAAIxtC,UAAU,gBAAd,iBAA+BwtC,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAiBzkB,MAAhD,cAIiB,OAApBykB,GACC,+BACE,sCACA,oBAAIxtC,UAAU,gBAAd,gBAA+BwtC,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAiBI,aCjGnD,SAASI,GAAiBpjB,GAO7B,IAKE3F,EAJI3e,EAAyDskB,EAAzDtkB,GAAIzB,EAAqD+lB,EAArD/lB,MAAOnE,EAA8CkqB,EAA9ClqB,OAAQuV,EAAsC2U,EAAtC3U,UAAW6jB,EAA2BlP,EAA3BkP,WAAYC,EAAenP,EAAfmP,WAE1C57B,EAAQF,cAARE,IAGR,IAGE,OAFA8mB,EAAQ6iB,GAA2BxhC,IAGjC,IAAK,mBAQL,IAAK,UAQL,IAAK,WAQL,IAAK,qBACH,OACE,cAAC0mC,GAAD,aACEC,wBAAyB,EACzBhoB,MAAOA,GACH2F,IAGV,IAAK,iBACH,OACE,cAACkjB,GAAD,aACE9zB,KAAM+tB,GAAqBzhC,IACvBskB,IAGV,IAAK,kBACH,OACE,cAAC8hB,GAAD,aACE1yB,KAAMquB,GAAsB/hC,IACxBskB,IAGV,IAAK,gBACH,OACE,cAACuhB,GAAD,aAA0BnyB,KAAMwwB,GAAoBlkC,IAASskB,IAEjE,IAAK,iBACH,OACE,cAAC2iB,GAAD,aACEvzB,KAAMuuB,GAAqBjiC,IACvBskB,IAGV,IAAK,gBACH,OAAO,cAAC,GAAD,eAA8BA,IACvC,IAAK,kBACH,OACE,cAAC2hB,GAAD,aACEvyB,KAAM2uB,GAAsBriC,IACxBskB,IAGV,IAAK,cACH,OACE,cAACwiB,GAAD,aACEC,mBAAoB,EACpBC,sBAAuB,EACvBroB,MAAOA,GACH2F,IAGV,IAAK,aACH,OACE,cAACsiB,GAAD,aACED,wBAAyB,EACzBE,sBAAuB,EACvBloB,MAAOA,GACH2F,IAGV,IAAK,yBACH,OACE,cAACgiB,GAAD,aACE5yB,KAAM8uB,GAA6BxiC,IAC/BskB,IAGV,IAAK,YACH,OAAO,cAACshB,GAAD,eAA0BthB,IACnC,IAAK,gBACH,OACE,cAAC0hB,GAAD,aAA0BtyB,KAAMkwB,GAAoB5jC,IAASskB,KAGnE,MAAOhoB,GACP/E,aAAY+E,EAAO,CACjBzE,IAAKA,EACL8X,UAAWA,IAIf,OACE,cAAC2jB,GAAD,CACEtzB,GAAIA,EACJzB,MAAOA,EACPnE,OAAQA,EACRukB,MAAK,iBAAYA,GAAS,WAC1B6U,WAAYA,EACZC,WAAYA,EACZF,YAAU,ICxGT,SAASoU,GAAT,GAA6D,IAAD,IAA7Bh4B,EAA6B,EAA7BA,UAC9Bhb,EAASy8B,GAAqBzhB,GAC9BxB,EAAUqY,GAAsB7W,GAC9Blc,EAAYkE,cAAZlE,QACF8yB,EAAeD,KAGrB,KAAI,OAAC3xB,QAAD,IAACA,GAAD,UAACA,EAAQ0Q,YAAT,aAAC,EAAcqO,SAAQ,OAACvF,QAAD,IAACA,GAAD,UAACA,EAAS9I,YAAV,aAAC,EAAeghB,aAAa,OAAO,KAPE,IASzDA,EAAgBlY,EAAQ9I,KAAKghB,YAA7BA,YACAja,EAAS+B,EAAQ9I,KAAKghB,YAAtBja,KAER,GAAgD,IAA5Cia,EAAY9pB,QAAQuD,aAAahJ,OACnC,OAAO,cAACktB,GAAD,CAAWC,MARG,kBAAMsC,EAAa5W,IAQC9Q,KAAK,0BAGhD,IAAM+oC,EAEF,IAGE,OAAJx7B,QAAI,IAAJA,OAAA,EAAAA,EAAMw7B,qBACLn0C,IAAYF,IAAQI,aACnBwa,EAAQ9I,KAAKghB,YAAYjQ,MAAQyxB,KAEnCz7B,EAAKw7B,kBAAkBnpC,SAAQ,SAAC8R,GACzBq3B,EAAkBr3B,EAAOhS,SAC5BqpC,EAAkBr3B,EAAOhS,OAAS,IAGpCgS,EAAOzQ,aAAarB,SAAQ,SAACuB,GAC3B4nC,EAAkBr3B,EAAOhS,OAAO5H,KAAKqJ,SAK3C,IAAM5F,EAASzF,EAAO0Q,KAAKqO,KAAKtZ,OAC1B0tC,EAAqBzhB,EAAY9pB,QAAQuD,aAAaC,KAC1D,SAACyE,EAAajG,GACZ,IAAIi1B,EAA4B,GAqBhC,OAnBIj1B,KAASqpC,GACXA,EAAkBrpC,GAAOE,SAAQ,SAACuB,EAAIyzB,GACR,kBAAjBzzB,EAAGC,YACZD,EAAGC,UAAY,IAAIyR,IAAU1R,EAAGC,YAGlC,IAAIib,EAAM6sB,GAAsB,CAC9BxpC,QACAyB,KACA5F,SACAuV,YACApS,GAAI8oB,EACJoN,eAGFD,EAAW78B,KAAKukB,MAIb6sB,GAAsB,CAC3BxpC,QACAyB,GAAIwE,EACJpK,SACAuV,YACApS,GAAI8oB,EACJmN,kBAKN,OACE,qCACE,qBAAK95B,UAAU,YAAf,SACE,qBAAKA,UAAU,SAAf,SACE,qBAAKA,UAAU,cAAf,SACE,oBAAIA,UAAU,OAAd,kCAILouC,KAKP,SAASC,GAAT,GAgBI,IAfF/nC,EAeC,EAfDA,GACAzC,EAcC,EAdDA,GACAnD,EAaC,EAbDA,OACAmE,EAYC,EAZDA,MACAoR,EAWC,EAXDA,UACA6jB,EAUC,EAVDA,WACAC,EASC,EATDA,WAUMlzB,EAAG,UAAMhC,EAAN,YAAek1B,GAExB,GAAI,WAAYzzB,EAAI,CAClB,IAAMskB,EAAQ,CACZ/mB,KACAyC,KACA5F,SACAmE,QACAi1B,aACAC,aACAlzB,OAGF,OAAQP,EAAGyd,SACT,IAAK,YACH,OAAO,cAAC0e,GAAD,eAAsB7X,IAC/B,IAAK,aACH,OAAO,cAACsQ,GAAD,eAA0BtQ,IACnC,IAAK,yBACH,OAAO,cAACia,GAAD,eAAqCja,IAC9C,IAAK,SACH,OAAO,cAAC6U,GAAD,eAAuB7U,IAChC,IAAK,QACH,OAAO,cAAC2S,GAAD,eAAsB3S,IAC/B,IAAK,WACH,OAAO,cAACyQ,GAAD,eAAqBzQ,IAC9B,IAAK,+BACH,OAAO,cAAC8a,GAAD,eAAgC9a,IACzC,IAAK,OACH,OAAO,cAAC6a,GAAD,eAAqB7a,IAC9B,QACE,OAAO,cAACqQ,GAAD,eAAwBrQ,KAIrC,IAAM0jB,EAAgBzjC,YAA2BhH,EAAIyC,GAErD,IAAKgoC,EACH,OACE,cAAChkB,GAAD,CAEEnlB,KAAK,qDADA0B,GAMX,I9BvLAiE,E8BuLM8f,EAAQ,CACZtkB,GAAIgoC,EACJ5tC,SACAmE,QACAoR,YACA6jB,aACAC,cAGF,OAAIrD,GAAwB4X,GACnB,cAACpK,GAAD,eAAqCtZ,GAAT/jB,GAC1B0/B,GAAmB+H,GACrB,cAACN,GAAD,eAAgCpjB,GAAT/jB,GACrBwqB,GAAmBid,GACrB,cAACzS,GAAD,eAAgCjR,GAAT/jB,GACrB0mB,GAAuB+gB,GACzB,cAAC7K,GAAD,eAAoC7Y,GAAT/jB,GACzBgnB,GAA0BygB,GAC5B,cAAC9K,GAAD,eAAuC5Y,GAAT/jB,I9BzMvCiE,E8B0MiCwjC,E9BxM1BvhB,GAAYnnB,SAASkF,EAAYvE,UAAUG,Y8ByMzC,cAACg9B,GAAD,eAAmC9Y,GAAT/jB,GAE1B,cAACo0B,GAAD,eAAkCrQ,GAAT/jB,IC1NpC,IAAM0nC,GAA+C,IAAIn/B,IAAI,CAC3D,CAAC,eAAgB,kBACjB,CAAC,qBAAsB,wBACvB,CACE,kBACA,sEAEF,CAAC,yBAA0B,iDAC3B,CAAC,0BAA2B,8BAC5B,CACE,uBACA,wDAEF,CAAC,mBAAoB,+CACrB,CAAC,oBAAqB,uBACtB,CAAC,mBAAoB,iCACrB,CACE,yBACA,2DAEF,CAAC,sBAAuB,qDACxB,CAAC,mBAAoB,mDACrB,CACE,6BACA,2DAEF,CACE,kBACA,6DAEF,CACE,qBACA,kEAEF,CACE,2BACA,iFAEF,CAAC,mBAAoB,2CAGjBo/B,GAA+C,IAAIp/B,IAAI,CAC3D,CAAC,eAAgB,6BACjB,CAAC,kBAAmB,4BACpB,CAAC,yBAA0B,4BAC3B,CAAC,qBAAsB,wCACvB,CAAC,sBAAuB,0CACxB,CAAC,oBAAqB,sCACtB,CAAC,qBAAsB,wCACvB,CAAC,2BAA4B,8CAC7B,CACE,4BACA,iDAEF,CAAC,uBAAwB,+CACzB,CACE,wBACA,qEAEF,CAAC,oBAAqB,qDACtB,CACE,8BACA,oEAEF,CACE,8BACA,2DAEF,CACE,wBACA,0DAEF,CAAC,uBAAwB,oDACzB,CAAC,wBAAyB,2CAC1B,CAAC,qBAAsB,oDACvB,CAAC,oBAAqB,iDACtB,CAAC,uBAAwB,6CACzB,CAAC,yBAA0B,+CAC3B,CAAC,uBAAwB,8CACzB,CACE,sBACA,kFAEF,CACE,2BACA,mEAEF,CACE,4BACA,+DAEF,CAAC,SAAU,6BACX,CAAC,eAAgB,uCACjB,CAAC,yBAA0B,gDAC3B,CACE,0BACA,2DAEF,CAAC,iCAAkC,2CACnC,CAAC,uBAAwB,0BACzB,CAAC,YAAa,gDACd,CAAC,iBAAkB,qDACnB,CACE,uBACA,wEAEF,CACE,wBACA,yDAEF,CAAC,eAAgB,mDACjB,CAAC,iBAAkB,qCACnB,CAAC,8BAA+B,iCAChC,CACE,sBACA,yEAEF,CACE,iCACA,kDAEF,CAAC,0BAA2B,8BAC5B,CAAC,yBAA0B,6BAC3B,CAAC,YAAa,wBACd,CAAC,qBAAsB,gCACvB,CAAC,eAAgB,wDACjB,CACE,uBACA,8DAEF,CAAC,sBAAuB,yBACxB,CAAC,qBAAsB,iCACvB,CAAC,oBAAqB,sBACtB,CAAC,eAAgB,mCAGnB,SAASq/B,GACP7rC,GAEA,GAAKA,EAAL,CAIA,GAAqB,kBAAVA,EAAoB,CAC7B,IAAMC,EAAU0rC,GAAwBnyC,IAAIwG,GAC5C,GAAIC,EACF,OAAOA,OAEJ,GAAI,qBAAsBD,EAAO,CACtC,IAAM8rC,EAAMH,GAAwBnyC,IAAI,oBAClCuyC,EAAa/rC,EAAK,iBAClBiC,EAAQ8pC,EAAW,GACnB7pC,EAAmB6pC,EAAW,GAEpC,GAAID,EACF,OAAOA,EACJ9zC,QAAQ,MAAOiK,GACfjK,QAAQ,MAOjB,SAA6BgI,GAC3B,IAAI8rC,EACAnxC,EAEJ,GAAqB,kBAAVqF,EAAoB,CAC7B,IAAMC,EAAU2rC,GAAwBpyC,IAAIwG,GAC5C,GAAIC,EACF,OAAOA,MAEA,WAAYD,GACrB8rC,EAAMF,GAAwBpyC,IAAI,UAClCmB,EAAQqF,EAAK,OAAW,IACf,iBAAkBA,IAC3B8rC,EAAMF,GAAwBpyC,IAAI,gBAClCmB,EAAQqF,EAAK,aAAiB,IAGhC,GAAI8rC,GAAOnxC,EACT,OAAOmxC,EAAI9zC,QAAQ,MAAO2C,GAG5B,MAAO,4BA5BeqxC,CAAoB9pC,IAI1C,MAAO,6BA2BF,SAAS+pC,GAAT,GAA2D,IAAD,YACzDp6B,EAAUqY,GAD+C,EAA7B7W,WAE5B64B,EAAW,OAAGr6B,QAAH,IAAGA,GAAH,UAAGA,EAAS9I,YAAZ,iBAAG,EAAeghB,mBAAlB,iBAAG,EAA4Bja,YAA/B,aAAG,EAAkCo8B,YAEhDC,EAAmBN,GAAmB,OAC1Ch6B,QAD0C,IAC1CA,GAD0C,UAC1CA,EAAS9I,YADiC,iBAC1C,EAAeghB,mBAD2B,iBAC1C,EAA4Bja,YADc,aAC1C,EAAkCjQ,KAGpC,OAAMqsC,KAAeA,EAAY1xC,OAAS,IAAO2xC,EAK/C,qCACE,qBAAK/uC,UAAU,YAAf,SACE,qBAAKA,UAAU,SAAf,SACE,qBAAKA,UAAU,cAAf,SACE,oBAAIA,UAAU,oBAAd,+BAIN,qBAAKA,UAAU,OAAf,SACE,qBAAIA,UAAU,eAAd,UACG8uC,GACCA,EAAYzoC,KAAI,SAACxD,EAASgE,GAAV,OACd,6BAAehE,EAAQjI,QAAQ,iBAAkB,KAAxCiM,MAEZkoC,GACC,qBAAI/uC,UAAU,OAAd,iCAA0C+uC,aAnB3C,KCzKX,IAUKC,GARQb,GAAgC,SAMhC5T,GAAmBj/B,IAAMC,cAAc,IAY7C,SAAS0zC,GAAT,GAAqE,IAAD,EACrEh5B,EAD8CxX,EAAuB,EAAlCwX,UAGvC,IAEyB,KADPjT,IAAK4I,OAAOnN,GAChBrB,SACV6Y,EAAYxX,GAEd,MAAOgE,IAET,IAAMxH,EAASy8B,GAAqBzhB,GAVqC,EAYvE3a,IAAMS,SAAS,GAZwD,mBAWlEmzC,EAXkE,KAWzCC,EAXyC,KAcrEC,EAAcJ,GAAYK,SA2B9B,OAzBIH,GAnC4B,EAoC9BE,EAAcJ,GAAYM,WACX,OAANr0C,QAAM,IAANA,GAAA,UAAAA,EAAQ0Q,YAAR,eAAcqO,OAA2C,QAAnC/e,EAAO0Q,KAAKqO,KAAKsd,gBAChD8X,EAAcJ,GAAYO,QAG5Bj0C,IAAMwB,WAAU,WAAO,IAAD,GAEZ,OAAN7B,QAAM,IAANA,OAAA,EAAAA,EAAQA,UAAW8Z,EAAYqC,UAA/B,UACAnc,EAAO0Q,YADP,aACA,EAAaqO,OACsB,IAAnC/e,EAAO0Q,KAAKqO,KAAKsd,eAEjB6X,GAA2B,SAACK,GAAD,OAAaA,EAAU,OAEnD,CAACv0C,IAEJK,IAAMwB,WAAU,YAEN,OAAN7B,QAAM,IAANA,OAAA,EAAAA,EAAQA,UAAW8Z,EAAYkC,UAC/Bm4B,IAAgBJ,GAAYM,WAE5BH,EAA2B,KAE5B,CAACl0C,EAAQm0C,EAAaD,IAGvB,sBAAKnvC,UAAU,kBAAf,UACE,qBAAKA,UAAU,SAAf,SACE,sBAAKA,UAAU,cAAf,UACE,oBAAIA,UAAU,kBAAd,qBACA,oBAAIA,UAAU,eAAd,mCAGWxE,IAAdya,EACC,cAACqU,GAAD,CAAWnlB,KAAI,qBAAgB1G,EAAhB,oBAEf,eAAC87B,GAAiBj9B,SAAlB,CAA2BC,MAAO0Y,EAAlC,UACE,cAACw5B,GAAD,CAAYx5B,UAAWA,EAAWm5B,YAAaA,IAC/C,cAACM,GAAD,CAAcz5B,UAAWA,EAAWm5B,YAAaA,IACjD,cAACzW,GAAD,CAAmB1iB,UAAWA,IAC9B,cAACg4B,GAAD,CAAqBh4B,UAAWA,IAChC,cAAC44B,GAAD,CAAmB54B,UAAWA,UAOxC,SAASw5B,GAAT,GAGuC,IAAD,YAFpCx5B,EAEoC,EAFpCA,UACAm5B,EACoC,EADpCA,YAEMjrB,EAAcwT,KACd18B,EAASy8B,GAAqBzhB,GAC9BxB,EAAUqY,GAAsB7W,GAHF,EAImBhY,cAA/CL,EAJ4B,EAI5BA,oBAA6B+xC,EAJD,EAIP10C,OAuB7B,GApBAK,IAAMwB,WAAU,WACT7B,GAAU00C,IAAkB/1C,IAAcsB,WAC7CipB,EAAYlO,KAEb,CAACA,EAAW05B,IAGfr0C,IAAMwB,WAAU,WACd,GAAIsyC,IAAgBJ,GAAYO,OAAQ,CACtC,IAAIK,EAAiCjmB,aACnC,kBAAMxF,EAAYlO,KAxGI,KA4GxB,OAAO,WACL2T,cAAcgmB,OAGjB,CAACR,EAAajrB,EAAalO,KAG3Bhb,GACAA,EAAOA,SAAW8Z,EAAYkC,UAC7Bm4B,IAAgBJ,GAAYK,SAE9B,OAAO,cAAC9nB,GAAD,IACF,GAAItsB,EAAOA,SAAW8Z,EAAYsC,YACvC,OACE,cAACiT,GAAD,CAAWC,MAAO,kBAAMpG,EAAYlO,IAAY9Q,KAAK,iBAElD,KAAI,UAAClK,EAAO0Q,YAAR,aAAC,EAAaqO,MACvB,YAA4Bxe,IAAxBoC,GAAqCA,EAAsB,EAE3D,cAAC0sB,GAAD,CACEC,MAAO,kBAAMpG,EAAYlO,IACzB9Q,KAAK,YACLslB,QAAO,oDAA+C7sB,EAA/C,qCAIN,cAAC0sB,GAAD,CAAWC,MAAO,kBAAMpG,EAAYlO,IAAY9Q,KAAK,cA/C1B,IAkD5B6U,EAAS/e,EAAO0Q,KAAhBqO,KAiBF61B,EAAG,OAAGp7B,QAAH,IAAGA,GAAH,UAAGA,EAAS9I,YAAZ,iBAAG,EAAeghB,mBAAlB,iBAAG,EAA4Bja,YAA/B,aAAG,EAAkCm9B,IACxCljB,EAAW,OAAGlY,QAAH,IAAGA,GAAH,UAAGA,EAAS9I,YAAZ,iBAAG,EAAeghB,mBAAlB,aAAG,EAA4BA,YAC1ChP,EAAS,OAAGgP,QAAH,IAAGA,OAAH,EAAGA,EAAa9pB,QAAQitC,gBACjCC,EAAW,WACf,IAAKpjB,GAAeA,EAAY9pB,QAAQuD,aAAahJ,OAAS,EAC5D,OAAO,EAGT,IAAMkJ,EAAKuE,YACT8hB,EACAA,EAAY9pB,QAAQuD,aAAa,IAEnC,OACEE,GACAkD,IAAcjD,UAAU8E,OAAO/E,EAAGC,YACc,wBAAhDypC,IAAkBC,sBAAsB3pC,GAZ3B,GAgBjB,OACE,sBAAKtG,UAAU,OAAf,UACE,sBAAKA,UAAU,iCAAf,UACE,oBAAIA,UAAU,oBAAd,sBACA,eAAC,IAAD,CACEsN,GAAItG,YAAY,OAAD,OAAQiP,EAAR,aACfjW,UAAU,4BAFZ,UAIE,sBAAMA,UAAU,wBAJlB,aAOCovC,IAAgBJ,GAAYO,OAC3B,sBAAMvvC,UAAU,iCAEhB,yBACEA,UAAU,uBACVmG,QAAS,kBAAMge,EAAYlO,IAF7B,UAIE,sBAAMjW,UAAU,0BAJlB,gBAUJ,eAAC8G,GAAA,EAAD,WACE,+BACE,2CACA,oBAAI9G,UAAU,gBAAd,SACE,cAACssB,GAAD,CAAWrW,UAAWA,EAAWqP,YAAU,SAI/C,+BACE,wCACA,oBAAItlB,UAAU,gBAAd,SApEa,WACnB,IAAIkwC,EAAc,UACdC,EAAa,UAMjB,OALIn2B,EAAKtZ,OAAO+B,MACdytC,EAAc,UACdC,EAAa,SAIb,oBAAInwC,UAAU,OAAd,SACE,sBAAMA,UAAS,2BAAsBkwC,GAArC,SAAqDC,MA0DpBC,QAGjC,+BACE,2CACA,oBAAIpwC,UAAU,gBAAd,SACsB,gBAAnBga,EAAKkD,UACJ,sBAAMld,UAAU,iBAAhB,SACGgO,EAAkC,IAAjBgM,EAAKkD,aAGzB,cAAC8a,GAAD,CACEF,QAAM,EACNC,OAAK,EACL5yB,KAAK,qDAHP,8BAWN,+BACE,qDACA,oBAAInF,UAAU,+BAAd,SACGga,EAAKyd,oBAAsB,eAIhC,+BACE,+CACA,oBAAIz3B,UAAU,+BAAd,SAA8Cga,EAAKsd,mBAGrD,+BACE,uCACA,oBAAIt3B,UAAU,gBAAd,SACE,cAACwsB,GAAD,CAAM9P,KAAM1C,EAAK0C,KAAM6I,MAAI,SAI9B5H,GACC,+BACE,6BACGoyB,EACC,QAEA,cAAC/X,GAAD,CAAa7yB,KAAK,wFAAlB,gCAKJ,oBAAInF,UAAU,gBAAd,SAA+B2d,OAIlCkyB,GACC,+BACE,2CACA,oBAAI7vC,UAAU,gBAAd,SACE,cAAC,IAAD,CAAYjB,SAAU8wC,eASpC,SAASH,GAAT,GAGuC,IAAD,QAFpCz5B,EAEoC,EAFpCA,UACAm5B,EACoC,EADpCA,YAEM36B,EAAUqY,GAAsB7W,GAChC4W,EAAeD,KACfzI,EAAcwT,KAGdhL,EAAW,OAAGlY,QAAH,IAAGA,GAAH,UAAGA,EAAS9I,YAAZ,iBAAG,EAAeghB,mBAAlB,aAAG,EAA4BA,YAC1C9pB,EAAO,OAAG8pB,QAAH,IAAGA,OAAH,EAAGA,EAAa9pB,QACvB5H,EAASy8B,GAAqBzhB,GASpC,GANA3a,IAAMwB,WAAU,WAAO,IAAD,IACsB,SAAhC,OAAN7B,QAAM,IAANA,GAAA,UAAAA,EAAQ0Q,YAAR,mBAAcqO,YAAd,eAAoBsd,gBAA4B7iB,GAClDoY,EAAa5W,KAEd,CAACA,EAAWxB,EAASxZ,EAAQ4xB,MAE5B,OAAC5xB,QAAD,IAACA,GAAD,UAACA,EAAQ0Q,YAAT,aAAC,EAAcqO,MACjB,OAAO,KACF,GAAIo1B,IAAgBJ,GAAYM,UACrC,OACE,cAAChlB,GAAD,CACEnlB,KAAK,4EACLolB,MAlBgB,kBAAMpG,EAAYlO,MAqBjC,GAAIm5B,IAAgBJ,GAAYO,OACrC,OACE,cAACjlB,GAAD,CAAWnlB,KAAK,8EAEb,IAAKsP,GAAWA,EAAQxZ,SAAW8Z,EAAYkC,SACpD,OAAO,cAACsQ,GAAD,IACF,GAAI9S,EAAQxZ,SAAW8Z,EAAYsC,YACxC,OAAO,cAACiT,GAAD,CAAWC,MA7BG,kBAAMsC,EAAa5W,IA6BC9Q,KAAK,4BACzC,KAAI,UAACsP,EAAQ9I,YAAT,aAAC,EAAcghB,eAAgB9pB,EACxC,OAAO,cAACynB,GAAD,CAAWnlB,KAAK,8BAnCW,IAsC5BuN,EAAS+B,EAAQ9I,KAAKghB,YAAtBja,KACR,IAAKA,EACH,OAAO,cAAC4X,GAAD,CAAWnlB,KAAK,oCAGzB,IAAMq0B,EAAc32B,EAAQ2D,YAAYH,KAAI,SAAC4E,EAASpG,GACpD,IAAMwrC,EAAM39B,EAAK49B,YAAYzrC,GACvB0rC,EAAO79B,EAAK89B,aAAa3rC,GACzBuG,EAASH,EAAQG,OACjBvE,EAAMoE,EAAQG,OAAO1E,WACrB4xB,EAAQ,IAAIlO,aAAUmmB,GAAMnX,MAAM,IAAIhP,aAAUimB,IAEtD,OACE,+BACE,6BACE,cAAChrB,GAAD,CAASja,OAAQA,EAAQma,MAAI,MAE/B,6BACE,cAAC6S,GAAD,CAAcE,MAAOA,EAAOC,OAAK,MAEnC,6BACE,cAAC,IAAD,CAAYx5B,SAAUwxC,MAExB,+BACa,IAAV1rC,GACC,sBAAM7E,UAAU,6BAAhB,wBAEAiL,EAAQQ,UACR,sBAAMzL,UAAU,6BAAhB,sBAEDiL,EAAQM,QACP,sBAAMvL,UAAU,6BAAhB,oBAED6C,EAAQuD,aAAa+E,MAAK,SAAC7E,GAAD,OAAQA,EAAGC,UAAU8E,OAAOD,OACrD,sBAAMpL,UAAU,6BAAhB,0BArBG6G,MA4Bb,OACE,sBAAK7G,UAAU,OAAf,UACE,qBAAKA,UAAU,cAAf,SACE,oBAAIA,UAAU,oBAAd,8BAEF,qBAAKA,UAAU,wBAAf,SACE,wBAAOA,UAAU,yCAAjB,UACE,gCACE,+BACE,oBAAIA,UAAU,aAAd,qBACA,oBAAIA,UAAU,aAAd,0BACA,oBAAIA,UAAU,aAAd,gCACA,oBAAIA,UAAU,aAAd,0BAGJ,uBAAOA,UAAU,OAAjB,SAAyBw5B,a,SA3W9BwV,O,mBAAAA,I,uBAAAA,I,0BAAAA,Q,2BCDQyB,GAAb,WAOE,WAAYC,GAAgD,IAAD,EAkBzD,GAlByD,0BANlDtqC,kBAMkD,EACzDuqC,KAAKvqC,aAAesqC,EAAkB/jB,YAAY9pB,QAAQuD,aAAaC,KACrE,SAACyE,GACC,GAAI,WAAYA,EACd,GAAkC,kBAAvBA,EAAY+L,OACrB/L,EAAY+L,OAAS0D,aAAOzP,EAAY+L,OAAQ8D,SAC3C,GAAkC,kBAAvB7P,EAAY+L,OAC5B,MAAM,IAAI7Y,MAAM,8BAIpB,MAAO,CACL8M,cACA8lC,MAAO,OAKb,UAAIF,EAAkBh+B,YAAtB,aAAI,EAAwBw7B,kBAAmB,CAAC,IAAD,iBAC3BwC,EAAkBh+B,KAAKw7B,mBADI,IAC7C,2BAA4D,CAAC,IAAD,EAAnD0C,EAAmD,SAC1D,EAAAD,KAAKvqC,aAAawqC,EAAM/rC,OAAO+rC,OAAM3zC,KAArC,oBAA6C2zC,EAAMxqC,gBAFR,gCAzBnD,gDAGE,SAAcsqC,GACZ,OAAO,IAAID,EAAqBC,OAJpC,KAiCO,SAASG,GACdvqC,EACAoR,GAEA,IACE,IACcgrB,EADCnoB,aAAOjU,EAAGuQ,OAAQ8D,IACzBtO,KACFA,EAAOkO,aAAOmoB,EAASxB,IAC7B,OAAOsB,GAAUn2B,GACjB,MAAO5J,GAEP,OADA5E,aAAY4E,EAAK,CAAEwT,UAAWyB,EAAczB,YACrC,WAIJ,SAAS66B,GACdnkB,EACArmB,EACAoR,GAEA,IAEIq5B,EAFA3yC,EAAO,UAUX,IAPA,OAAIuuB,QAAJ,IAAIA,OAAJ,EAAIA,EAAaA,eACfokB,EAAyBlmC,YACvB8hB,EAAYA,YACZrmB,IAIA,WAAYA,EAAI,CAClB,GAAmB,cAAfA,EAAGyd,QAGL,OAFA3lB,EAAOyyC,GAA+BvqC,EAAIoR,QAIvC,GACLq5B,GACAra,GAAwBqa,GAExB,IACE3yC,EAAOw4B,GAAgCma,GACvC,MAAOnuC,GAEP,YADA/E,aAAY+E,EAAO,CAAEqT,UAAWyB,EAAczB,iBAG3C,GACL86B,GACA1f,GAAmB0f,GAEnB,IACE3yC,EAAO6zB,GAA2B8e,GAClC,MAAOnuC,GAEP,YADA/E,aAAY+E,EAAO,CAAEqT,UAAWyB,EAAczB,iBAG3C,GACL86B,GACAxjB,GAAuBwjB,GAEvB,IACE3yC,EAAOovB,GAA+BujB,GACtC,MAAOnuC,GAEP,YADA/E,aAAY+E,EAAO,CAAEqT,UAAWyB,EAAczB,iBAG3C,GACL86B,GACAljB,GAA0BkjB,GAE1B,IACE3yC,EAAO0vB,GAAkCijB,GACzC,MAAOnuC,GAEP,YADA/E,aAAY+E,EAAO,CAAEqT,UAAWyB,EAAczB,gBAG3C,CACL,KACE3P,EAAG0E,SAAS+K,WAAU,SAAC9K,GAAD,OAAaA,EAAQI,OAAO8O,QAAsB,GAIxE,OAFA/b,EAAO,kBAMX,OAAOA,EClGF,SAAS4yC,GAAT,GAA8D,IAAD,EAE5D/lB,EAAczQ,GAF8C,EAAjCpP,OACV1E,YAGvB,QAAoBlL,IAAhByvB,EACF,OAAO,KAGT,IAAM5Z,EAAM,UAAG4Z,EAAYtf,YAAf,aAAG,EAAkB0F,OACjC,YAAe7V,IAAX6V,GAA0C,IAAlBA,EAAOjU,OAAqB,KAEpDiU,EAAOjU,OAAS,GAEhB,cAACktB,GAAD,CAAWnlB,KAAK,wFAIb,cAAC8rC,GAAD,CAAmB5/B,OAAQA,IAgBpC,SAAS4/B,GAAT,GAA2E,IAA9C5/B,EAA6C,EAA7CA,OACrB6/B,ElH8FD,WACL,IAAMhzC,EAAU5C,IAAMyC,WAAWtC,IAEjC,IAAKyC,EACH,MAAM,IAAIF,MAAJ,8DAKR,OAAOE,EAAQsV,QkHvGU29B,GACnBr6B,EAAsBS,KACtB65B,EtFaD,WACL,IAAMlzC,EAAU5C,IAAMyC,WAAWtC,IAEjC,IAAKyC,EACH,MAAM,IAAIF,MAAJ,yEAKR,OAAOE,EAAQsV,QsFtBiB69B,GAHwC,EAIpC/1C,IAAMS,UAAS,GAJqB,mBAIjEmvB,EAJiE,KAInDC,EAJmD,KAKlE1X,EAjBQtX,cACOC,IAAI,WACR,GAiBXk1C,EAAiBh2C,IAAMma,SAC3B,kBACEpE,EAAOoC,QAAO,SAACuY,GACb,MAlDW,KAkDPvY,GAGGuY,EAAMhS,KAAKtB,KAAKhS,aAAe+M,OAE1C,CAACpC,EAAQoC,IAGL89B,EAAiBj2C,IAAMsI,aAC3B,SAAC4T,GACC85B,EAAevsC,SAAQ,SAACinB,GACtBlV,EAAoBkV,EAAM5gB,OAAQoM,QAGtC,CAAC85B,EAAgBx6B,IAInBxb,IAAMwB,WAAU,WACdw0C,EAAevsC,SAAQ,SAACinB,GACtB,IAAMtkB,EAAUskB,EAAM5gB,OAAO1E,WACxBwqC,EAAiBxpC,IACpBoP,EAAoBkV,EAAM5gB,QAAQ,QAGrC,IAEH,IAAMomC,EAAiBF,EAAenO,OAAM,SAACnX,GAAW,IAAD,EAC/CtvB,EAAUw0C,EAAiBllB,EAAM5gB,OAAO1E,YAC9C,OAAsC,KAAxB,OAAPhK,QAAO,IAAPA,GAAA,UAAAA,EAASiP,YAAT,eAAe0K,gBAGlBo7B,EAAiBH,EAAenO,OAAM,SAACnX,GAC3C,IAAMtvB,EAAUw0C,EAAiBllB,EAAM5gB,OAAO1E,YAC9C,YAAyBlL,KAAX,OAAPkB,QAAO,IAAPA,OAAA,EAAAA,EAASiP,SAId+lC,EAAiCF,EAAiB,OAAIh2C,GAErDg2C,GAAkBC,GACrBH,EAAevsC,SAAQ,SAACinB,GAAW,IAAD,EAC1BtvB,EAAUw0C,EAAiBllB,EAAM5gB,OAAO1E,YAC9C,IAAmC,KAAxB,OAAPhK,QAAO,IAAPA,GAAA,UAAAA,EAASiP,YAAT,eAAe0K,aAAuB,CACxC,IAAMs7B,EACJj1C,EAAQiP,KAAKkK,QAAQnZ,EAAQiP,KAAKkK,QAAQzY,OAAS,GAAGsf,KACnDg1B,IAAYA,EAAaC,GAC9BD,EAAa9yC,KAAKgzC,IAAIF,EAAYC,OAKxC,IAAME,EAAWP,EAAe3lB,MAAK,SAACK,GACpC,IAAMtvB,EAAUw0C,EAAiBllB,EAAM5gB,OAAO1E,YAC9C,OAAc,OAAPhK,QAAO,IAAPA,OAAA,EAAAA,EAASzB,UAAW8Z,EAAYkC,YAGnCtR,EAAS2rC,EAAe3lB,MAAK,SAACK,GAClC,IAAMtvB,EAAUw0C,EAAiBllB,EAAM5gB,OAAO1E,YAC9C,OAAc,OAAPhK,QAAO,IAAPA,OAAA,EAAAA,EAASzB,UAAW8Z,EAAYsC,eAGnCy6B,EAAS,IAAIC,IACbC,EAAaV,EAChBjrC,KAAI,SAAC2lB,GAAD,MAAY,CACftT,KAAMsT,EAAMhS,KAAKtB,KACjBhc,QAASw0C,EAAiBllB,EAAM5gB,OAAO1E,gBAExC+M,QAAO,YAAkB,IAAD,EAAd/W,EAAc,EAAdA,QACT,OAAc,OAAPA,QAAO,IAAPA,GAAA,UAAAA,EAASiP,YAAT,eAAekK,UAAWnZ,EAAQiP,KAAKkK,QAAQzY,OAAS,KAEhE60C,SAAQ,kBAAGv5B,EAAH,EAAGA,KAAMhc,EAAT,EAASA,QAAT,OACP,OAACA,QAAD,IAACA,GAAD,UAACA,EAASiP,YAAV,aAAC,EAAekK,SAAqCxP,KAAI,SAACxC,GAAD,MAAS,CAChE6U,OACA7U,YAGH4P,QAAO,YAAa,IAAV5P,EAAS,EAATA,GACT,OAAIiuC,EAAO/0C,IAAI8G,EAAGoS,aAClB67B,EAAOI,IAAIruC,EAAGoS,YACP,MAERxC,QAAO,YAAa,IAAV5P,EAAS,EAATA,GACT,YAAsBrI,IAAfk2C,GAA4B7tC,EAAG6Y,MAAQg1B,KASlD,OANAp2C,IAAMwB,WAAU,YACT+0C,GAAYG,EAAW50C,OAAS,IAAMo0C,GACzCD,MAED,CAACM,EAAUG,EAAYR,EAAgBD,IAEhB,IAAtBS,EAAW50C,OACTy0C,EACK,cAACtqB,GAAD,CAAa1kB,QAAQ,oBACnB8C,EAEP,cAAC2kB,GAAD,CACEC,MAAO,kBAAMgnB,GAAe,IAC5BpsC,KAAK,wCAKT,cAACmlB,GAAD,CACEC,MAAO,kBAAMgnB,GAAe,IAC5B/mB,UAAU,YACVrlB,KAAK,kCAKX6sC,EAAW3Y,MAAK,SAAC77B,EAAG87B,GAClB,OAAI97B,EAAEqG,GAAG6Y,KAAO4c,EAAEz1B,GAAG6Y,MAAc,EAC/Blf,EAAEqG,GAAG6Y,KAAO4c,EAAEz1B,GAAG6Y,KAAa,EAC3B,KAIP,sBAAK1c,UAAU,OAAf,UACE,sBAAKA,UAAU,iCAAf,UACE,oBAAIA,UAAU,oBAAd,2BACA,cAAC,GAAD,CACEyT,OAAQA,EACR6X,OAAQ,kBAAMH,GAAY,SAACrf,GAAD,OAAWA,MACrCA,KAAMof,EACN7Z,OAAQA,IAEV,wBACErR,UAAU,uBACV06B,SAAUmX,EACV1rC,QAAS,kBAAMorC,GAAe,IAHhC,SAKGM,EACC,qCACE,sBAAM7xC,UAAU,sCADlB,aAKA,qCACE,sBAAMA,UAAU,0BADlB,kBAQN,qBAAKA,UAAU,wBAAf,SACE,wBAAOA,UAAU,yCAAjB,UACE,gCACE,+BACE,oBAAIA,UAAU,iBAAd,kBACA,oBAAIA,UAAU,aAAd,oBACA,oBAAIA,UAAU,aAAd,mBACA,oBAAIA,UAAU,aAAd,8BACA,oBAAIA,UAAU,aAAd,wCAGJ,uBAAOA,UAAU,OAAjB,SACGgyC,EAAW3rC,KAAI,gBAAGqS,EAAH,EAAGA,KAAM7U,EAAT,EAASA,GAAT,OACd,cAACsuC,GAAD,CAEEz5B,KAAMA,EACN7U,GAAIA,EACJ4Q,QAAS28B,EAAwBvtC,EAAGoS,YAH/BpS,EAAGoS,qBAUlB,qBAAKjW,UAAU,cAAf,SACGwxC,EACC,qBAAKxxC,UAAU,yBAAf,kCAEA,wBACEA,UAAU,wBACVmG,QAAS,kBAAMorC,KACf7W,SAAUmX,EAHZ,SAKGA,EACC,qCACE,sBAAM7xC,UAAU,sCADlB,aAKA,oBASd,IAAMoyC,GAAiB,SAAC,GAAmD,IAAjD3+B,EAAgD,EAAhDA,OAAQ6X,EAAwC,EAAxCA,OAAQxf,EAAgC,EAAhCA,KAAMuF,EAA0B,EAA1BA,OACtCtX,EAAYkE,cAAZlE,QACAyQ,EAAkBmH,IAAlBnH,cAeF6nC,EAA0B,CAtQf,IAuQXC,EAAkC,IAAIljC,IAU5C,OARAiC,EAAOtM,SAAQ,SAACinB,GACd,IAAMtkB,EAAUskB,EAAMhS,KAAKtB,KAAKhS,WAC3B4rC,EAAWv1C,IAAI2K,KAClB2qC,EAAcp1C,KAAKyK,GACnB4qC,EAAWjrC,IAAIK,EAAS6qC,GAAgB7qC,EAAS3N,EAASyQ,QAK5D,sBAAKxK,UAAU,gBAAf,UACE,uBAAOA,UAAU,OAAjB,qBACA,wBACEA,UAAU,uCACVqM,KAAK,SACLlG,QAASmlB,EAHX,SApRa,KAyRV7X,EAAwB,aAAe6+B,EAAWl2C,IAAIqX,KAEzD,qBACEzT,UAAS,wDACP8L,EAAO,QAAU,IAFrB,SAKGumC,EAAchsC,KAAI,SAACmsC,GAClB,OACE,cAAC,IAAD,CAEEllC,GAAI,SAAC1Q,GAAD,OA3CM,SAACA,EAAoB6W,GACzC,IAAMvM,EAAS,IAAIH,gBAAgBnK,EAASM,QAM5C,MAhQe,KA2PXuW,EACFvM,EAAOlK,OAAO,UAEdkK,EAAOG,IAAI,SAAUoM,GAEhB,2BACF7W,GADL,IAEEM,OAAQgK,EAAO/J,aAkCqBkvB,CAAczvB,EAAU41C,IACpDxyC,UAAS,uBACPwyC,IAAiB/+B,EAAS,UAAY,IAExCtN,QAASmlB,EANX,SAlSO,KA0SJknB,EACG,aACAD,GAAgBC,EAAcz4C,EAASyQ,IATtCgoC,YAkBbL,GAAsB72C,IAAMm3C,MAChC,YAQO,IAAD,MASAtC,EACAD,EAjBJx3B,EAOI,EAPJA,KACA7U,EAMI,EANJA,GACA4Q,EAKI,EALJA,QAMMoY,EAAeD,KACb7yB,EAAYkE,cAAZlE,QAGRuB,IAAMwB,WAAU,WACT2X,GAASoY,EAAahpB,EAAGoS,aAC7B,IAICpS,EAAGpB,KACLytC,EAAc,UACdC,EAAa,WAEbD,EAAc,UACdC,EAAa,WAGf,IAAM/pC,EAAY,OAChBqO,QADgB,IAChBA,GADgB,UAChBA,EAAS9I,YADO,iBAChB,EAAeghB,mBADC,aAChB,EAA4BA,YAAY9pB,QAAQuD,aAClD,IAAKA,EACH,OACE,+BACE,oBAAIpG,UAAU,MAAd,SACE,cAACwsB,GAAD,CAAM9P,KAAM7Y,EAAG6Y,KAAM6I,MAAI,MAG3B,6BACE,sBAAMvlB,UAAS,2BAAsBkwC,GAArC,SACGC,MAIL,6BACE,cAAC9qB,GAAD,CAASja,OAAQsN,EAAM6M,MAAI,EAACC,UAAQ,MAGtC,+BACE,sBAAMxlB,UAAU,sCADlB,aAKA,6BACE,cAACssB,GAAD,CAAWrW,UAAWpS,EAAGoS,UAAWsP,MAAI,QArBnC1hB,EAAGoS,WA0BhB,IAAIy8B,EAA2C,GAE/C,UAAIj+B,QAAJ,IAAIA,GAAJ,UAAIA,EAAS9I,YAAb,aAAI,EAAeghB,YAAa,CAC9B,IAAMA,EAAclY,EAAQ9I,KAAKghB,YAEjC+lB,EAAwBtsC,EACrBC,KAAI,SAACC,EAAIzB,GAAwC,IAAD,EAsB3CksC,EArBA3yC,EAAO,UAEL8vC,EAGA,GAwBN,IArBE,UAAAvhB,EAAYja,YAAZ,eAAkBw7B,qBACjBn0C,IAAYF,IAAQI,aACnB0yB,EAAYjQ,MAAQyxB,KAEtBxhB,EAAYja,KAAKw7B,kBAAkBnpC,SAAQ,SAACuB,GACtCA,EAAGzB,QAAUA,GACfyB,EAAGF,aAAarB,SAAQ,SAAC6rC,GACvB1C,EAAkBjxC,KAAK2zC,UAO/B,OAAIjkB,QAAJ,IAAIA,OAAJ,EAAIA,EAAaA,eACfokB,EAAyBlmC,YACvB8hB,EAAYA,YACZrmB,IAIA,WAAYA,EAAI,CAClB,GAAmB,cAAfA,EAAGyd,QAGL,OAFA3lB,EAAOyyC,GAA+BvqC,EAAIzC,QAIvC,GACLktC,GACA1f,GAAmB0f,GAEnB,IACE3yC,EAAO6zB,GAA2B8e,GAClC,MAAOnuC,GAEP,YADA/E,aAAY+E,EAAO,CAAEqT,UAAWpS,EAAGoS,iBAGhC,GACL86B,GACAxjB,GAAuBwjB,GAEvB,IACE3yC,EAAOovB,GAA+BujB,GACtC,MAAOnuC,GAEP,YADA/E,aAAY+E,EAAO,CAAEqT,UAAWpS,EAAGoS,iBAGhC,GACL86B,GACAljB,GAA0BkjB,GAE1B,IACE3yC,EAAO0vB,GAAkCijB,GACzC,MAAOnuC,GAEP,YADA/E,aAAY+E,EAAO,CAAEqT,UAAWpS,EAAGoS,iBAGhC,GACL86B,GACAra,GAAwBqa,GAExB,IACE3yC,EAAOw4B,GAAgCma,GACvC,MAAOnuC,GAEP,YADA/E,aAAY+E,EAAO,CAAEqT,UAAWpS,EAAGoS,iBAGhC,GACL86B,GACAxK,GAAmBwK,GAEnB,IACE3yC,EAAO0pC,GAA2BiJ,GAClC,MAAOnuC,GAEP,YADA/E,aAAY+E,EAAO,CAAEqT,UAAWpS,EAAGoS,gBAGhC,CACL,KACE3P,EAAG0E,SAAS+K,WAAU,SAAC9K,GAAD,OACpBA,EAAQI,OAAO8O,QACZ,GAIL,OAFA/b,EAAO,kBAMX,MAAO,CACLA,OACA8vC,wBAGHz6B,QAAO,SAACrV,GAAD,YAAmB5C,IAAT4C,KAGtB,OACE,mCACGs0C,EAAsBrsC,KAAI,SAACssC,EAAiB9tC,GAC3C,OACE,+BACE,oBAAI7E,UAAU,MAAd,SACE,cAACwsB,GAAD,CAAM9P,KAAM7Y,EAAG6Y,KAAM6I,MAAI,MAG3B,6BACE,sBAAMvlB,UAAS,2BAAsBkwC,GAArC,SACGC,MAIL,oBAAInwC,UAAU,kBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQsN,EAAM6M,MAAI,EAACE,iBAAe,MAG7C,6BACE,cAACmtB,GAAD,CAAoBD,gBAAiBA,EAAiB9uC,GAAIA,MAG5D,oBAAI7D,UAAU,kBAAd,SACE,cAACssB,GAAD,CAAWrW,UAAWpS,EAAGoS,UAAWsP,MAAI,EAACC,UAAQ,QApB5C3gB,WA8BrB,SAAS+tC,GAAT,GAMI,IALFD,EAKC,EALDA,gBACA9uC,EAIC,EAJDA,GAIC,EAC+BvI,IAAMS,UAAS,GAD9C,mBACM82C,EADN,KACgBC,EADhB,KAGGC,EAAmBJ,EAAgBzE,kBACpC7nC,KAAI,SAACC,GACJ,GAAI,WAAYA,GAAqB,cAAfA,EAAGyd,QACvB,OAAO8sB,GAA+BvqC,EAAIzC,MAI7C4P,QAAO,SAACpH,GAAD,YAAmB7Q,IAAT6Q,KAEpB,OACE,qCACE,oBAAGrM,UAAU,OAAb,UACG+yC,EAAiB31C,OAAS,GACzB,sBACE+I,QAAS,SAACnF,GACRA,EAAEgyC,iBACFF,GAAaD,IAEf7yC,UAAS,4BACP6yC,EAAW,kBAAoB,oBAIpCF,EAAgBv0C,QAElBy0C,GACC,oBAAI7yC,UAAU,OAAd,SACG+yC,EAAiB1sC,KAAI,SAACgG,EAAMxH,GAC3B,OAAO,6BAAiBwH,GAARxH,WAQ5B,SAAS0tC,GACPnnC,EACArR,EACAyQ,GAEA,IAAI4gB,EAAUxgB,YAAeQ,EAAQrR,EAASyQ,GAM9C,OAJI4gB,IAAYhgB,IACdggB,EAAUA,EAAQ7rB,MAAM,EAvjBE,IAujB0B,UAG/C6rB,EC3lBT,IAAM3vB,GAAeH,IAAMC,mBAAiCC,GACtDE,GAAkBJ,IAAMC,mBAAoCC,GAG3D,SAASy3C,GAAT,GAA+D,IAA5Br3C,EAA2B,EAA3BA,SAChCuC,EAAQF,cAARE,IAD2D,EAEzCoY,EAAkCpY,GAFO,mBAE5DpD,EAF4D,KAErDe,EAFqD,KASnE,OAJAR,IAAMwB,WAAU,WACdhB,EAAS,CAAEuQ,KAAM2I,EAAWU,MAAOvX,UAClC,CAACrC,EAAUqC,IAGZ,cAAC,GAAab,SAAd,CAAuBC,MAAOxC,EAA9B,SACE,cAAC,GAAgBuC,SAAjB,CAA0BC,MAAOzB,EAAjC,SACGF,M,gDAaT,WACEE,EACAsP,EACArR,EACAoE,GAJF,kBAAAX,EAAA,6DAME1B,EAAS,CACPuQ,KAAM2I,EAAWW,OACjB9O,IAAKuE,EAAO1E,WACZzL,OAAQsb,EAAkBU,SAC1B9Y,QAVJ,kBAkBc,IAAIT,IAAWS,EAAK,aAAa+0C,wBAAwB9nC,GAlBvE,0BAmBQ7N,MAHJoO,EAhBJ,CAiBM7J,QAjBN,eAsByB2hB,QAAQC,IAC3B/X,EAAK7J,QAAQuE,IAAb,yCACE,WAAO4E,GAAP,kBAAAzN,EAAA,+EAGY,IAAIE,IAAWS,EAAK,aAAa0lB,qBACrC5Y,EAAQvD,SAJhB,YAEU2S,EAFV,OAMM9c,UACiB,WAAY8c,EAAY1O,MAP/C,uBAQYqO,EAAOm5B,GAAwB94B,EAAY1O,MARvD,6CAUWV,GAVX,IAWQ0N,MAAOqB,EAAKrB,SAXpB,uDAeQ5e,IAAYF,IAAQO,QACtByD,aAAY,EAAD,GAAQ,CAAEM,QAhB3B,iCAmBS8M,GAnBT,yDADF,wDAvBN,OAsBIU,EAAK7J,QAtBT,OAgDIqiB,EAAcpP,EAAYqC,QAhD9B,kDAkDQrd,IAAYF,IAAQO,QACtByD,aAAY,EAAD,GAAQ,CAAEM,QAEvBgmB,EAAcpP,EAAYsC,YArD9B,QAuDEvb,EAAS,CACPuQ,KAAM2I,EAAWW,OACjB1a,OAAQkpB,EACRxY,OACA9E,IAAKuE,EAAO1E,WACZvI,QA5DJ,2D,sBAgEO,SAASi1C,KACd,IAAMt3C,EAAWR,IAAMyC,WAAWrC,IAClC,IAAKI,EACH,MAAM,IAAIkC,MAAJ,oEAHqC,MAQpBC,cAAjBlE,EARqC,EAQrCA,QAASoE,EAR4B,EAQ5BA,IACjB,OAAO7C,IAAMsI,aACX,SAACwH,I,2CACCioC,CAAqBv3C,EAAUsP,EAAQrR,EAASoE,KAElD,CAACrC,EAAU/B,EAASoE,IAkBxB,SAASg1C,GACPG,GAEA,IACE,IAAM3nC,EAAO4O,aAAO+4B,EAAWz8B,OAAQ8D,IACjC9D,EAAS0D,aAAO5O,EAAMoO,IAC5B,OAAOQ,aAAO1D,EAAOmD,KAAMvB,IAC3B,MAAO7V,GACP,MAAMA,GC1IH,SAAS2wC,GAAT,GAAsE,IAAD,EAAjCnoC,EAAiC,EAAjCA,OACnC6c,EAAc7c,EAAO1E,WACrBs8B,EAAW3e,GAAmB4D,GAC9BurB,EDiHD,SACL9rC,GAEA,IAAMxJ,EAAU5C,IAAMyC,WAAWtC,IAEjC,IAAKyC,EACH,MAAM,IAAIF,MAAJ,6DAKR,OAAOE,EAAQsV,QAAQ9L,GC5HC+rC,CAAsBxrB,GACxCorB,EAAuBD,KACvBM,EAAiBp4C,IAAMsI,aAC3B,kBAAMyvC,EAAqBjoC,KAC3B,CAACA,EAAQioC,IAGLnpB,EAAI,UADgBvY,IAAlBnH,cACmBpO,IAAI6rB,UAArB,aAAG,EAAgCvd,OACvCipC,EAAYzpB,EAAI,WAAOA,EAAP,KAAiB,GAOvC,GALA5uB,IAAMwB,WAAU,WACVkmC,GAAU0Q,MACb,CAAC1Q,EAAU0Q,SAGUl4C,IAApBg4C,EAA+B,OAAO,KAG1C,QAAiBh4C,IAAbwnC,EAAwB,OAAO,KAEnC,QAA8BxnC,KAAX,OAAfg4C,QAAe,IAAfA,OAAA,EAAAA,EAAiB7nC,MACnB,OAAI6nC,EAAgBv4C,SAAW8Z,EAAYkC,SAClC,cAACsQ,GAAD,CAAa1kB,QAAQ,6BAI5B,cAACynB,GAAD,CACEC,MAAOmpB,EACPvuC,KAAK,qCAGJ,GAAIquC,EAAgBv4C,SAAW8Z,EAAYkC,SAChD,OAAO,cAACsQ,GAAD,CAAa1kB,QAAQ,gCAG9B,IAAMmI,EAAWwoC,EAAgB7nC,KAAK7J,QACtC,GAAwB,IAApBkJ,EAAS5N,OACX,OAAO,cAACktB,GAAD,CAAWnlB,KAAK,qBAIzB,IAAMyuC,EAAoB5oC,EAASyG,QACjC,SAACoiC,EAAc5hC,GACb,IAAMuG,EAAM,UAAMvG,EAAQsG,gBACpBnb,EAASob,EAAOpb,OAChB02C,EAAet7B,EAAO1S,QAAQ,KACpC,OAAIguC,GAAgB,GAAK12C,EAAS02C,EAAe,EAAID,EAC5Cz2C,EAAS02C,EAAe,EAE1BD,IAET,GAGIE,EAAcv1C,YAAqBwkC,EAASzpB,OAAQypB,EAAStkC,UAEnE,OACE,mCACE,sBAAKsB,UAAU,OAAf,UACE,qBAAKA,UAAU,cAAf,SACE,qBAAKA,UAAU,yBAAf,SACE,qBAAKA,UAAU,MAAf,SACE,oBAAIA,UAAU,oBAAd,oCAKN,qBAAKA,UAAU,wBAAf,SACE,wBAAOA,UAAU,4BAAjB,UACE,gCACE,+BACE,oBAAIA,UAAU,aAAd,kBACA,oBAAIA,UAAU,aAAd,qBACA,oBAAIA,UAAU,aAAd,mBACA,qBAAIA,UAAU,wBAAd,qBAA+C2zC,KAC/C,oBAAI3zC,UAAU,wBAAd,oCAGJ,uBAAOA,UAAU,OAAjB,SACGgL,EAAS3E,KAAI,SAAC4E,EAASpG,GAAV,OACZmvC,GAAiB/oC,EAASpG,EAAO+uC,EAAmBG,kBAUpE,IAAMC,GAAmB,SACvB/oC,EACApG,EACA+uC,EACAr6B,GAEA,IAAI06B,EAAU,IACd,GAAI16B,EAAS,GAAKtO,EAAQsN,eAAgB,CACxC,IAAI27B,EAAkB,IAAI9pB,KAAUnf,EAAQsN,gBACzC47B,MAAM,KACNC,UAAU76B,GAEb06B,EAAO,UAAMC,EAAgB7pB,SAAS,GAA/B,KAGmB,IAAxB7qB,WAAWy0C,IACX,IAAI7pB,KAAUnf,EAAQsN,gBAAgBkgB,GAAG,KAEzCwb,EAAO,WAAOA,IAGlB,OACE,+BACE,6BACE,sBAAMj0C,UAAU,mCAAhB,SAAoD6E,EAAQ,MAE9D,oBAAI7E,UAAU,KAAd,SACE,cAACqlB,GAAD,CAASja,OAAQH,EAAQvD,QAAS6d,MAAI,EAACC,UAAQ,MAEjD,6BACGva,EAAQ0N,OAAS,cAAC0M,GAAD,CAASja,OAAQH,EAAQ0N,MAAO4M,MAAI,EAACC,UAAQ,MAEjE,oBAAIxlB,UAAU,4BAAd,SACGiL,EAAQsN,gBACP,IAAI6R,KAAUnf,EAAQsN,gBAAgB8R,SAASupB,KAEnD,oBAAI5zC,UAAU,4BAAd,SAA2Ci0C,MAdpCpvC,ICrHN,SAASwvC,GAAT,GAAgE,IAAvCpvB,EAAsC,EAAtCA,MAAOzN,EAA+B,EAA/BA,QACrC,OACE,sBAAKxX,UAAU,iCAAf,UACE,oBAAIA,UAAU,oBAAd,SAAmCilB,IACnC,yBAAQjlB,UAAU,uBAAuBmG,QAAS,kBAAMqR,KAAxD,UACE,sBAAMxX,UAAU,0BADlB,gBAQC,SAASs0C,GAAT,GAAuD,IAA1BrpC,EAAyB,EAAzBA,QAClC,OACE,+BACE,yCACA,oBAAIjL,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQH,EAAQG,OAAQka,YAAU,EAAC7mB,KAAG,SAMhD,SAAS81C,GAAT,GAAuD,IACpDx1C,EADmD,EAAzBkM,QAC1BlM,SACR,OACE,+BACE,+CACA,oBAAIiB,UAAU,+BAAd,SACE,cAAC,IAAD,CAAYjB,SAAUA,SC9BvB,SAASy1C,GAAT,GAMH,IALFvpC,EAKC,EALDA,QACAgxB,EAIC,EAJDA,YAKMzkB,EAAU8M,KACVjH,EAAW4e,EAAYjiB,KAAKqD,SAClC,OACE,sBAAKrd,UAAU,OAAf,UACE,cAACq0C,GAAD,CACEpvB,MAAM,eACNzN,QAAS,kBAAMA,EAAQvM,EAAQG,WAGjC,eAACtE,GAAA,EAAD,WACE,cAACwtC,GAAD,CAAmBrpC,QAASA,IAC5B,cAACspC,GAAD,CAAmBtpC,QAASA,IAE5B,+BACE,kDAEGgxB,EAAYjiB,KAAK6C,iBAAiBzf,OAAS,EAAI,IAAM,MAExD,oBAAI4C,UAAU,gBAAd,SACGi8B,EAAYjiB,KAAK6C,iBAAiBxW,KAAI,SAACoV,GACtC,OACE,cAAC4J,GAAD,CACEja,OAAQqQ,EAAMQ,gBAEdqJ,YAAU,EACV7mB,KAAG,EACH8mB,MAAI,GAHC9J,EAAMQ,gBAAgB9e,oBAUrC,+BACE,uDACA,oBAAI6C,UAAU,gBAAd,SACE,cAACqlB,GAAD,CACEja,OAAQ6wB,EAAYjiB,KAAK8C,qBACzBwI,YAAU,EACV7mB,KAAG,EACH8mB,MAAI,SAKV,+BACE,gDACA,oBAAIvlB,UAAU,+BAAd,SACGgO,EAA4D,IAA3CiuB,EAAYjiB,KAAKiD,cAAcC,gBAIrD,+BACE,4CACA,oBAAIld,UAAU,gBAAd,SAA+Bi8B,EAAYjiB,KAAK+C,WAAa,SAG/D,+BACE,2CACA,oBAAI/c,UAAU,gBAAd,SACgB,OAAbqd,EAAoB,cAACmP,GAAD,CAAM9P,KAAMW,EAAUkI,MAAI,IAAM,iBCrE1D,SAASkvB,GAAT,GAMH,IALFxpC,EAKC,EALDA,QACAkzB,EAIC,EAJDA,aAKM3mB,EAAU8M,KAChB,OACE,sBAAKtkB,UAAU,OAAf,UACE,cAACq0C,GAAD,CACEpvB,MAAM,gBACNzN,QAAS,kBAAMA,EAAQvM,EAAQG,WAGjC,eAACtE,GAAA,EAAD,WACE,cAACwtC,GAAD,CAAmBrpC,QAASA,IAC5B,cAACspC,GAAD,CAAmBtpC,QAASA,IAE5B,+BACE,2CACA,oBAAIjL,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQ+yB,EAAankB,KAAK0D,UAAW4H,YAAU,EAAC7mB,KAAG,EAAC8mB,MAAI,SAIrE,+BACE,2CACA,oBAAIvlB,UAAU,gBAAd,SACE,+BAAOm+B,EAAankB,KAAK2D,iBAI7B,+BACE,qCACA,qBAAI3d,UAAU,gBAAd,UACGm+B,EAAankB,KAAK4D,cAAcC,qBADnC,sCC1CH,SAAS62B,GAAT,GAAmE,IAA9CzY,EAA6C,EAA7CA,YAC1B,OACE,mCACE,sBAAKj8B,UAAU,OAAf,UACE,qBAAKA,UAAU,cAAf,SACE,qBAAKA,UAAU,yBAAf,SACE,qBAAKA,UAAU,MAAf,SACE,oBAAIA,UAAU,oBAAd,gCAKN,qBAAKA,UAAU,wBAAf,SACE,wBAAOA,UAAU,yCAAjB,UACE,gCACE,+BACE,oBAAIA,UAAU,iBAAd,kBACA,oBAAIA,UAAU,aAAd,qCAGJ,uBAAOA,UAAU,OAAjB,SACGi8B,EAAYjiB,KAAKsD,MAAMlgB,OAAS,GAC/B6+B,EAAYjiB,KAAKsD,MACdq3B,UACAtuC,KAAI,SAAC++B,EAAYvgC,GAAb,OAAuBmvC,GAAiB5O,EAAMvgC,aAK7D,qBAAK7E,UAAU,cAAf,SACE,qBAAKA,UAAU,yBAAf,SACGi8B,EAAYjiB,KAAKsD,MAAMlgB,OAAS,EAAI,GAAK,0BAQtD,IAAM42C,GAAmB,SAAC5O,EAAYvgC,GACpC,OACE,+BACE,oBAAI7E,UAAU,qBAAd,SACE,cAACwsB,GAAD,CAAM9P,KAAM0oB,EAAK1oB,KAAM6I,MAAI,MAE7B,oBAAIvlB,UAAU,iBAAd,SAAgColC,EAAKzoB,sBAJ9B9X,ICtBN,SAAS+vC,GAAT,GAMH,IALF3pC,EAKC,EALDA,QACA4pC,EAIC,EAJDA,cAKA,OAAQA,EAAcxoC,MACpB,IAAK,QACH,OACE,cAACyoC,GAAD,CACE7pC,QAASA,EACT4pC,cAAeA,IAGrB,IAAK,OACH,OACE,cAACE,GAAD,CACE9pC,QAASA,EACT4pC,cAAeA,IAGrB,IAAK,UACH,OACE,cAACG,GAAD,CACE/pC,QAASA,EACT4pC,cAAeA,IAGrB,IAAK,gBACH,OACE,cAACI,GAAD,CACEhqC,QAASA,EACT4pC,cAAeA,IAGrB,IAAK,OACH,OACE,cAACK,GAAD,CACEjqC,QAASA,EACT4pC,cAAeA,IAGrB,IAAK,oBACH,OACE,cAACM,GAAD,CACElqC,QAASA,EACT4pC,cAAeA,IAGrB,IAAK,aACH,OACE,cAACO,GAAD,CACEnqC,QAASA,EACT4pC,cAAeA,IAGrB,IAAK,cACH,OACE,cAACQ,GAAD,CACEpqC,QAASA,EACT4pC,cAAeA,IAGrB,IAAK,eACH,OACE,cAACS,GAAD,CACErqC,QAASA,EACT4pC,cAAeA,KAMzB,SAASM,GAAT,GAKI,IAJFlqC,EAIC,EAJDA,QAKMuM,EAAU8M,KAChB,OACE,sBAAKtkB,UAAU,OAAf,UACE,cAACq0C,GAAD,CACEpvB,MAAM,6BACNzN,QAAS,kBAAMA,EAAQvM,EAAQG,WAGjC,eAACtE,GAAA,EAAD,WACE,cAACwtC,GAAD,CAAmBrpC,QAASA,IAC5B,cAACspC,GAAD,CAAmBtpC,QAASA,UAMpC,SAASmqC,GAAT,GAKI,IAJFnqC,EAIC,EAJDA,QAKMuM,EAAU8M,KAChB,OACE,sBAAKtkB,UAAU,OAAf,UACE,cAACq0C,GAAD,CACEpvB,MAAM,sBACNzN,QAAS,kBAAMA,EAAQvM,EAAQG,WAGjC,eAACtE,GAAA,EAAD,WACE,cAACwtC,GAAD,CAAmBrpC,QAASA,IAC5B,cAACspC,GAAD,CAAmBtpC,QAASA,UAMpC,SAASoqC,GAAT,GAMI,IALFpqC,EAKC,EALDA,QACA4pC,EAIC,EAJDA,cAKMr9B,EAAU8M,KACV5nB,EAAUsH,MAAMwQ,KACpB,CACEpX,OAAQ,MAEV,SAACgmC,EAAG9S,GAAJ,OAAUukB,EAAc76B,KAAK4F,SAAW0Q,KAE1C,OACE,sBAAKtwB,UAAU,OAAf,UACE,cAACq0C,GAAD,CACEpvB,MAAM,uBACNzN,QAAS,kBAAMA,EAAQvM,EAAQG,WAGjC,eAACtE,GAAA,EAAD,WACE,cAACwtC,GAAD,CAAmBrpC,QAASA,IAC5B,cAACspC,GAAD,CAAmBtpC,QAASA,IAE5B,+BACE,qBAAIjL,UAAU,YAAd,yBACe,IACb,sBAAMA,UAAU,aAAhB,qCAEF,oBAAIA,UAAU,+BAAd,SACGtD,EAAQ2J,KAAI,SAACkvC,GAAD,OACX,mBAAav1C,UAAU,OAAvB,SACE,cAACwsB,GAAD,CAAM9P,KAAM64B,EAAKhwB,MAAI,KADfgwB,iBAWtB,SAASD,GAAT,GAKI,IAJFrqC,EAIC,EAJDA,QAKMuM,EAAU8M,KAChB,OACE,sBAAKtkB,UAAU,OAAf,UACE,cAACq0C,GAAD,CACEpvB,MAAM,wBACNzN,QAAS,kBAAMA,EAAQvM,EAAQG,WAGjC,eAACtE,GAAA,EAAD,WACE,cAACwtC,GAAD,CAAmBrpC,QAASA,IAC5B,cAACspC,GAAD,CAAmBtpC,QAASA,UAMpC,SAASiqC,GAAT,GAMI,IALFjqC,EAKC,EALDA,QACA4pC,EAIC,EAJDA,cAKMr9B,EAAU8M,KAChB,OACE,sBAAKtkB,UAAU,OAAf,UACE,cAACq0C,GAAD,CACEpvB,MAAM,eACNzN,QAAS,kBAAMA,EAAQvM,EAAQG,WAGjC,eAACtE,GAAA,EAAD,WACE,cAACwtC,GAAD,CAAmBrpC,QAASA,IAC5B,cAACspC,GAAD,CAAmBtpC,QAASA,IAE5B,+BACE,wDACA,oBAAIjL,UAAU,gBAAd,SACG60C,EAAc76B,KAAK4D,cAAcC,gCAQ9C,SAASo3B,GAAT,GAMI,IALFhqC,EAKC,EALDA,QACA4pC,EAIC,EAJDA,cAKMr9B,EAAU8M,KAChB,OACE,sBAAKtkB,UAAU,OAAf,UACE,cAACq0C,GAAD,CACEpvB,MAAM,yBACNzN,QAAS,kBAAMA,EAAQvM,EAAQG,WAGjC,eAACtE,GAAA,EAAD,WACE,cAACwtC,GAAD,CAAmBrpC,QAASA,IAC5B,cAACspC,GAAD,CAAmBtpC,QAASA,IAE5B,+BACE,iDACA,oBAAIjL,UAAU,gBAAd,SAA+B60C,EAAc76B,KAAKoE,mBAGpD,+BACE,6DACA,oBAAIpe,UAAU,gBAAd,SACG60C,EAAc76B,KAAKqE,8BAIxB,+BACE,sDACA,oBAAIre,UAAU,gBAAd,SACE,+BAAO60C,EAAc76B,KAAKsE,OAAS,OAAS,eAIhD,+BACE,oDACA,oBAAIte,UAAU,gBAAd,SACG60C,EAAc76B,KAAKuE,sBAIxB,+BACE,mDACA,oBAAIve,UAAU,gBAAd,SACE,cAACwsB,GAAD,CAAM9P,KAAMm4B,EAAc76B,KAAKwE,6BAQ3C,SAASs2B,GAAT,GAMI,IALF7pC,EAKC,EALDA,QACA4pC,EAIC,EAJDA,cAKMr9B,EAAU8M,KAChB,OACE,sBAAKtkB,UAAU,OAAf,UACE,cAACq0C,GAAD,CACEpvB,MAAM,gBACNzN,QAAS,kBAAMA,EAAQvM,EAAQG,WAGjC,eAACtE,GAAA,EAAD,WACE,cAACwtC,GAAD,CAAmBrpC,QAASA,IAC5B,cAACspC,GAAD,CAAmBtpC,QAASA,IAE5B,+BACE,2CACA,oBAAIjL,UAAU,+BAAd,SACGgO,EAAoD,IAAnC6mC,EAAc76B,KAAK/L,oBAIzC,+BACE,uCACA,oBAAIjO,UAAU,gBAAd,SAA+B60C,EAAc76B,KAAKoB,WAGpD,+BACE,uDACA,oBAAIpb,UAAU,gBAAd,SACG60C,EAAc76B,KAAKgE,yBAIxB,+BACE,sCACA,oBAAIhe,UAAU,gBAAd,SACE,cAACwsB,GAAD,CAAM9P,KAAMm4B,EAAc76B,KAAK0C,KAAM6I,MAAI,eAQrD,SAASwvB,GAAT,GAMI,IALF9pC,EAKC,EALDA,QACA4pC,EAIC,EAJDA,cAKMr9B,EAAU8M,KAChB,OACE,sBAAKtkB,UAAU,OAAf,UACE,cAACq0C,GAAD,CACEpvB,MAAM,eACNzN,QAAS,kBAAMA,EAAQvM,EAAQG,WAGjC,eAACtE,GAAA,EAAD,WACE,cAACwtC,GAAD,CAAmBrpC,QAASA,IAC5B,cAACspC,GAAD,CAAmBtpC,QAASA,IAE5B,+BACE,8CACA,oBAAIjL,UAAU,gBAAd,SACG60C,EAAc76B,KAAKkF,YAAc,SAItC,+BACE,qDACA,qBAAIlf,UAAU,gBAAd,UACG60C,EAAc76B,KAAKiF,mBADtB,eAKF,+BACE,wDACA,oBAAIjf,UAAU,gBAAd,SACG60C,EAAc76B,KAAKgF,+BAQhC,SAASg2B,GAAT,GAMI,IALF/pC,EAKC,EALDA,QACA4pC,EAIC,EAJDA,cAKMr9B,EAAU8M,KAEVkxB,EAA+B,IAAI51C,KAAKC,aAAa,QAAS,CAClE41C,yBAA0B,KACzB31C,OAAO+0C,EAAc76B,KAAKqF,qBAE7B,OACE,sBAAKrf,UAAU,OAAf,UACE,cAACq0C,GAAD,CACEpvB,MAAM,kBACNzN,QAAS,kBAAMA,EAAQvM,EAAQG,WAGjC,eAACtE,GAAA,EAAD,WACE,cAACwtC,GAAD,CAAmBrpC,QAASA,IAC5B,cAACspC,GAAD,CAAmBtpC,QAASA,IAE5B,+BACE,uDACA,qBAAIjL,UAAU,+BAAd,UACGw1C,EADH,wBCnZH,SAASE,GAAT,GAIH,IACIC,EADL,EAHDd,cAIiC76B,KACjC,OACE,sBAAKha,UAAU,OAAf,UACE,qBAAKA,UAAU,cAAf,SACE,qBAAKA,UAAU,yBAAf,SACE,qBAAKA,UAAU,MAAf,SACE,oBAAIA,UAAU,oBAAd,+BAKN,qBAAKA,UAAU,wBAAf,SACE,wBAAOA,UAAU,yCAAjB,UACE,gCACE,+BACE,oBAAIA,UAAU,iBAAd,kBACA,oBAAIA,UAAU,aAAd,4BAGJ,uBAAOA,UAAU,OAAjB,SACG21C,EAAWv4C,OAAS,GACnBu4C,EAAWtvC,KAAI,SAAC6O,EAAsBrQ,GACpC,OAAOmvC,GAAiB9+B,EAAOrQ,aAMzC,qBAAK7E,UAAU,cAAf,SACE,qBAAKA,UAAU,yBAAf,SACG21C,EAAWv4C,OAAS,EAAI,GAAK,yBAOxC,IAAM42C,GAAmB,SAAC9+B,EAAsBrQ,GAC9C,OACE,+BACE,oBAAI7E,UAAU,qBAAd,SACE,cAACwsB,GAAD,CAAM9P,KAAMxH,EAAMwH,KAAM6I,MAAI,MAE9B,oBAAIvlB,UAAU,iBAAd,SAAgCkV,EAAMsK,SAJ/B3a,IC5CN,SAAS+wC,GAAT,GAIH,IACIx1B,EADL,EAHDy0B,cAImC76B,KACnC,OACE,mCACE,sBAAKha,UAAU,OAAf,UACE,qBAAKA,UAAU,cAAf,SACE,qBAAKA,UAAU,yBAAf,SACE,qBAAKA,UAAU,MAAf,SACE,oBAAIA,UAAU,oBAAd,iCAKN,qBAAKA,UAAU,wBAAf,SACE,wBAAOA,UAAU,yCAAjB,UACE,gCACE,+BACE,oBAAIA,UAAU,iBAAd,mBACA,oBAAIA,UAAU,aAAd,6BACA,oBAAIA,UAAU,aAAd,8BACA,oBAAIA,UAAU,aAAd,qCAGJ,uBAAOA,UAAU,OAAjB,SACGogB,EAAahjB,OAAS,GACrBgjB,EAAa/Z,KAAI,SAAC6O,EAA0BrQ,GAC1C,OAAOmvC,GAAiB9+B,EAAOrQ,aAMzC,qBAAK7E,UAAU,cAAf,SACE,qBAAKA,UAAU,yBAAf,SACGogB,EAAahjB,OAAS,EAAI,GAAK,kCAQ5C,IAAM42C,GAAmB,SAAC9+B,EAA0BrQ,GAClD,OACE,+BACE,oBAAI7E,UAAU,qBAAd,SAAoCkV,EAAMkG,QAC1C,oBAAIpb,UAAU,iBAAd,SACE,cAAC,IAAD,CAAYjB,SAAUmW,EAAMkL,aAAaJ,cAE3C,oBAAIhgB,UAAU,iBAAd,SACE,cAAC,IAAD,CAAYjB,SAAUmW,EAAMkL,aAAaH,eAE3C,oBAAIjgB,UAAU,iBAAd,SACE,cAAC,IAAD,CAAYjB,SAAUmW,EAAMkL,aAAaF,mBATpCrb,IClDN,SAASgxC,GAAT,GAIH,IAHFC,EAGC,EAHDA,YAIA,OACE,mCACE,sBAAK91C,UAAU,OAAf,UACE,qBAAKA,UAAU,cAAf,SACE,qBAAKA,UAAU,yBAAf,SACE,qBAAKA,UAAU,MAAf,SACE,oBAAIA,UAAU,oBAAd,+BAKN,qBAAKA,UAAU,wBAAf,SACE,wBAAOA,UAAU,yCAAjB,UACE,gCACE,+BACE,oBAAIA,UAAU,iBAAd,qBACA,oBAAIA,UAAU,iBAAd,uBACA,oBAAIA,UAAU,aAAd,iCAGJ,uBAAOA,UAAU,OAAjB,SACG81C,EAAY14C,OAAS,GACpB04C,EAAYzvC,KAAI,SAAC6O,EAA+BrQ,GAC9C,OAAOmvC,GAAiB9+B,EAAOrQ,aAMzC,qBAAK7E,UAAU,cAAf,SACE,qBAAKA,UAAU,yBAAf,SACG81C,EAAY14C,OAAS,EAAI,GAAK,gCAQ3C,IAAM42C,GAAmB,SAAC9+B,EAA+BrQ,GACvD,OACE,+BACE,oBAAI7E,UAAU,MAAd,SAAqB6E,EAAQ,IAC7B,oBAAI7E,UAAU,qBAAd,SAAoCkV,EAAMyI,YAC1C,qBAAI3d,UAAU,GAAd,UACGkV,EAAM0I,cAAcC,qBADvB,+BAHOhZ,ICpCPkxC,GAAoBn3C,KAAKC,IAAI,EAAG,GAE/B,SAASm3C,GAAT,GAMH,IALF/qC,EAKC,EALDA,QACAgrC,EAIC,EAJDA,cAKA,OAAQA,EAAc5pC,MACpB,IAAK,cACH,OACE,cAAC6pC,GAAD,CAAiBjrC,QAASA,EAASgrC,cAAeA,IAEtD,IAAK,gBACH,OACE,cAACE,GAAD,CAAmBlrC,QAASA,EAASgrC,cAAeA,KAK5D,SAASC,GAAT,GAMI,IALFjrC,EAKC,EALDA,QACAgrC,EAIC,EAJDA,cAKMz+B,EAAU8M,KAEV8xB,EAA0B,IAAIx2C,KAAKC,aAAa,QAAS,CAC7DuF,MAAO,UACP1F,sBAAuB,IACtBI,OAAOm2C,EAAcj8B,KAAK4B,oBAEvBy6B,EAAwB,IAAIz2C,KAAKC,aAAa,QAAS,CAC3DuF,MAAO,UACP1F,sBAAuB,IACtBI,OAAOm2C,EAAcj8B,KAAK0G,aAAeq1B,IAE5C,OACE,sBAAK/1C,UAAU,OAAf,UACE,cAACq0C,GAAD,CACEpvB,MAAM,eACNzN,QAAS,kBAAMA,EAAQvM,EAAQG,WAGjC,eAACtE,GAAA,EAAD,WACE,cAACwtC,GAAD,CAAmBrpC,QAASA,IAC5B,cAACspC,GAAD,CAAmBtpC,QAASA,IAE5B,+BACE,wDACA,oBAAIjL,UAAU,gBAAd,SAA+Bo2C,OAGjC,+BACE,+CACA,oBAAIp2C,UAAU,gBAAd,SAA+Bq2C,aAOzC,SAASF,GAAT,GAMI,IALFlrC,EAKC,EALDA,QACAgrC,EAIC,EAJDA,cAKMz+B,EAAU8M,KAChB,OACE,sBAAKtkB,UAAU,OAAf,UACE,cAACq0C,GAAD,CACEpvB,MAAM,iBACNzN,QAAS,kBAAMA,EAAQvM,EAAQG,WAGjC,eAACtE,GAAA,EAAD,WACE,cAACwtC,GAAD,CAAmBrpC,QAASA,IAC5B,cAACspC,GAAD,CAAmBtpC,QAASA,IAE3BgrC,EAAcj8B,KAAK+G,WAAW3iB,MAC7B,+BACE,sCACA,oBAAI4B,UAAU,gBAAd,SACGi2C,EAAcj8B,KAAK+G,WAAW3iB,UAKpC63C,EAAcj8B,KAAK+G,WAAWu1B,iBAC7B,+BACE,kDACA,oBAAIt2C,UAAU,gBAAd,SACGi2C,EAAcj8B,KAAK+G,WAAWu1B,qBAKpCL,EAAcj8B,KAAK+G,WAAWkJ,SAC7B,+BACE,yCACA,oBAAIjqB,UAAU,gBAAd,SACE,mBACE6Q,KAAMolC,EAAcj8B,KAAK+G,WAAWkJ,QACpCxd,OAAO,SACPqE,IAAI,sBAHN,SAKGmlC,EAAcj8B,KAAK+G,WAAWkJ,eAMtCgsB,EAAcj8B,KAAK+G,WAAWtM,SAC7B,+BACE,yCACA,oBAAIzU,UAAU,gBAAd,SACGi2C,EAAcj8B,KAAK+G,WAAWtM,aAKpCwhC,EAAcj8B,KAAKjP,MAAQkrC,EAAcj8B,KAAKjP,KAAK3N,OAAS,GAC3D,+BACE,wCACA,oBAAI4C,UAAU,gBAAd,SACE,cAACqlB,GAAD,CACEja,OAAQ,IAAI4M,IAAUi+B,EAAcj8B,KAAKjP,KAAK,GAAGK,QACjDma,MAAI,EACJD,YAAU,eCpInB,SAASixB,GAAT,GAQH,IAPFtrC,EAOC,EAPDA,QACAqoC,EAMC,EANDA,WACA1xB,EAKC,EALDA,YAMA,OAAQ0xB,EAAWjnC,MACjB,IAAK,UACH,YAAoB7Q,IAAhBomB,EACK,cAAC0I,GAAD,CAAWnlB,KAAK,wCAGvB,cAACqxC,GAAD,CACEvrC,QAASA,EACTq5B,eAAgBgP,EAAWt5B,KAC3B4H,YAAaA,IAInB,IAAK,cACH,OACE,cAAC60B,GAAD,CACExrC,QAASA,EACT2W,YAAa0xB,EAAWt5B,OAI9B,IAAK,SACH,OACE,cAAC08B,GAAD,CACEzrC,QAASA,EACT0rC,cAAerD,EAAWt5B,OAIhC,IAAK,gBACH,OAAO,cAACmN,GAAD,CAAoBlc,QAASA,KAKnC,SAASurC,GAAT,GAQH,IAPFvrC,EAOC,EAPDA,QACAq5B,EAMC,EANDA,eACA1iB,EAKC,EALDA,YAMMpK,EAAU8M,KACRvqB,EAAYkE,cAAZlE,QACF4Z,EAAQpJ,YAAaU,EAAQG,OAAO1E,WAAY3M,GACtD,OACE,sBAAKiG,UAAU,OAAf,UACE,sBAAKA,UAAU,cAAf,UACE,oBAAIA,UAAU,mDAAd,6BAGA,yBACEA,UAAU,uBACVmG,QAAS,kBAAMqR,EAAQvM,EAAQG,SAFjC,UAIE,sBAAMpL,UAAU,0BAJlB,gBASF,eAAC8G,GAAA,EAAD,WACE,+BACE,yCACA,oBAAI9G,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQH,EAAQG,OAAQka,YAAU,EAAC7mB,KAAG,SAGlDkV,GACC,+BACE,+CACA,oBAAI3T,UAAU,gBAAd,SAA+B2T,OAGnC,+BACE,+CACA,oBAAI3T,UAAU,+BAAd,SACE,cAAC,IAAD,CAAYjB,SAAUkM,EAAQlM,UAAY,SAG9C,+BACE,4CACA,oBAAIiB,UAAU,gBAAd,oBAEF,+BACE,iDACA,oBAAIA,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQk5B,EAAe1iB,YAAa0D,YAAU,EAACC,MAAI,SAGhE,+BACE,6CACA,oBAAIvlB,UAAU,gBAAd,SAC6B,OAA1B4hB,EAAYlE,UAAqB,MAAQ,UAG9C,+BACE,oDACA,oBAAI1d,UAAU,gBAAd,SACE,cAACwsB,GAAD,CAAM9P,KAAMkF,EAAYlF,KAAM6I,MAAI,SAGX,OAA1B3D,EAAYlE,WACX,+BACE,mDACA,oBAAI1d,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQwW,EAAYlE,UAAW4H,YAAU,EAACC,MAAI,eAS9D,SAASkxB,GAAT,GAMH,IAAD,EALDxrC,EAKC,EALDA,QACA2W,EAIC,EAJDA,YAKMpK,EAAU8M,KAChB,OACE,sBAAKtkB,UAAU,OAAf,UACE,sBAAKA,UAAU,cAAf,UACE,oBAAIA,UAAU,mDAAd,6CAGA,yBACEA,UAAU,uBACVmG,QAAS,kBAAMqR,EAAQvM,EAAQG,SAFjC,UAIE,sBAAMpL,UAAU,0BAJlB,gBASF,eAAC8G,GAAA,EAAD,WACE,+BACE,yCACA,oBAAI9G,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQH,EAAQG,OAAQka,YAAU,EAAC7mB,KAAG,SAGnD,+BACE,+CACA,oBAAIuB,UAAU,+BAAd,SACE,cAAC,IAAD,CAAYjB,SAAUkM,EAAQlM,UAAY,cAGlBvD,KAA3B,UAAAyP,EAAQwJ,eAAR,eAAiBqP,QAChB,+BACE,8CACA,oBAAI9jB,UAAU,gBAAd,SAA+BiL,EAAQwJ,QAAQqP,WAGnD,+BACE,6CACA,oBAAI9jB,UAAU,gBAAd,SAC6B,OAA1B4hB,EAAYlE,UAAqB,MAAQ,UAG9C,+BACE,oDACA,oBAAI1d,UAAU,gBAAd,SACE,cAACwsB,GAAD,CAAM9P,KAAMkF,EAAYlF,KAAM6I,MAAI,SAGX,OAA1B3D,EAAYlE,WACX,+BACE,mDACA,oBAAI1d,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQwW,EAAYlE,UAAW4H,YAAU,EAACC,MAAI,eAS9D,SAASmxB,GAAT,GAMH,IAAD,EALDzrC,EAKC,EALDA,QACA0rC,EAIC,EAJDA,cAKMn/B,EAAU8M,KAChB,OACE,sBAAKtkB,UAAU,OAAf,UACE,sBAAKA,UAAU,cAAf,UACE,oBAAIA,UAAU,mDAAd,2CAGA,yBACEA,UAAU,uBACVmG,QAAS,kBAAMqR,EAAQvM,EAAQG,SAFjC,UAIE,sBAAMpL,UAAU,0BAJlB,gBASF,eAAC8G,GAAA,EAAD,WACE,+BACE,yCACA,oBAAI9G,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQH,EAAQG,OAAQka,YAAU,EAAC7mB,KAAG,SAGnD,+BACE,+CACA,oBAAIuB,UAAU,+BAAd,SACE,cAAC,IAAD,CAAYjB,SAAUkM,EAAQlM,UAAY,cAGlBvD,KAA3B,UAAAyP,EAAQwJ,eAAR,eAAiBqP,QAChB,+BACE,8CACA,oBAAI9jB,UAAU,gBAAd,SAA+BiL,EAAQwJ,QAAQqP,WAGtB,OAA5B6yB,EAAcj5B,WACb,+BACE,kDACA,oBAAI1d,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQurC,EAAcj5B,UAAW4H,YAAU,EAACC,MAAI,SAI9Dta,EAAQwJ,SACP,+BACE,uCACA,oBAAIzU,UAAU,gBAAd,SACE,cAACqlB,GAAD,CAASja,OAAQH,EAAQwJ,QAAQkE,MAAO2M,YAAU,EAACC,MAAI,e,yBC1P9D,SAASqxB,GAAT,GAQH,IAPF3xB,EAOC,EAPDA,MACAzN,EAMC,EANDA,QACAq6B,EAKC,EALDA,SAMA,OACE,sBAAK7xC,UAAU,iCAAf,UACE,oBAAIA,UAAU,oBAAd,SAAmCilB,IACnC,wBACEjlB,UAAU,uBACV06B,SAAUmX,EACV1rC,QAAS,kBAAMqR,KAHjB,SAKGq6B,EACC,qCACE,sBAAM7xC,UAAU,sCADlB,aAKA,qCACE,sBAAMA,UAAU,0BADlB,kBAUH,SAAS62C,GAAT,GAQH,IAPFhF,EAOC,EAPDA,SACAx7B,EAMC,EANDA,YACAygC,EAKC,EALDA,SAMA,OACE,qBAAK92C,UAAU,cAAf,SACGqW,EACC,qBAAKrW,UAAU,yBAAf,kCAEA,wBACEA,UAAU,wBACVmG,QAAS,kBAAM2wC,KACfpc,SAAUmX,EAHZ,SAKGA,EACC,qCACE,sBAAM7xC,UAAU,sCADlB,aAKA,gBAQL,SAAS+2C,GACdC,GAGA,IADA,IAAMC,EAAoC,GACjCzzB,EAAI,EAAGA,EAAIwzB,EAAa55C,OAAQomB,IAAK,CAG5C,IAFA,IAAM9G,EAAOs6B,EAAaxzB,GAAG9G,KACvBw6B,EAAmB,CAACF,EAAaxzB,IAChCA,EAAI,EAAIwzB,EAAa55C,QAAQ,CAElC,GADiB45C,EAAaxzB,EAAI,GAAG9G,OACpBA,EAAM,MACvBw6B,EAAiBj6C,KAAK+5C,IAAexzB,IAGvC,cAA4B0zB,EAA5B,eAA8C,CAAzC,IAAIC,EAAe,KAClBhH,OAAU,EACVD,OAAW,EACXiH,EAAgB10C,KAClBytC,EAAc,UACdC,EAAa,WAEbD,EAAc,UACdC,EAAa,WAEf8G,EAAgBh6C,KAAK,CACnByf,OACAzG,UAAWkhC,EAAgBlhC,UAC3BxT,IAAK00C,EAAgB10C,IACrB80B,UAAW4f,EAAgB5f,UAC3B2Y,cACAC,aACAz4B,cAAey/B,KAKrB,OAAOF,EChGF,SAASG,GAAT,GAAoE,IAAlChsC,EAAiC,EAAjCA,OACjC1D,EAAU0D,EAAO1E,WACjBhK,EAAU4a,GAAkB5P,GAC5BoP,EAAsBS,KACtBC,EAAU,kBAAMV,EAAoB1L,GAAQ,GAAO,IAGnD6rC,EAAkB37C,IAAMma,SAAQ,WAAO,IAAD,EAC1C,cAAI/Y,QAAJ,IAAIA,GAAJ,UAAIA,EAASiP,YAAb,aAAI,EAAekK,SACVkhC,GAAmBr6C,EAAQiP,KAAKkK,SAElC,KACN,CAACnZ,IAQJ,GANApB,IAAMwB,WAAU,WACTJ,GACH8a,MAED,CAAC9P,KAEChL,EACH,OAAO,KAGT,QAAsBlB,KAAX,OAAPkB,QAAO,IAAPA,OAAA,EAAAA,EAASiP,MACX,OAAIjP,EAAQzB,SAAW8Z,EAAYkC,SAC1B,cAACsQ,GAAD,CAAa1kB,QAAQ,oBAI5B,cAACynB,GAAD,CAAWC,MAAO/S,EAASrS,KAAK,wCAIpC,IAAMkyC,EAAgBJ,EAAgBtrB,MAAK,SAAC2rB,GAAD,OAAaA,EAAQ/f,aAC1D9L,EAAiCwrB,EAAgB5wC,KACrD,YAA8D,IAA3DqW,EAA0D,EAA1DA,KAAMzG,EAAoD,EAApDA,UAAWshB,EAAyC,EAAzCA,UAAW2Y,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,WAC1C,OACE,+BACE,6BACE,cAAC7jB,GAAD,CAAWrW,UAAWA,EAAWsP,MAAI,EAACC,UAAQ,MAGhD,oBAAIxlB,UAAU,MAAd,SACE,cAACwsB,GAAD,CAAM9P,KAAMA,EAAM6I,MAAI,MAGvB8xB,GACC,oBAAIr3C,UAAU,aAAd,SACGu3B,EAAY,cAAC,KAAD,CAAQggB,KAAkB,IAAZhgB,EAAkBigB,SAAO,IAAM,QAI9D,6BACE,sBAAMx3C,UAAS,2BAAsBkwC,GAArC,SACGC,QAjBEl6B,MAyBT47B,EAAWn1C,EAAQzB,SAAW8Z,EAAYkC,SAChD,OACE,sBAAKjX,UAAU,OAAf,UACE,cAAC42C,GAAD,CACE/E,SAAUA,EACVr6B,QAAS,kBAAMA,KACfyN,MAAM,wBAER,qBAAKjlB,UAAU,wBAAf,SACE,wBAAOA,UAAU,yCAAjB,UACE,gCACE,+BACE,oBAAIA,UAAU,iBAAd,mCACA,oBAAIA,UAAU,iBAAd,kBACCq3C,GAAiB,oBAAIr3C,UAAU,iBAAd,iBAClB,oBAAIA,UAAU,aAAd,yBAGJ,uBAAOA,UAAU,OAAjB,SAAyByrB,SAG7B,cAACorB,GAAD,CACEhF,SAAUA,EACVx7B,YAAa3Z,EAAQiP,KAAK0K,YAC1BygC,SAAU,kBAlFOhgC,EAAoB1L,GAAQ,SChB9C,SAASqsC,GACd/G,EACAgH,GACC,IAAD,KACA,UAAIhH,EAAkBh+B,YAAtB,aAAI,EAAwBkmB,mBAC1B8X,EAAkBh+B,KAAKkmB,iBAAiB7zB,SAAQ,SAAColB,GAC/C,IAAMlf,EACJylC,EAAkB/jB,YAAY9pB,QAAQ2D,YAAY2jB,EAAQ6O,cAC5D0e,EAAQrwC,IAAI4D,EAAQG,OAAO1E,WAAY,CACrChI,SAAUyrB,EAAQ8O,cAAcv6B,SAChCga,KAAMyR,EAAQzR,WAKpB,UAAIg4B,EAAkBh+B,YAAtB,aAAI,EAAwBmmB,oBAC1B6X,EAAkBh+B,KAAKmmB,kBAAkB9zB,SAAQ,SAAColB,GAChD,IAAMlf,EACJylC,EAAkB/jB,YAAY9pB,QAAQ2D,YAAY2jB,EAAQ6O,cAC5D0e,EAAQrwC,IAAI4D,EAAQG,OAAO1E,WAAY,CACrChI,SAAUyrB,EAAQ8O,cAAcv6B,SAChCga,KAAMyR,EAAQzR,UCWf,SAASi/B,GAAT,GAAgE,IAAlCvsC,EAAiC,EAAjCA,OAC3BrR,EAAYkE,cAAZlE,QACF2N,EAAU0D,EAAO1E,WACjBhK,EAAU4a,GAAkB5P,GAC5BoP,EAAsBS,KACtBC,EAAU,kBAAMV,EAAoB1L,GAAQ,GAAM,IAGhDZ,EAAkBmH,IAAlBnH,cAEFotC,EAAct8C,IAAMma,SACxB,kBAAMjL,EAAcpO,IAAIsL,KACxB,CAACA,EAAS8C,IAGNysC,EAAkB37C,IAAMma,SAAQ,WAAO,IAAD,EAC1C,cAAI/Y,QAAJ,IAAIA,GAAJ,UAAIA,EAASiP,YAAb,aAAI,EAAekK,SACVkhC,GAAmBr6C,EAAQiP,KAAKkK,SAElC,KACN,CAACnZ,IAEJpB,IAAMwB,WAAU,WAAO,IAAD,IACfJ,IAAW,UAACA,EAAQiP,YAAT,iBAAC,EAAcyK,sBAAf,aAAC,EAA8Bw3B,OAC7Cp2B,MAED,CAAC9P,IA1BgE,MA4B7BpM,IAAMma,SAAQ,WAAO,IAAD,EACnDoiC,GACG,OAAPn7C,QAAO,IAAPA,GAAA,UAAAA,EAASiP,YAAT,eAAeyK,iBACf,IAAIhH,IACAioC,EAAgBJ,EAAgBtrB,MAAK,SAAC2rB,GAAD,OAAaA,EAAQ/f,aAC1D9L,EAAiC,GACjCisB,EAAU,IAAItoC,IA4HpB,OA1HA6nC,EAAgBlyC,SACd,YAAwD,IAArDkR,EAAoD,EAApDA,UAAWshB,EAAyC,EAAzCA,UAAW4Y,EAA8B,EAA9BA,WAAYD,EAAkB,EAAlBA,YAC7Br5B,EAASghC,EAAmBz7C,IAAI6Z,GACtC,GAAKY,EAAL,CAIA4gC,GAAmB5gC,EAAQ6gC,GAG3B,IAAII,EAA+B,GACnCrH,GAAqBl2B,OAAO1D,GAAQzQ,aAAarB,SAC/C,WAAyBF,GAAW,IAAjCiG,EAAgC,EAAhCA,YAAa8lC,EAAmB,EAAnBA,MACRrP,EAAWwW,GAAYjtC,EAAa/Q,EAASkc,GAC/CsrB,GACFuW,EAAU76C,KAAK,CACbskC,WACA18B,UAGJ+rC,EAAM7rC,SAAQ,SAAC+F,EAAaivB,GAC1B,IAAMwH,EAAWwW,GAAYjtC,EAAa/Q,EAASkc,GAC/CsrB,GACFuW,EAAU76C,KAAK,CACbskC,WACA18B,QACAk1B,sBAQV+d,EAAYA,EAAUrkC,QAAO,YAAmB,IAAD,IAAf8tB,EAAe,EAAfA,SACxByW,EAAYzW,EAASpE,OAAOz2B,WAC5BuxC,EAAiB1W,EAAS7E,YAAYh2B,WAE5C,UAAI,gBAAiB66B,KAAYA,EAAS7oB,KAAKrN,OAAOD,SAGpDssC,EAAQ36C,IAAIi7C,KACZ,UAAAN,EAAQt7C,IAAI47C,UAAZ,eAAwBt/B,QAAShR,OAIjCgwC,EAAQ36C,IAAIk7C,KACZ,UAAAP,EAAQt7C,IAAI67C,UAAZ,eAA6Bv/B,QAAShR,QAQhC3C,SAAQ,YAAsC,IAAnCw8B,EAAkC,EAAlCA,SAAU18B,EAAwB,EAAxBA,MAAOk1B,EAAiB,EAAjBA,WAChCl4B,EAAQ,SACRq2C,EAAe,GAMnB,IAJA,OAAIN,QAAJ,IAAIA,OAAJ,EAAIA,EAAaltC,UACf7I,EAAQ+1C,EAAYltC,QAGlB,gBAAiB62B,EACnB2W,EAAe3W,EAAS3oB,YAAYL,mBAC/B,CACL,IAAI7Z,EAAW,EAEf,UAAIk5C,QAAJ,IAAIA,OAAJ,EAAIA,EAAal5C,SACfA,EAAWk5C,EAAYl5C,cAClB,GAAIg5C,EAAQ36C,IAAIwkC,EAASpE,OAAOz2B,YAAa,CAAC,IAAD,EAClDhI,GAAW,UAAAg5C,EAAQt7C,IAAImlC,EAASpE,OAAOz2B,mBAA5B,eAAyChI,WAAY,OAC3D,GAAIg5C,EAAQ36C,IAAIwkC,EAAS7E,YAAYh2B,YAAa,CAAC,IAAD,EACvDhI,GACE,UAAAg5C,EAAQt7C,IAAImlC,EAAS7E,YAAYh2B,mBAAjC,eAA8ChI,WAAY,EAG9Dw5C,EAAe,IAAIt4C,KAAKC,aAAa,QAAS,CAC5CmqB,sBAAuBtrB,EACvBgB,sBAAuBhB,IACtBoB,OAAOtB,YAAqB+iC,EAAS/oB,OAAQ9Z,IAGlD+sB,EAAYxuB,KACV,+BACE,6BACE,cAACqvB,GAAD,CAAWrW,UAAWA,EAAWsP,MAAI,EAACG,cAAe,OAGtD2xB,GACC,oBAAIr3C,UAAU,aAAd,SACGu3B,GAAa,cAAC,KAAD,CAAQggB,KAAkB,IAAZhgB,EAAkBigB,SAAO,MAIzD,6BACE,cAACnyB,GAAD,CAASja,OAAQm2B,EAASpE,OAAQ5X,MAAI,EAACG,cAAe,OAGxD,6BACE,cAACL,GAAD,CACEja,OAAQm2B,EAAS7E,YACjBnX,MAAI,EACJG,cAAe,OAInB,+BACGwyB,EADH,IACkBr2C,KAGlB,6BACE,sBAAM7B,UAAS,2BAAsBkwC,GAArC,SACGC,QA7BEl6B,EAAYpR,GAASk1B,GAAc,aAsC7C,CACLsd,gBACA5rB,iBAED,CAAC/uB,EAASu6C,EAAiBW,EAAaxsC,EAAQ1D,EAAS3N,IAtIpDs9C,EA5B4D,EA4B5DA,cAAe5rB,EA5B6C,EA4B7CA,YAwIvB,IAAK/uB,EACH,OAAO,KAGT,QAAsBlB,KAAX,OAAPkB,QAAO,IAAPA,OAAA,EAAAA,EAASiP,MACX,OAAIjP,EAAQzB,SAAW8Z,EAAYkC,SAC1B,cAACsQ,GAAD,CAAa1kB,QAAQ,4BAGvB,cAACynB,GAAD,CAAWC,MAAO/S,EAASrS,KAAK,oCAGzC,IAAM0sC,EAAWn1C,EAAQzB,SAAW8Z,EAAYkC,SAChD,OACE,sBAAKjX,UAAU,OAAf,UACE,cAAC42C,GAAD,CACE/E,SAAUA,EACVr6B,QAAS,kBAAMA,KACfyN,MAAM,oBAER,qBAAKjlB,UAAU,wBAAf,SACE,wBAAOA,UAAU,yCAAjB,UACE,gCACE,+BACE,oBAAIA,UAAU,aAAd,mCACCq3C,GAAiB,oBAAIr3C,UAAU,aAAd,iBAClB,oBAAIA,UAAU,aAAd,oBACA,oBAAIA,UAAU,aAAd,yBACA,oBAAIA,UAAU,aAAd,oBACA,oBAAIA,UAAU,aAAd,yBAGJ,uBAAOA,UAAU,OAAjB,SAAyByrB,SAG7B,cAACorB,GAAD,CACEhF,SAAUA,EACVx7B,YAAa3Z,EAAQiP,KAAK0K,YAC1BygC,SAAU,kBApMOhgC,EAAoB1L,GAAQ,SA0MrD,SAAS2sC,GACPjtC,EACA/Q,EACAkc,GAEA,GAAI,WAAYnL,GAAuC,cAAxBA,EAAYiZ,QACzC,IAAK,IACW2e,EAAY53B,EAAY+L,OAA9BxK,KACFA,EAAOkO,aAAOmoB,EAASxB,IAE7B,GAAa,oBAAT70B,EACF,OAAOkO,aAAOzP,EAAY+L,OAAOmD,KAAM8mB,IAClC,GAAa,aAATz0B,EACT,OAAOkO,aAAOzP,EAAY+L,OAAOmD,KAAMgmB,IAEzC,MAAOp9B,GACH7I,IAAYF,IAAQI,aACtB4D,aAAY+E,EAAO,CACjBqT,eC/OH,SAASkiC,GAAT,GAAmE,IAAlC/sC,EAAiC,EAAjCA,OAChC1D,EAAU0D,EAAO1E,WACjBhK,EAAU4a,GAAkB5P,GAC5BoP,EAAsBS,KACtBC,EAAU,kBAAMV,EAAoB1L,GAAQ,GAAM,IAGlD6rC,EAAkB37C,IAAMma,SAAQ,WAAO,IAAD,EAC1C,cAAI/Y,QAAJ,IAAIA,GAAJ,UAAIA,EAASiP,YAAb,aAAI,EAAekK,SACVkhC,GAAmBr6C,EAAQiP,KAAKkK,SAElC,KACN,CAACnZ,IAEJpB,IAAMwB,WAAU,WAAO,IAAD,IACfJ,IAAW,UAACA,EAAQiP,YAAT,iBAAC,EAAcyK,sBAAf,aAAC,EAA8Bw3B,OAC7Cp2B,MAED,CAAC9P,IAlBmE,MAoBhCpM,IAAMma,SAAQ,WAAO,IAAD,EACnDoiC,GACG,OAAPn7C,QAAO,IAAPA,GAAA,UAAAA,EAASiP,YAAT,eAAeyK,iBACf,IAAIhH,IACAioC,EAAgBJ,EAAgBtrB,MAAK,SAAC2rB,GAAD,OAAaA,EAAQ/f,aAC1D9L,EAAiC,GACjCisB,EAAU,IAAItoC,IAsEpB,OApEA6nC,EAAgBlyC,SACd,YAAuE,IAApE2S,EAAmE,EAAnEA,cAAezB,EAAoD,EAApDA,UAAWshB,EAAyC,EAAzCA,UAAW2Y,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,WAC7Ct5B,EAASghC,EAAmBz7C,IAAI6Z,GACtC,GAAKY,EAAL,CAEA4gC,GAAmB5gC,EAAQ6gC,GAE3B,IAAItxC,EACF,GAEFqqC,GAAqBl2B,OAAO1D,GAAQzQ,aAAarB,SAC/C,WAAyBF,GAAW,IAAjCiG,EAAgC,EAAhCA,YAAa8lC,EAAmB,EAAnBA,MACVwH,GAAsBhtC,EAAQ1D,EAASgwC,EAAS5sC,IAClD1E,EAAanJ,KAAK6N,GAEpB1E,EAAanJ,KAAb,MAAAmJ,EAAY,YACPwqC,EAAMn9B,QAAO,SAAC3I,GAAD,OACdstC,GAAsBhtC,EAAQ1D,EAASgwC,EAAS5sC,WAMxD1E,EAAarB,SAAQ,SAACuB,EAAIzB,GACxB,IAAM0B,EAAYD,EAAGC,UAEf8xC,EAAkBvH,GACtBj6B,EACAvQ,EACAoR,GAGE2gC,GACF5sB,EAAYxuB,KACV,+BACE,6BACE,cAACqvB,GAAD,CAAWrW,UAAWA,EAAWsP,MAAI,EAACG,cAAe,OAGtD2xB,GACC,oBAAIr3C,UAAU,aAAd,SACGu3B,GAAa,cAAC,KAAD,CAAQggB,KAAkB,IAAZhgB,EAAkBigB,SAAO,MAIzD,6BAAKa,IAEL,6BACE,cAAChzB,GAAD,CACEja,OAAQ7E,EACRgf,MAAI,EACJC,UAAQ,EACRE,cAAe,OAInB,6BACE,sBAAM1lB,UAAS,2BAAsBkwC,GAArC,SACGC,QAxBEl6B,EAAYpR,WAkCxB,CACLwyC,gBACA5rB,iBAED,CAAC/uB,EAASu6C,EAAiBvvC,EAAS0D,IAhF/BisC,EApB+D,EAoB/DA,cAAe5rB,EApBgD,EAoBhDA,YAkFvB,IAAK/uB,EACH,OAAO,KAGT,QAAsBlB,KAAX,OAAPkB,QAAO,IAAPA,OAAA,EAAAA,EAASiP,MACX,OAAIjP,EAAQzB,SAAW8Z,EAAYkC,SAC1B,cAACsQ,GAAD,CAAa1kB,QAAQ,+BAI5B,cAACynB,GAAD,CAAWC,MAAO/S,EAASrS,KAAK,uCAIpC,IAAM0sC,EAAWn1C,EAAQzB,SAAW8Z,EAAYkC,SAChD,OACE,sBAAKjX,UAAU,OAAf,UACE,cAAC42C,GAAD,CACE/E,SAAUA,EACVr6B,QAAS,kBAAMA,KACfyN,MAAM,uBAER,qBAAKjlB,UAAU,wBAAf,SACE,wBAAOA,UAAU,yCAAjB,UACE,gCACE,+BACE,oBAAIA,UAAU,iBAAd,mCACCq3C,GAAiB,oBAAIr3C,UAAU,aAAd,iBAClB,oBAAIA,UAAU,aAAd,yBACA,oBAAIA,UAAU,aAAd,qBACA,oBAAIA,UAAU,aAAd,yBAGJ,uBAAOA,UAAU,OAAjB,SAAyByrB,SAG7B,cAACorB,GAAD,CACEhF,SAAUA,EACVx7B,YAAa3Z,EAAQiP,KAAK0K,YAC1BygC,SAAU,kBAxIOhgC,EAAoB1L,GAAQ,SA8IrD,SAASgtC,GACPhtC,EACA1D,EACAgwC,EACA5sC,GAEA,MAAI,aAAcA,EACTA,EAAYE,SAAS2gB,MAC1B,SAAC1gB,GAAD,aACEA,EAAQI,OAAOD,KACf,UAAAssC,EAAQt7C,IAAI6O,EAAQvE,mBAApB,eAAiCgS,QAAShR,KAGhB,kBAAvBoD,EAAY+L,QACnB,SAAU/L,EAAY+L,QAEftD,OAAOC,QAAQ1I,EAAY+L,OAAOmD,MAAM2R,MAC7C,qCAAOpuB,GAAP,kBACEA,IAAUmK,GACQ,kBAAVnK,IAAsB,UAAAm6C,EAAQt7C,IAAImB,UAAZ,eAAoBmb,QAAShR,KCrLnE,IAAMke,GAAY,IAAI/K,KAAG,GAAGhc,IAAI,IAAIgc,KAAG,KAAKgL,IAAI,IAAIhL,KAAG,IAEhD,SAASy9B,GAAT,GAAyD,IAAD,IAAjCltC,EAAiC,EAAjCA,OACtB1D,EAAUpM,IAAMma,SAAQ,kBAAMrK,EAAO1E,aAAY,CAAC0E,IAClD4O,EAAOoK,GAAe1c,GACtBuD,EAAO,OAAG+O,QAAH,IAAGA,OAAH,EAAGA,EAAMrO,KAChBA,EAAI,OAAGV,QAAH,IAAGA,GAAH,UAAGA,EAASwJ,eAAZ,iBAAG,EAAkB9I,YAArB,aAAG,EAAwBkL,OAAOmD,KAEtCkJ,EAAe5nB,IAAMma,SAAQ,WACjC,GAAI9J,EAAK4P,QAAU5P,EAAK4P,MAAMC,WAAWG,kBAAkBqL,GAAGpB,IAC5D,OAAOja,EAAK4P,MAAMC,WAAWG,kBAAkB6c,aAEhD,CAAC7sB,IAEEgX,EtHkID,SACLjb,GAEA,IAAMxJ,EAAU5C,IAAMyC,WAAWtC,IAEjC,IAAKyC,EACH,MAAM,IAAIF,MAAJ,qDAGR,OAAOE,EAAQsV,QAAQ9L,GsH3IP6wC,CAAW7wC,GACrBsb,EtH6ID,WAA4B,IAAD,EACP/kB,cAAjBlE,EADwB,EACxBA,QAASoE,EADe,EACfA,IACXpD,EAAQO,IAAMyC,WAAWtC,IACzBK,EAAWR,IAAMyC,WAAWrC,IAElC,IAAKX,IAAUe,EACb,MAAM,IAAIkC,MAAJ,0DAGR,OAAO1C,IAAMsI,aACX,SAACwH,EAAmB8X,GAClB,IAAMpN,EAAS/a,EAAMyY,QAAQpI,EAAO1E,aACpC,OAAIoP,QAAJ,IAAIA,OAAJ,EAAIA,EAAQnK,MACVqX,GACElnB,EACAsP,EACArR,EACAoE,EACA2X,EAAOnK,KAAKmX,mBACRhN,EAAOnK,KAAKmX,mBAAqB,OACjCtnB,EACJ0nB,GAGFF,GAAalnB,EAAUsP,EAAQrR,EAASoE,OAAK3C,EAAW0nB,KAG5D,CAACnoB,EAAOe,EAAU/B,EAASoE,IsHxKRq6C,GACf1B,EAAW,kBAAM9zB,EAAa5X,EAAQ8X,IAQ5C,GANA5nB,IAAMwB,WAAU,WACT6lB,GACHK,EAAa5X,EAAQ8X,KAEtB,KAEEP,EACH,OAAO,KAGT,QAAsBnnB,KAAX,OAAPmnB,QAAO,IAAPA,OAAA,EAAAA,EAAShX,MACX,OAAIgX,EAAQ1nB,SAAW8Z,EAAYkC,SAC1B,cAACsQ,GAAD,CAAa1kB,QAAQ,oBAGvB,cAACynB,GAAD,CAAWC,MAAOusB,EAAU3xC,KAAK,4BAG1C,IAAMszC,EAAc91B,EAAQhX,KAAKgX,QAAQtc,KAAI,SAACqyC,GAC5C,OAAKA,EAKH,+BACE,6BAAKA,EAAOt9B,QACZ,6BACE,cAACoR,GAAD,CAAM9P,KAAMg8B,EAAOC,cAAepzB,MAAI,MAExC,6BAAK9lB,YAAoBi5C,EAAOlgC,UAChC,6BAAK/Y,YAAoBi5C,EAAOE,iBANzBF,EAAOt9B,OAJT,QAcLy9B,EAAeJ,EAAY9sB,MAAK,SAACgP,GAAD,OAAOA,KAlDgB,EAmDIhY,EAAQhX,KAAjE0K,EAnDqD,EAmDrDA,YAAayM,EAnDwC,EAmDxCA,mBAAoBD,EAnDoB,EAmDpBA,oBACnCgvB,EAAWlvB,EAAQ1nB,SAAW8Z,EAAYkC,SAEhD,OACE,mCACE,sBAAKjX,UAAU,OAAf,UACE,qBAAKA,UAAU,cAAf,SACE,qBAAKA,UAAU,yBAAf,SACE,qBAAKA,UAAU,MAAf,SACE,oBAAIA,UAAU,oBAAd,2BAKL64C,EACC,qBAAK74C,UAAU,wBAAf,SACE,wBAAOA,UAAU,yCAAjB,UACE,gCACE,+BACE,oBAAIA,UAAU,iBAAd,mBACA,oBAAIA,UAAU,aAAd,4BACA,oBAAIA,UAAU,aAAd,2BACA,oBAAIA,UAAU,aAAd,+BAGJ,uBAAOA,UAAU,OAAjB,SAAyBy4C,SAI7B,sBAAKz4C,UAAU,YAAf,8CACoC8iB,EADpC,OAC4D,IACzDD,KAIL,qBAAK7iB,UAAU,cAAf,SACGqW,EACC,qBAAKrW,UAAU,yBAAf,yCAIA,wBACEA,UAAU,wBACVmG,QAAS,kBAAM2wC,KACfpc,SAAUmX,EAHZ,SAKGA,EACC,qCACE,sBAAM7xC,UAAU,sCADlB,aAKA,qBC/EhB,IAEM84C,GAAuC,CAC3C,iBAAkB,CAChB,CACE/qC,KAAM,YACNkX,MAAO,YACP8zB,KAAM,cAER,CACEhrC,KAAM,eACNkX,MAAO,eACP8zB,KAAM,iBAER,CACEhrC,KAAM,UACNkX,MAAO,eACP8zB,KAAM,aAGVx9B,MAAO,CACL,CACExN,KAAM,UACNkX,MAAO,UACP8zB,KAAM,aAGV3T,KAAM,CACJ,CACEr3B,KAAM,eACNkX,MAAO,eACP8zB,KAAM,iBAER,CACEhrC,KAAM,UACNkX,MAAO,UACP8zB,KAAM,aAGV,2BAA4B,CAC1B,CACEhrC,KAAM,cACNkX,MAAO,cACP8zB,KAAM,iBAGV,oBAAqB,CACnB,CACEhrC,KAAM,cACNkX,MAAO,cACP8zB,KAAM,iBAGV,sBAAuB,CACrB,CACEhrC,KAAM,gBACNkX,MAAO,gBACP8zB,KAAM,oBAKNC,GAAoB,CACxB,iBACA,SACA,OACA,SACA,UAIK,SAASC,GAAT,GAAsD,IAIvD7tC,EAJ+B1D,EAAuB,EAAvBA,QAASwxC,EAAc,EAAdA,IACtCC,EAAe70B,KACbrpB,EAAWgD,cAAXhD,OACF+e,EAAOoK,GAAe1c,GAG5B,IACE0D,EAAS,IAAI4M,IAAUtQ,GACvB,MAAOjF,IAST,OANAnH,IAAMwB,WAAU,YACTkd,GAAQ/e,IAAWrB,IAAcsB,WAAakQ,GACjD+tC,EAAa/tC,KAEd,CAAC1D,EAASzM,IAGX,sBAAK+E,UAAU,kBAAf,UACE,qBAAKA,UAAU,SAAf,SACE,qBAAKA,UAAU,cAAf,SACE,cAAC,GAAD,CAAe0H,QAASA,EAASsS,KAAMA,QAGzC5O,EAGA,cAACguC,GAAD,CAAiBhuC,OAAQA,EAAQ8tC,IAAKA,EAAKl/B,KAAMA,IAFjD,cAACsQ,GAAD,CAAWnlB,KAAI,mBAAcuC,EAAd,uBAQhB,SAAS2sC,GAAT,GAMH,IAAD,EALD3sC,EAKC,EALDA,QACAsS,EAIC,EAJDA,KAMM8R,EADoBna,IAAlBnH,cAC2BpO,IAAIsL,GACjCuD,EAAO,OAAG+O,QAAH,IAAGA,OAAH,EAAGA,EAAMrO,KAChBA,EAAI,OAAGV,QAAH,IAAGA,GAAH,UAAGA,EAASwJ,eAAZ,aAAG,EAAkB9I,KACzB0tC,EAA4B,eAAd,OAAJ1tC,QAAI,IAAJA,OAAA,EAAAA,EAAMoY,UAAiD,UAAlB,OAAJpY,QAAI,IAAJA,OAAA,EAAAA,EAAMkL,OAAOxK,MAE9D,OAAIyf,GAAgButB,EAEhB,sBAAKr5C,UAAU,sBAAf,UACE,qBAAKA,UAAU,WAAf,SACE,qBAAKA,UAAU,qCAAf,UACe,OAAZ8rB,QAAY,IAAZA,OAAA,EAAAA,EAAcD,SACb,qBACErb,IAAKsb,EAAaD,QAClBlb,IAAI,aACJ3Q,UAAU,0DAGZ,cAAC2qB,GAAD,CACEjjB,QAASA,EACT1H,UAAU,iEACVoF,MAAO,CAAEyN,MApID,UA0IhB,sBAAK7S,UAAU,0BAAf,UACE,oBAAIA,UAAU,kBAAd,mBACA,oBAAIA,UAAU,eAAd,UACe,OAAZ8rB,QAAY,IAAZA,OAAA,EAAAA,EAAc1tB,OAAQ,wBAQ/B,qCACE,oBAAI4B,UAAU,kBAAd,qBACA,oBAAIA,UAAU,eAAd,wBAKN,SAASo5C,GAAT,GAQI,IAAD,IAPDhuC,EAOC,EAPDA,OACA8tC,EAMC,EANDA,IACAl/B,EAKC,EALDA,KAMMm/B,EAAe70B,KACf5c,EAAU0D,EAAO1E,WACjB9J,EAAWC,cACTwkB,E1HxKH,WACL,IAAMA,EAAkB/lB,IAAMyC,WAAWojB,IACzC,IAAKE,EACH,MAAM,IAAIrjB,MAAJ,6DAKR,MAAO,CAAEqjB,mB0HgKmBi4B,GAApBj4B,gBAER,IAAKrH,GAAQA,EAAK/e,SAAW8Z,EAAYkC,SACvC,OAAO,cAACsQ,GAAD,IACF,GACLvN,EAAK/e,SAAW8Z,EAAYsC,kBACJ7b,KAAxB,UAAAwe,EAAKrO,YAAL,eAAW5M,UAEX,OAAO,cAACurB,GAAD,CAAWC,MAAO,kBAAM4uB,EAAa/tC,IAASjG,KAAK,iBAG5D,IAAM8F,EAAU+O,EAAKrO,KAEf4tC,EAkJR,SAAiB5tC,GACf,IAAM4tC,EAAc,CAClB,CACExrC,KAAM,UACNkX,MAAO,UACP8zB,KAAM,KAINS,EAAiB,GACjB7tC,GAAQ,WAAYA,GAAQ,SAAUA,EAAKkL,SAC7C2iC,EAAc,UAAM7tC,EAAKoY,QAAX,YAAsBpY,EAAKkL,OAAOxK,OAG9CV,GAAQA,EAAKoY,WAAW+0B,IAC1BS,EAAKt8C,KAAL,MAAAs8C,EAAI,YAAST,GAAYntC,EAAKoY,WAG5BpY,GAAQ6tC,KAAkBV,IAC5BS,EAAKt8C,KAAL,MAAAs8C,EAAI,YAAST,GAAYU,KAIxB7tC,IAECqtC,GAAkBpzC,SAAS+F,EAAKoY,UAChCi1B,GAAkBpzC,SAAS4zC,KAG7BD,EAAKt8C,KAAK,CACR8Q,KAAM,SACNkX,MAAO,SACP8zB,KAAM,YAIV,OAAOQ,EAtLME,CADH,OAAGxuC,QAAH,IAAGA,GAAH,UAAGA,EAASwJ,eAAZ,aAAG,EAAkB9I,MAG3B+tC,EAAoB,UACxB,OAAIR,GAA0D,IAAnDK,EAAK9lC,QAAO,qBAAG1F,OAAoBmrC,KAAK97C,OAC1C,cAAC,IAAD,CAAUkQ,GAAE,2BAAO1Q,GAAP,IAAiBqK,SAAS,YAAD,OAAcS,QACjDwxC,IACTQ,EAAUR,GAIV,qCACG73B,EAAgBtkB,IAAI2K,IACnB,qBAAK1H,UAAU,gCAAgCmQ,KAAK,QAApD,2IAKD,cAACwpC,GAAD,CAAa1uC,QAASA,IACtB,cAAC2uC,GAAD,CAAa3uC,QAASA,EAASiuC,IAAKQ,EAASH,KAAMA,QAK1D,SAASI,GAAT,GAAyD,IAAD,EAAjC1uC,EAAiC,EAAjCA,QACfU,EAAI,OAAGV,QAAH,IAAGA,GAAH,UAAGA,EAASwJ,eAAZ,aAAG,EAAkB9I,KAE/B,OAAIA,GAAyB,2BAAjBA,EAAKoY,QAEb,cAACwyB,GAAD,CACEtrC,QAASA,EACTqoC,WAAY3nC,EAAKkL,OACjB+K,YAAajW,EAAKiW,cAGbjW,GAAyB,UAAjBA,EAAKoY,QAEpB,cAAC+B,GAAD,CACE7a,QAASA,EACT8a,aAAcpa,EAAKkL,OAAOmD,KAC1BiK,WAAYtY,EAAKsY,WACjB+B,iBAAkBra,EAAKkL,OAAOxK,OAGzBV,GAAyB,cAAjBA,EAAKoY,QACf,cAAC4D,GAAD,CAAqB1c,QAASA,EAAS2c,aAAcjc,EAAKkL,SACxDlL,GAAyB,UAAjBA,EAAKoY,QACf,cAAC0wB,GAAD,CAAqBxpC,QAASA,EAASkzB,aAAcxyB,EAAKkL,SACxDlL,GAAyB,SAAjBA,EAAKoY,QACf,cAACywB,GAAD,CAAoBvpC,QAASA,EAASgxB,YAAatwB,EAAKkL,SACtDlL,GAAyB,WAAjBA,EAAKoY,QAEpB,cAAC6wB,GAAD,CAAsB3pC,QAASA,EAAS4pC,cAAelpC,EAAKkL,SAErDlL,GAAyB,WAAjBA,EAAKoY,QAEpB,cAACiyB,GAAD,CAAsB/qC,QAASA,EAASgrC,cAAetqC,EAAKkL,SAGvD,cAACsQ,GAAD,CAAoBlc,QAASA,IAsBxC,SAAS2uC,GAAT,GAQI,IAAD,EAPD3uC,EAOC,EAPDA,QACAiuC,EAMC,EANDA,IACAK,EAKC,EALDA,KAMMnuC,EAASH,EAAQG,OACjB1D,EAAUuD,EAAQG,OAAO1E,WACzBiF,EAAI,OAAGV,QAAH,IAAGA,GAAH,UAAGA,EAASwJ,eAAZ,aAAG,EAAkB9I,KAC/B,OACE,qCACE,qBAAK3L,UAAU,YAAf,SACE,qBAAKA,UAAU,SAAf,SACE,qBAAKA,UAAU,mBAAf,SACE,oBAAIA,UAAU,wCAAd,SACGu5C,EAAKlzC,KAAI,gBAAG4e,EAAH,EAAGA,MAAOlX,EAAV,EAAUA,KAAMgrC,EAAhB,EAAgBA,KAAhB,OACR,oBAAe/4C,UAAU,WAAzB,SACE,cAAC,IAAD,CACEA,UAAU,WACVsN,GAAItG,YAAY,YAAD,OAAaU,GAAb,OAAuBqxC,IACtCnoC,OAAK,EAHP,SAKGqU,KANIlX,cAcV,WAARmrC,GACC,qCACE,cAACluB,GAAD,CAAiB5f,OAAQA,IACzB,cAAC4lC,GAAD,CAAkB5lC,OAAQA,OAGrB,YAAR8tC,GAAqB,cAAC9B,GAAD,CAAwBhsC,OAAQA,IAC7C,cAAR8tC,GAAuB,cAACvB,GAAD,CAAoBvsC,OAAQA,IAC3C,iBAAR8tC,GAA0B,cAACf,GAAD,CAAuB/sC,OAAQA,IACjD,YAAR8tC,GAAqB,cAAC3F,GAAD,CAA0BnoC,OAAQA,IAC/C,YAAR8tC,GAAqB,cAACZ,GAAD,CAAaltC,OAAQA,IAClC,iBAAR8tC,GAA4C,UAAd,OAAJvtC,QAAI,IAAJA,OAAA,EAAAA,EAAMoY,UAC/B,cAAC2wB,GAAD,CAAWzY,YAAatwB,EAAKkL,SAEtB,gBAARqiC,GACmB,YAAd,OAAJvtC,QAAI,IAAJA,OAAA,EAAAA,EAAMoY,UACe,eAArBpY,EAAKkL,OAAOxK,MACV,cAACqpC,GAAD,CAAgBb,cAAelpC,EAAKkL,SAE/B,kBAARqiC,GACmB,YAAd,OAAJvtC,QAAI,IAAJA,OAAA,EAAAA,EAAMoY,UACe,iBAArBpY,EAAKkL,OAAOxK,MACV,cAACupC,GAAD,CAAkBf,cAAelpC,EAAKkL,SAEjC,gBAARqiC,GACmB,YAAd,OAAJvtC,QAAI,IAAJA,OAAA,EAAAA,EAAMoY,UACe,sBAArBpY,EAAKkL,OAAOxK,MACV,cAACwpC,GAAD,CAAiBC,YAAanqC,EAAKkL,OAAOmD,U,aC/V7C,SAAS6/B,GAAT,GAQH,IAPFnjC,EAOC,EAPDA,WACA7T,EAMC,EANDA,QACAi3C,EAKC,EALDA,WAMMC,EAAgBz+C,IAAMma,SAAQ,WAClC,OAAOiB,EAAWrQ,KAAI,SAAC4P,EAAWpR,GAChC,IAEIm1C,EAFE3W,EAAYxgC,EAAQ2D,YAAY3B,GAGtC,GAAIoR,EAAW,CACb,IAAMpP,EAAMw8B,EAAU4W,UAChBC,EAAel3C,IAAK4I,OAAOqK,GACjC+jC,EAyCR,YAQa,IAPXn3C,EAOU,EAPVA,QACAoT,EAMU,EANVA,UACApP,EAKU,EALVA,IAMA,OAAOszC,QAAUC,SAASC,OAAOx3C,EAASoT,EAAWpP,GAlDpCyzC,CAAgB,CACzBz3C,QAASi3C,EACT7jC,UAAWikC,EACXrzC,QAIJ,IAAM+jB,EAAQ,CACZ/lB,QACAoR,YACA1K,OAAQ83B,EACR2W,YAGF,OAAO,cAACO,GAAD,eAA6C3vB,GAA1ByY,EAAU38B,iBAErC,CAACgQ,EAAY7T,EAASi3C,IAEzB,OACE,sBAAK95C,UAAU,OAAf,UACE,qBAAKA,UAAU,cAAf,SACE,oBAAIA,UAAU,oBAAd,0BAEF,qBAAKA,UAAU,wBAAf,SACE,wBAAOA,UAAU,yCAAjB,UACE,gCACE,+BACE,oBAAIA,UAAU,aAAd,eACA,oBAAIA,UAAU,aAAd,uBACA,oBAAIA,UAAU,aAAd,oBACA,oBAAIA,UAAU,aAAd,sBACA,oBAAIA,UAAU,aAAd,0BAGJ,uBAAOA,UAAU,OAAjB,SAAyB+5C,YAmBnC,SAASQ,GAAT,GAUI,IATFtkC,EASC,EATDA,UACA1K,EAQC,EARDA,OACAyuC,EAOC,EAPDA,SACAn1C,EAMC,EANDA,MAOA,OACE,+BACE,6BACE,sBAAM7E,UAAU,6BAAhB,SAA8C6E,EAAQ,MAExD,6BACGoR,EACC,cAACqW,GAAD,CAAWrW,UAAWA,EAAWyP,cAAe,KAEhD,sBAGJ,6BACE,cAACL,GAAD,CAASja,OAAQG,EAAQga,MAAI,MAE/B,kCACgB/pB,IAAbw+C,EACC,MACEA,EACF,sBAAMh6C,UAAU,gCAAhB,mBAEA,sBAAMA,UAAU,gCAAhB,uBAGJ,6BACa,IAAV6E,GACC,sBAAM7E,UAAU,6BAAhB,4BCpGH,IAiBMw6C,GAAmB,SAACvvC,GAC/B,YAAwBzP,IAApByP,EAAQwJ,QAA8B,wBACrCxJ,EAAQwJ,QAAQyP,gBAArB,EACS,2CAIJ,SAASu2B,GAAT,GAMH,IALFrvC,EAKC,EALDA,OACAsvC,EAIC,EAJDA,UAKA,OACE,sBAAK16C,UAAU,qCAAf,UACE,cAACqlB,GAAD,CAASja,OAAQA,EAAQma,MAAI,IAC7B,cAACo1B,GAAD,CAAavvC,OAAQA,EAAQsvC,UAAWA,OAK9C,SAASC,GAAT,GAMI,IAAD,IALDvvC,EAKC,EALDA,OACAsvC,EAIC,EAJDA,UAKMhzC,EAAU0D,EAAO1E,WACjByyC,EAAe70B,KACftK,EAAOoK,GAAe1c,GAH3B,EAI2BzJ,cAApBlE,EAJP,EAIOA,QAASkB,EAJhB,EAIgBA,OASjB,GANAK,IAAMwB,WAAU,YACTkd,GAAQ/e,IAAWrB,IAAcsB,WAAakQ,GACjD+tC,EAAa/tC,KAEd,CAAC1D,EAASzM,MAET,OAAC+e,QAAD,IAACA,OAAD,EAACA,EAAMrO,MACT,OACE,uBAAM3L,UAAU,aAAhB,UACE,sBAAMA,UAAU,sCADlB,aAMJ,IAAM46C,EAAeF,GAAaA,EAAU1gC,EAAKrO,MACjD,GAAIivC,EAAc,OAAO,sBAAM56C,UAAU,eAAhB,SAAgC46C,IAEzD,aAAI5gC,EAAKrO,KAAK8I,eAAd,aAAI,EAAmByP,WACrB,OAAO,sBAAMlkB,UAAU,aAAhB,gCAGT,IAAM2Y,EAAK,UAAGqB,EAAKrO,KAAK8I,eAAb,aAAG,EAAmBkE,MAC3BkiC,EAAY,OAAGliC,QAAH,IAAGA,OAAH,EAAGA,EAAOjS,WACtBo0C,EAAaD,GAAgBtwC,YAAaswC,EAAc9gD,GAE9D,OACE,sBAAMiG,UAAU,aAAhB,SACG66C,EAAY,mBAEPC,GAAcD,EAFP,wBAGOp7C,YAAoBua,EAAKrO,KAAK5M,UAHrC,QAIT,0BC3FH,SAAS2wC,GAAT,GAA0D,IAAlC7sC,EAAiC,EAAjCA,QAAiC,EAC9BvH,IAAMS,UAAS,GADe,mBACvD82C,EADuD,KAC7CC,EAD6C,OAG9Bx3C,IAAMma,SAAQ,WAAO,IAAD,EAK9C5S,EAAQoB,OAHVC,EAFgD,EAEhDA,sBACA62C,EAHgD,EAGhDA,0BACAC,EAJgD,EAIhDA,4BAGF,OAAID,GAA6B72C,GAEtB82C,GAA+Bn4C,EAAQ2D,YAAYpJ,OADrD,CAAE69C,kBAAcz/C,EAAWoH,MAAO,kBAGD,IAA/BC,EAAQ2D,YAAYpJ,OACtB,CAAE69C,kBAAcz/C,EAAWoH,MAAO,2BAGpC,CACLq4C,aAAcp4C,EACdD,WAAOpH,KAER,CAACqH,IAnBIo4C,EAHsD,EAGtDA,aAAcr4C,EAHwC,EAGxCA,MAqBhB42B,EAAcl+B,IAAMma,SAAQ,WAChC,IAAM5S,EAAUo4C,EAChB,GAAKp4C,EACL,OAAOA,EAAQ2D,YAAYH,KAAI,SAACg9B,EAAWrK,GAAkB,IAAD,EAKtDn2B,EAAQoB,OAHVC,EAFwD,EAExDA,sBACA62C,EAHwD,EAGxDA,0BACAC,EAJwD,EAIxDA,4BAGEE,GAAW,EACX3vC,GAAS,EACTytB,EAAe90B,GACjBqH,GAAS,EACLytB,GAAgB90B,EAAwB62C,IAC1CG,GAAW,IAGbliB,GACAn2B,EAAQ2D,YAAYpJ,OAAS49C,IAE7BE,GAAW,GAGb,IAAMtwB,EAAQ,CACZoO,eACAqK,YACA93B,SACA2vC,YAGF,OAAO,cAACC,GAAD,eAAmCvwB,GAAlBoO,QAEzB,CAACiiB,IAEJ,OAAIr4C,EACK,cAAC0nB,GAAD,CAAWnlB,KAAI,sCAAiCvC,KAIvD,sBAAK5C,UAAU,OAAf,UACE,sBAAKA,UAAU,cAAf,UACE,oBAAIA,UAAU,oBAAd,iCACoB6C,EAAQ2D,YAAYpJ,OADxC,OAGA,wBACE4C,UAAS,4BACP6yC,EAAW,mBAAqB,aAElC1sC,QAAS,kBAAM2sC,GAAY,SAAC9xC,GAAD,OAAQA,MAJrC,SAMG6xC,EAAW,WAAa,cAG5BA,GAAY,cAAC/rC,GAAA,EAAD,UAAgB0yB,OAKnC,SAAS2hB,GAAT,GAUI,IATFniB,EASC,EATDA,aACAqK,EAQC,EARDA,UACA93B,EAOC,EAPDA,OACA2vC,EAMC,EANDA,SAOA,OACE,+BACE,6BACE,sBAAKl7C,UAAU,uCAAf,sBACYg5B,EAAe,EACzB,uBAAMh5B,UAAU,OAAhB,UACGuL,GACC,sBAAMvL,UAAU,6BAAhB,qBAEAk7C,GACA,sBAAMl7C,UAAU,0BAAhB,8BAKR,oBAAIA,UAAU,gBAAd,SACE,cAACy6C,GAAD,CAAoBrvC,OAAQi4B,S,cCjF7B,IAYD+X,GACJx8C,KAAKy8C,MAAM,SAA+C,EAErD,SAASC,GAAT,GAMH,IALF/9C,EAKC,EALDA,MACAg+C,EAIC,EAJDA,mBAKMC,EAAsBlgD,IAAMyW,OAA4B,MAD7D,EAEyBzW,IAAMS,WAF/B,mBAEM6G,EAFN,KAEac,EAFb,OAGuBpI,IAAMS,SAAS,GAHtC,mBAGM+8B,EAHN,KAGY2iB,EAHZ,KAIKv/C,EAAQC,cACRO,EAAUC,cACVC,EAAWC,cAEX8Q,EAAUrS,IAAMsI,aAAY,WAAO,IAAD,EAChC83C,EAAM,UAAGF,EAAoBvpC,eAAvB,aAAG,EAA6B1U,MAC5C,GAAIm+C,EAAQ,CAaV,IAAIC,EAXAz/C,EAAME,IAAI,YACZF,EAAMc,OAAO,WACbN,EAAQO,KAAR,2BAAkBL,GAAlB,IAA4BM,OAAQhB,EAAMiB,eACjCjB,EAAME,IAAI,iBACnBF,EAAMc,OAAO,eACbN,EAAQO,KAAR,2BAAkBL,GAAlB,IAA4BM,OAAQhB,EAAMiB,eAI5Cs+C,EAAQ78C,KAAKgzC,IAAI,EAAGhzC,KAAKg9C,IAAI,GAAIh9C,KAAKgD,MAAM85C,EAAOt+C,OAAS,QAG5D,IACEu+C,EAASE,WAAWrnC,KAAKsnC,KAAKJ,IAAS,SAACK,GAAD,OAAOA,EAAEC,WAAW,MAC3D,MAAOv5C,GAGP,OAFAE,QAAQC,MAAMH,QACdiB,EAAS,gCAIX,IACE,GAAIi4C,EAAOv+C,OArDjB,GAsDQ,MAAM,IAAIY,MAAM,yCACX,GAAI29C,EAAO,GAAKP,GACrB,MAAM,IAAIp9C,MAAJ,2CAA8C29C,EAAO,GAArD,MAGR,IAAM93C,EAxFd,SAAgCi3B,GAI9B,IACMpkB,EAAa,GACnB,IACE,IAAMulC,EAAgBnhB,EAAM,GAC5BA,EAAQA,EAAMv7B,MAAM,GACpB,IAAK,IAAIikB,EAAI,EAAGA,EAAIy4B,EAAez4B,IAAK,CACtC,IAAM02B,EAAepf,EAAMv7B,MAAM,EANZ,IAOrBu7B,EAAQA,EAAMv7B,MAPO,IAQrBmX,EAAWzZ,KAAKi/C,IAAOj5C,OAAOi3C,IAIhC,GAD2Bpf,EAAM,KACNmhB,EACzB,MAAM,IAAIj+C,MAAM,6BAElB,MAAOyE,GAEP,OAAO,KAIT,MAAO,CAAEI,QADOs5C,IAAQ3nC,KAAKsmB,GACXpkB,cA+DD0lC,CAAuBT,GAClC,GAAI93C,EAAI,CACN,IAAMhB,EAAUgB,EAAGhB,QACbi3C,EAAaj3C,EAAQw5C,YAC3Bd,EAAmB,CACjBzB,aACAj3C,UACA6T,WAAY7S,EAAG6S,iBAEZ,CACL,IAAM7T,EAAUs5C,IAAQ3nC,KAAKmnC,GAC7BJ,EAAmB,CACjBzB,WAAY6B,EACZ94C,YAKJ,YADAa,OAASlI,GAET,MAAOiH,GACHA,aAAezE,OAAO0F,EAASjB,EAAII,eAGzCa,OAASlI,KAEV,CAAC+/C,EAAoB7+C,EAASR,EAAOU,IAExCtB,IAAMwB,WAAU,WACd,IAAM2D,EAAQ+6C,EAAoBvpC,QAC9BxR,GAASlD,IACXkD,EAAMlD,MAAQA,EACdoQ,OAED,CAACpQ,IAGJ,OACE,sBAAKyC,UAAU,OAAf,UACE,qBAAKA,UAAU,cAAf,SACE,oBAAIA,UAAU,oBAAd,2CAEF,sBAAKA,UAAU,YAAf,UACE,0BACE84B,KAAMA,EACNnrB,QAASA,EACTqE,IAAKwpC,EACLx7C,UAAU,mEACVqS,YAZY,iDAcd,qBAAKrS,UAAU,yBAAf,SACE,qBAAKA,UAAU,gCAAf,SACG4C,GACC,qCACE,sBAAM5C,UAAU,0BAAhB,SACE,mBAAGA,UAAU,yBAGf,sBAAMA,UAAU,eAAhB,SAAgC4C,cAM1C,sBAAK5C,UAAU,cAAf,UACE,8CACA,+BACE,qBAAIA,UAAU,OAAd,UACE,2CADF,OAC4B,8DAAwC,IADpE,UAIA,qBAAIA,UAAU,OAAd,UACE,4CADF,OAC6B,0CAD7B,wBACsE,IACpE,uGAIF,+BACE,kDADF,MACmC,IACjC,sGCrKL,SAASiuC,GAAT,GAAiE,IAAlCprC,EAAiC,EAAjCA,QACpC,OACE,mCACGA,EAAQuD,aAAaC,KAAI,SAACC,EAAIzB,GAC7B,OAAO,cAAC,GAAD,CAAmChC,UAASyD,KAAIzB,SAA1BA,QAMrC,SAAS+0B,GAAT,GAQI,IAPF/2B,EAOC,EAPDA,QACAyD,EAMC,EANDA,GACAzB,EAKC,EALDA,MAKC,EAC+BvJ,IAAMS,UAAS,GAD9C,mBACM82C,EADN,KACgBC,EADhB,KAEO/4C,EAAYkE,cAAZlE,QACFwM,EAAY1D,EAAQ2D,YAAYF,EAAGG,gBACnChB,EAAcC,YAAaa,EAAUG,WAAY3M,IAAY,UAE/D4R,EAAe,UACnB,GAAIrF,EAAGqF,KAAM,CACXA,EAAO,GAIP,IAFA,IAAM2wC,EAAS,GACTC,EAAYv5C,IAAK4I,OAAOtF,EAAGqF,MAAMxO,SAAS,OACvCqmB,EAAI,EAAGA,EAAI+4B,EAAUn/C,OAAQomB,GAAK,EACzC84B,EAAOr/C,KAAKs/C,EAAUh9C,MAAMikB,EAAGA,EAAI,IAGrC7X,EAAO2wC,EAAO17C,KAAK,KAGrB,OACE,sBAAKZ,UAAU,OAAOuM,GAAE,4BAAuB1H,EAAQ,GAAvD,UACE,sBAAK7E,UAAS,qBAAiB6yC,EAAmC,GAAxB,uBAA1C,UACE,qBAAI7yC,UAAU,mDAAd,UACE,uBAAMA,UAAS,6BAAf,cAAiD6E,EAAQ,KACxDY,EAFH,kBAKA,wBACEzF,UAAS,4BACP6yC,EAAW,mBAAqB,aAElC1sC,QAAS,kBAAM2sC,GAAY,SAAC9xC,GAAD,OAAQA,MAJrC,SAMG6xC,EAAW,WAAa,cAG5BA,GACC,eAAC/rC,GAAA,EAAD,WACE,+BACE,yCACA,oBAAI9G,UAAU,gBAAd,SACE,cAACy6C,GAAD,CACErvC,OAAQvI,EAAQ2D,YAAYF,EAAGG,gBAC/Bi0C,UAAWF,UAIhBl0C,EAAG0E,SAAS3E,KAAI,SAAC2yB,EAAcn0B,GAC9B,OACE,+BACE,6BACE,sBAAK7E,UAAU,uCAAf,sBACY6E,EAAQ,EAClB,uBAAM7E,UAAU,OAAhB,UACGg5B,EAAen2B,EAAQoB,OAAOC,uBAC7B,sBAAMlE,UAAU,6BAAhB,oBAID6C,EAAQ25C,kBAAkBxjB,IACzB,sBAAMh5B,UAAU,+BAAhB,8BAOR,oBAAIA,UAAU,gBAAd,SACE,cAACy6C,GAAD,CACErvC,OAAQvI,EAAQ2D,YAAYwyB,SApBzBn0B,MA0Bb,+BACE,mDACmB,sBAAM7E,UAAU,aAAhB,sBAEnB,oBAAIA,UAAU,gBAAd,SACE,qBAAKA,UAAU,0CAAf,SACG2L,cA7DoD9G,GCbrE,SAAS43C,GAAYv1C,EAAyB9I,GAC5C,IAAMs+C,EAAQx1C,EAAO9K,IAAIgC,GACzB,GAAc,OAAVs+C,EAAgB,OAAO,EAC3B,IACE,OAAOC,mBAAmBD,GAC1B,MAAOj6C,GACP,OAAO,GA0CX,SAASm6C,GACP11C,GAEA,IAAM21C,EAAeJ,GAAYv1C,EAAQ,WACnC41C,EAAkBL,GAAYv1C,EAAQ,cAExC61C,GAAa,EAMjB,IALwB,IAApBD,IACF51C,EAAOlK,OAAO,cACd+/C,GAAa,GAGa,mBAAjBF,EAMT,OALIA,IACF31C,EAAOlK,OAAO,WACdkK,EAAOlK,OAAO,cACd+/C,GAAa,GAER,CAAC,GAAIA,GAGd,IAAIrmC,OAA4Clb,EAChD,GAA+B,kBAApBshD,EACT,IACEpmC,EA7DN,SAA0BomC,GACxB,IAAIpmC,EACJ,IACEA,EAAahS,KAAKs4C,MAAMF,GACxB,MAAOr6C,GACP,MAAM,IAAIzE,MAAM,sCAGlB,IAAKgG,MAAMg2B,QAAQtjB,GACjB,MAAM,IAAI1Y,MAAM,wCAGlB,IAZoE,EAY9Di/C,EAAqC,GAZyB,eAa5CvmC,GAb4C,IAapE,2BAAoC,CAAC,IAA1BT,EAAyB,QAClC,GAAkB,OAAdA,EAAJ,CAKA,GAAyB,kBAAdA,EACT,MAAM,IAAIjY,MAAM,6BAGlB,IACEk+C,IAAOtwC,OAAOqK,GACdgnC,EAAgBhgD,KAAKgZ,GACrB,MAAOxT,GACP,MAAM,IAAIzE,MAAM,uCAZhBi/C,EAAgBhgD,KAAKgZ,IAf2C,8BA+BpE,OAAOgnC,EA8BUC,CAAiBJ,GAC9B,MAAOr6C,GACPyE,EAAOlK,OAAO,cACd+/C,GAAa,EAIjB,IACE,IAAMpB,EAASE,WAAWrnC,KAAKsnC,KAAKe,IAAe,SAACd,GAAD,OAAOA,EAAEC,WAAW,MAEvE,GAAIL,EAAOv+C,OF/Eb,GEgFI,MAAM,IAAIY,MAAM,+BASlB,MAAO,CALM,CACX6E,QAFcs5C,IAAQ3nC,KAAKmnC,GAG3B7B,WAAY6B,EACZjlC,cAEYqmC,GACd,MAAOt6C,GAGP,OAFAyE,EAAOlK,OAAO,WACd+/C,GAAa,EACN,CAACF,GAAc,IAInB,SAASM,GAAT,GAIH,IAHFlnC,EAGC,EAHDA,UAGC,EACqC3a,IAAMS,WAD3C,mBACM4wB,EADN,KACmBywB,EADnB,KAEKlhD,EAAQC,cACRO,EAAUC,cACVC,EAAWC,cAJhB,EAKqCvB,IAAMS,WAL3C,mBAKMshD,EALN,KAKmBC,EALnB,KAQDhiD,IAAMwB,WAAU,WACd,IAAImZ,GACA0W,EAAa,CACf,IAAI4wB,GAAmB,EAEvB,QAA+B/hD,IAA3BmxB,EAAYjW,WAA0B,CACxC,IAAMomC,EAAkBU,mBACtB94C,KAAKC,UAAUgoB,EAAYjW,aAEzBxa,EAAME,IAAI,gBAAkB0gD,IAC9BS,GAAmB,EACnBrhD,EAAMmL,IAAI,aAAcy1C,IAI5B,IAAMpB,EAAS+B,KACbC,OAAOC,aAAaC,MAAM,KAA1B,YAAoCjxB,EAAYmtB,cAE5C+D,EAAWL,mBAAmB9B,GAChCx/C,EAAME,IAAI,aAAeyhD,IAC3BN,GAAmB,EACnBrhD,EAAMmL,IAAI,UAAWw2C,IAGnBN,GACF7gD,EAAQO,KAAR,2BAAkBL,GAAlB,IAA4BM,OAAQhB,EAAMiB,iBAG7C,CAACjB,EAAOywB,EAAa1W,EAAWvZ,EAASE,IAE5C,IAAMkhD,EAAQxiD,IAAMsI,aAAY,WAC9B1H,EAAMc,OAAO,WACbN,EAAQO,KAAR,2BAAkBL,GAAlB,IAA4BM,OAAQhB,EAAMiB,cAC1CigD,OAAe5hD,KACd,CAACU,EAAOU,EAAUF,IAkBrB,OAfApB,IAAMwB,WAAU,WACd,IAAI6vB,IAAe1W,EAAnB,CADoB,MAGS2mC,GAAgB1gD,GAHzB,mBAGbwE,EAHa,WAKlBhE,EAAQO,KAAR,2BAAkBL,GAAlB,IAA4BM,OAAQhB,EAAMiB,cAGtB,kBAAXuD,EACT48C,EAAe58C,GAEf08C,EAAe18C,MAEhB,CAACxE,EAAOywB,EAAa1W,EAAWvZ,EAASE,IAG1C,sBAAKoD,UAAU,iBAAf,UACE,qBAAKA,UAAU,SAAf,SACE,qBAAKA,UAAU,cAAf,SACE,oBAAIA,UAAU,eAAd,uCAGHiW,EACC,cAAC8nC,GAAD,CAAe9nC,UAAWA,EAAW6nC,MAAOA,IAC1CnxB,EACF,cAACqxB,GAAD,CAAYrxB,YAAaA,EAAasxB,QAASH,IAE/C,cAACxC,GAAD,CAAU/9C,MAAO8/C,EAAa9B,mBAAoB6B,OAM1D,SAASW,GAAT,GAKI,IAAD,EAJD9nC,EAIC,EAJDA,UAKMxB,EAAUqiB,GAAyB7gB,GACnCioC,EAAmBjnB,KAEnBv6B,EAAUC,cACVC,EAAWC,cACX8vB,EAAW,OAAGlY,QAAH,IAAGA,GAAH,UAAGA,EAAS9I,YAAZ,aAAG,EAAelN,IAC7Bq/C,EAAQxiD,IAAMsI,aAAY,WAC9BlH,EAAQO,KAAR,2BAAkBL,GAAlB,IAA4BqK,SAAU,qBACrC,CAACvK,EAASE,IAOb,GAJAtB,IAAMwB,WAAU,WACT2X,GAASypC,EAAiBjoC,KAC9B,CAACA,EAAWxB,EAASypC,KAEnBzpC,GAAWA,EAAQxZ,SAAW8Z,EAAYkC,SAC7C,OAAO,cAACsQ,GAAD,IACF,GAAI9S,EAAQxZ,SAAW8Z,EAAYsC,YACxC,OACE,cAACiT,GAAD,CACEC,MAlBqB,kBAAM2zB,EAAiBjoC,IAmB5C9Q,KAAK,gCAGJ,IAAKwnB,EACV,OACE,cAACrC,GAAD,CACEnlB,KAAK,4BACLolB,MAAOuzB,EACPtzB,UAAU,UA9Bf,IAmCO3nB,EAAwB8pB,EAAxB9pB,QAAS6T,EAAeiW,EAAfjW,WACX7S,EAAK,CAAEhB,UAASi3C,WAAYj3C,EAAQw5C,YAAa3lC,cAEvD,OAAO,cAACsnC,GAAD,CAAYrxB,YAAa9oB,EAAIo6C,QAASH,IAG/C,SAASE,GAAT,GAMI,IALFrxB,EAKC,EALDA,YACAsxB,EAIC,EAJDA,QAKQp7C,EAAoC8pB,EAApC9pB,QAASi3C,EAA2BntB,EAA3BmtB,WAAYpjC,EAAeiW,EAAfjW,WAE7B,OACE,qCACE,cAAC,GAAD,CAAc7T,QAASA,EAASpE,IAAKq7C,EAAYmE,QAASA,IAC1D,cAAC56C,GAAA,EAAD,CAAeR,QAASA,IACvB6T,GACC,cAACmjC,GAAD,CACEh3C,QAASA,EACT6T,WAAYA,EACZojC,WAAYA,IAGhB,cAAC,GAAD,CAAcj3C,QAASA,IACvB,cAAC,GAAD,CAAqBA,QAASA,OAKpC,IC9QYs7C,GCFAC,GFgRNC,GACkB,IAGxB,SAASj4B,GAAT,GAQI,IJ5RFk4B,EIqRAz7C,EAOC,EAPDA,QACApE,EAMC,EANDA,IACAw/C,EAKC,EALDA,QAMMpO,EACJhtC,EAAQoB,OAAOC,sBAAwBm6C,GACnCE,GJ/RND,EI+RkDzO,EJ7R3C,SAAC5kC,GACN,YAAwBzP,IAApByP,EAAQwJ,QAA8B,wBACrCxJ,EAAQwJ,QAAQkE,MAAMtN,OAAO7B,IAAcjD,WAG5C0E,EAAQwJ,QAAQqP,MAAQ,EACnB,yCACL7Y,EAAQlM,SAAWu/C,EACd,mCADT,EAJS,4CI4RL1Q,EAAOtyC,IAAMma,SAAQ,WAEzB,OADiB,EAAI,GAAK5S,EAAQoB,OAAOC,sBACvBzF,EAAIrB,SACrB,CAACyF,EAASpE,IAEb,OACE,mCACE,sBAAKuB,UAAU,OAAf,UACE,sBAAKA,UAAU,cAAf,UACE,oBAAIA,UAAU,oBAAd,kCACA,wBAAQA,UAAU,8BAA8BmG,QAAS83C,EAAzD,sBAIF,eAACn3C,GAAA,EAAD,WACE,+BACE,iDACA,oBAAI9G,UAAU,gBAAd,SACE,sBAAKA,UAAU,qCAAf,UACG4tC,EADH,SAEE,uBACE5tC,UACE4tC,GAAQ4Q,IAAmB,aAAe,eAF9C,qCAK2BA,IAL3B,oBAUN,+BACE,sCACA,oBAAIx+C,UAAU,gBAAd,SACE,sBAAKA,UAAU,qCAAf,UACE,cAAC,IAAD,CAAYjB,SAAU8wC,IACtB,sBAAM7vC,UAAU,aAAhB,wCAC2Bq+C,GAD3B,uBAMN,+BACE,6BACE,sBAAKr+C,UAAU,uCAAf,sBAEE,uBAAMA,UAAU,OAAhB,UACE,sBAAMA,UAAU,6BAAhB,oBACA,sBAAMA,UAAU,+BAAhB,8BAIN,oBAAIA,UAAU,aAAd,SACkC,IAA/B6C,EAAQ2D,YAAYpJ,OACnB,eAEA,cAACq9C,GAAD,CACErvC,OAAQvI,EAAQ2D,YAAY,GAC5Bk0C,UAAW6D,iBChTtB,SAASE,GACd1jD,EACAC,GAEA,OAAQA,EAAOqR,MACb,KAAK8xC,GAAwBO,iBAC3B,IAAMnnB,EAAYx8B,EAAMw8B,WAAav8B,EAAO2Q,KAAK4rB,UACjD,OAAO,2BACFx8B,GADL,IAEE4jD,cAAe3jD,EAAO2Q,KACtB4rB,cAIJ,KAAK4mB,GAAwBS,eAC3B,GAAI5jD,EAAO2Q,KAAKvO,OAAS,EACvB,OAAOrC,EAGT,IAAM8jD,EAAU7jD,EAAO2Q,KACpB8H,QAAO,SAACqrC,GACP,OAA2B,IAApBA,EAAOC,YAEf14C,KAAI,SAACy4C,GACJ,OAAOA,EAAOE,iBAAmBF,EAAOC,YAEzCx/C,MAAM,EAAG,IAEN0/C,EAAgBJ,EAAQzhD,OAAS,GAAKyhD,EAAQzhD,OAAS,GACvD8hD,EACJL,EAAQptC,QAAO,SAAC0tC,EAAaC,GAC3B,OAAOD,EAAMC,IACZ,GAAKH,EAEJhkD,EAC6B,IAAjCF,EAAMsoB,UAAUg8B,aACZC,GAAmBC,MACnBD,GAAmBz2B,QAEzB,OAAO,2BACF9tB,GADL,IAEEmkD,iBACAM,iBAAkBX,EAAQ,GAC1B5jD,WAIJ,KAAKkjD,GAAwBsB,aAC3B,IAAMxkD,EACqB,IAAzBF,EAAMmkD,eACFI,GAAmBC,MACnBD,GAAmBz2B,QAErB0O,EAAYx8B,EAAMw8B,UActB,OAVEx8B,EAAM4jD,eACmB,IAAzB5jD,EAAMmkD,gBACNlkD,EAAO2Q,KAAK0zC,cAAgBtkD,EAAM4jD,cAAcjiC,OAEhD6a,EACEx8B,EAAM4jD,cAAcpnB,WACnBv8B,EAAO2Q,KAAK0zC,aAAetkD,EAAM4jD,cAAcjiC,MAC9C9d,KAAKy8C,MAA6B,IAAvBtgD,EAAMmkD,iBAGhB,2BACFnkD,GADL,IAEEsoB,UAAWroB,EAAO2Q,KAClB1Q,SACAs8B,cAIJ,KAAK4mB,GAAwBuB,SAC3B,OAAO,2BACF3kD,GADL,IAEEE,OAAQqkD,GAAmBthD,QAG/B,KAAKmgD,GAAwBwB,MAC3B,OAAO,eACF3kD,EAAO2Q,MAGd,QACE,OAAO5Q,GChGN,SAAS6kD,GACd7kD,EACAC,GAEA,OAAQA,EAAOqR,MACb,KAAK+xC,GAA0BQ,eAC7B,GAAI5jD,EAAO2Q,KAAKvO,OAAS,EACvB,OAAOrC,EAGT,IAAI8kD,EAAQ7kD,EAAO2Q,KAChB8H,QAAO,SAACqrC,GACP,OAAkC,IAA3BA,EAAOgB,mBAEfz5C,KAAI,SAACy4C,GACJ,OAAOA,EAAOgB,gBAAkBhB,EAAOE,oBAGrCe,EAASF,EAAM,GACfG,EAASC,GAAmBJ,EAAO,GACnCK,EAAOD,GAAmBD,EAAQ,GAElCG,EAAc,CAClBN,MAAOj+C,GAAMi+C,EAAMtgD,MAAM,EAAG,KAAKo1C,UACjCqL,OAAQp+C,GAAMo+C,EAAOzgD,MAAM,EAAG,KAAKo1C,UACnCuL,KAAMt+C,GAAMs+C,EAAK3gD,MAAM,EAAG,KAAKo1C,WAG3ByL,EAAgBxhD,KAAKgzC,IACzBhzC,KAAKgzC,IAAL,MAAAhzC,KAAI,YAAQuhD,EAAYN,QACxBjhD,KAAKgzC,IAAL,MAAAhzC,KAAI,YAAQuhD,EAAYH,SACxBphD,KAAKgzC,IAAL,MAAAhzC,KAAI,YAAQuhD,EAAYD,QAGpBjlD,EACuB,IAA3BF,EAAMslD,iBACFf,GAAmBC,MACnBD,GAAmBz2B,QAEzB,OAAO,2BACF9tB,GADL,IAEEqlD,gBACAL,SACAI,cACAllD,WAIJ,KAAKmjD,GAA0BkC,oBAC7B,IAAMrlD,EACa,IAAjBF,EAAMglD,OACFT,GAAmBC,MACnBD,GAAmBz2B,QAEzB,OAAO,2BACF9tB,GADL,IAEEslD,iBAAkBrlD,EAAO2Q,KACzB1Q,WAIJ,KAAKmjD,GAA0BsB,SAC7B,OAAO,2BACF3kD,GADL,IAEEE,OAAQqkD,GAAmBthD,QAG/B,KAAKogD,GAA0BuB,MAC7B,OAAO,eACF3kD,EAAO2Q,MAGd,QACE,OAAO5Q,GAIb,SAASklD,GAAmBM,EAAkBC,GAC5C,OAAOD,EAAO9uC,QAAO,SAAC/Q,EAAkB+/C,EAAaj9B,GACnD,IAAMk9B,EAAmB9hD,KAAKy8C,MAAM73B,EAAIg9B,GACpC9/C,EAAOtD,OAASsjD,EAAmB,GACrChgD,EAAOzD,KAAK,GAEd,IAAM0jD,EAAOjgD,EAAOggD,GACdE,GAAgBH,EAAME,IAAUn9B,EAAIg9B,EAAU,GAEpD,OADA9/C,EAAOggD,GAAoBC,EAAOC,EAC3BlgD,IACN,IAGL,SAASkB,GAAM2+C,GACb,OAAOA,EAAOl6C,KAAI,SAACw6C,GAAD,OAAOjiD,KAAKgD,MAAMi/C,O,SD1H1B1C,O,mCAAAA,I,+BAAAA,I,uCAAAA,I,uBAAAA,I,kBAAAA,Q,cCFAC,O,6CAAAA,I,mCAAAA,I,uBAAAA,I,kBAAAA,Q,KCAL,IAQKkB,I,SAAAA,O,qBAAAA,I,iBAAAA,I,kBAAAA,Q,KAMZ,IAAMwB,GAA0C,CAC9C7lD,OAAQqkD,GAAmBz2B,QAC3Bk3B,OAAQ,EACRK,cAAe,EACfD,YAAa,CACXN,MAAO,GACPG,OAAQ,GACRE,KAAM,IAERG,iBAAkB,GAGdU,GAAsC,CAC1C9lD,OAAQqkD,GAAmBz2B,QAC3Bq2B,eAAgB,EAChBM,iBAAkB,EAClBn8B,UAAW,CACTg8B,aAAc,EACd2B,YAAa,EACb5lC,MAAO,EACP6lC,UAAW,EACXC,aAAc,IAKZC,GAAuB7lD,IAAMC,mBAQjCC,GAGI4lD,GAAmB9lD,IAAMC,mBAC7BC,GAII6lD,GAAqB/lD,IAAMC,mBAC/BC,GAWK,SAAS8lD,GAAT,GAA0D,IAApB1lD,EAAmB,EAAnBA,SAAmB,EACrCqC,cAAjBlE,EADsD,EACtDA,QAASoE,EAD6C,EAC7CA,IAD6C,EAElC7C,IAAMS,UAAS,GAFmB,mBAEvD+Q,EAFuD,KAE/Cy0C,EAF+C,OAGfjmD,IAAMO,WACnD4iD,GACAsC,IAL4D,mBAGvDS,EAHuD,KAGxCC,EAHwC,OAOXnmD,IAAMO,WACvD+jD,GACAkB,IAT4D,mBAOvDY,EAPuD,KAOtCC,EAPsC,KA0J9D,SAASC,IACPH,EAAsB,CACpBp1C,KAAM8xC,GAAwBwB,MAC9Bh0C,KAAMo1C,KAERY,EAAwB,CACtBt1C,KAAM+xC,GAA0BuB,MAChCh0C,KAAMm1C,KArJVxlD,IAAMwB,WAAU,WACd,GAAKgQ,GAAW3O,EAAhB,CAEA,IAAMV,EArBV,SAAuBU,GACrB,IACE,OAAO,IAAIT,IAAWS,GACtB,MAAOyE,KAkBYi/C,CAAc1jD,GAEjC,GAAKV,EAAL,CAEA,IAAIqkD,EAA0B,KAExBC,EAAqB,yCAAG,6BAAAvkD,EAAA,+EAEJC,EAAWukD,4BAC/B,KAHwB,aAEpBnD,EAFoB,QAMdzhD,OAAS,GANK,iDAW1BukD,EAAwB,CACtBt1C,KAAM+xC,GAA0BQ,eAChCjzC,KAAMkzC,IAGR4C,EAAsB,CACpBp1C,KAAM8xC,GAAwBS,eAC9BjzC,KAAMkzC,IAlBkB,kDAqBtB9kD,IAAYF,IAAQO,QACtByD,aAAY,EAAD,GAAQ,CAAEM,QAEnB,gBAAiBH,QACnB2jD,EAAwB,CACtBt1C,KAAM+xC,GAA0BsB,SAChC/zC,KAAM,KAAMxO,aAEdskD,EAAsB,CACpBp1C,KAAM8xC,GAAwBuB,SAC9B/zC,KAAM,KAAMxO,cAGhBokD,GAAU,GAlCgB,0DAAH,qDAsCrBU,EAAmB,yCAAG,6BAAAzkD,EAAA,+EAEOC,EAAWwkD,sBAFlB,OAElB5B,EAFkB,OAGxBsB,EAAwB,CACtBt1C,KAAM+xC,GAA0BkC,oBAChC30C,KAAM00C,IALgB,gDAQpBtmD,IAAYF,IAAQO,QACtByD,aAAY,EAAD,GAAQ,CAAEM,QAEnB,gBAAiBH,OACnB2jD,EAAwB,CACtBt1C,KAAM+xC,GAA0BsB,SAChC/zC,KAAM,KAAMxO,aAGhBokD,GAAU,GAjBc,yDAAH,qDAqBnBn+B,EAAY,yCAAG,6BAAA5lB,EAAA,+EAEOC,EAAW2lB,eAFlB,OAEXC,EAFW,OAGjBy+B,EAAWz+B,EAAUg8B,aACrBoC,EAAsB,CACpBp1C,KAAM8xC,GAAwBsB,aAC9B9zC,KAAM0X,IANS,gDASbtpB,IAAYF,IAAQO,QACtByD,aAAY,EAAD,GAAQ,CAAEM,QAEnB,gBAAiBH,OACnByjD,EAAsB,CACpBp1C,KAAM8xC,GAAwBuB,SAC9B/zC,KAAM,KAAMxO,aAGhBokD,GAAU,GAlBO,yDAAH,qDAsBZ/pB,EAAY,yCAAG,6BAAAh6B,EAAA,0DACfskD,EADe,0CAGSrkD,EAAW+5B,aAAasqB,GAHjC,OAIG,QADZvqB,EAHS,SAKbkqB,EAAsB,CACpBp1C,KAAM8xC,GAAwBO,iBAC9B/yC,KAAM,CACJ+Q,KAAMolC,EACNvqB,UAAuB,IAAZA,KATF,yGAAH,qDAmBZ2qB,EAAsBv4B,YAC1Bo4B,EA5LqC,KA+LjCI,EAA2Bx4B,YAC/Bs4B,EA/LoC,KAkMhCG,EAAoBz4B,YAAYvG,EAjMP,KAkMzBi/B,EAAoB14B,YAAY6N,EAjMP,KA0M/B,OAPAuqB,IACAE,IACA,wBAAC,uBAAAzkD,EAAA,sEACO4lB,IADP,uBAEOoU,IAFP,0CAAD,GAKO,WACL5N,cAAcs4B,GACdt4B,cAAcu4B,GACdv4B,cAAcw4B,GACdx4B,cAAcy4B,QAEf,CAACv1C,EAAQ/S,EAASoE,IAGrB7C,IAAMwB,WAAU,WACd,OAAO,WACL8kD,OAED,CAACzjD,IAaJ,IAAMmkD,EAAchnD,IAAMsI,aAAY,WACpC69C,EAAsB,CACpBp1C,KAAM8xC,GAAwBuB,SAC9B/zC,KAAM,4BAERg2C,EAAwB,CACtBt1C,KAAM+xC,GAA0BsB,SAChC/zC,KAAM,4BAERhJ,QAAQC,MAAM,2BACd2+C,GAAU,KACT,IAEGh3B,EAAQjvB,IAAMsI,aAAY,WAC9Bg+C,IACAL,GAAU,KACT,IAEH,OACE,cAACJ,GAAqB7jD,SAAtB,CACEC,MAAO,CAAEgkD,YAAWe,cAAa/3B,QAAOzd,UAD1C,SAGE,cAACs0C,GAAiB9jD,SAAlB,CAA2BC,MAAO,CAAEyc,KAAMwnC,GAA1C,SACE,cAACH,GAAmB/jD,SAApB,CAA6BC,MAAO,CAAEyc,KAAM0nC,GAA5C,SACG9lD,QAOJ,SAAS2mD,KACd,IAAMrkD,EAAU5C,IAAMyC,WAAWojD,IACjC,IAAKjjD,EACH,MAAM,IAAIF,MAAJ,kDAER,OAAOE,EAWF,SAASskD,KACd,IAAMtkD,EAAU5C,IAAMyC,WAAWsjD,IACjC,IAAKnjD,EACH,MAAM,IAAIF,MAAJ,0DAER,OAAOE,EAAQ8b,K,wDC9RV,SAASyoC,KACd,OACE,sBAAKziD,UAAU,OAAf,UACE,qBAAKA,UAAU,cAAf,SACE,oBAAIA,UAAU,oBAAd,sCAEF,cAAC0iD,GAAD,OAKN,SAASA,KACP,IAAMhB,EAAkBc,KAExB,OAAId,EAAgBzmD,SAAWqkD,GAAmBC,MAE9C,cAACoD,GAAD,CACE//C,MAAO8+C,EAAgBzmD,SAAWqkD,GAAmBthD,QAKpD,cAAC4kD,GAAD,CAAalB,gBAAiBA,IAIvC,IClCYmB,GDkCNC,GAAmB,CAAC,QAAS,SAAU,QACvCC,GAAc,CAClBlD,MAAO,CACLlsC,MAAO,SAAC9O,GAAD,OAAmBA,GAC1B8jB,SAAU,OAEZq3B,OAAQ,CACNrsC,MAAO,SAAC9O,GAAD,OAA2B,EAARA,GAC1B8jB,SAAU,MAEZu3B,KAAM,CACJvsC,MAAO,SAAC9O,GAAD,OAA2B,GAARA,GAC1B8jB,SAAU,OAIRq6B,GAAiB,SAAqBC,GAE1C,IAAIC,EAAYC,SAASC,eAAe,mBAWxC,GARKF,KACHA,EAAYC,SAASE,cAAc,QACzB92C,GAAK,kBACf22C,EAAUr4B,UAAV,8BACAs4B,SAAS1hC,KAAKqJ,YAAYo4B,IAIC,IAAzBD,EAAaK,QAAjB,CAMA,GAAIL,EAAaxhC,KAAM,CAAC,IAAD,EACIwhC,EAAaM,WAAW,GAAzC5vC,EADa,EACbA,MAAOpW,EADM,EACNA,MACTimD,EAAiBN,EAAUO,cAAc,OAC/C,GAAID,EAAgB,CAClB,IAAIE,EAAS,6BAAyBnmD,EAAzB,cACbmmD,GAAS,6BAA0B/vC,EAA1B,UACT6vC,EAAe34B,UAAY64B,GAK/B,IACMC,EADkBhT,KAAKiT,OAAOC,OACZC,wBACxBZ,EAAU99C,MAAMk+C,QAAU,IAC1BJ,EAAU99C,MAAM2+C,KACdJ,EAASI,KAAOC,OAAOC,YAAchB,EAAaiB,OAAS,KAC7DhB,EAAU99C,MAAM++C,IACdR,EAASQ,IAAMH,OAAOI,YAAcnB,EAAaoB,OAAS,UAtB1DnB,EAAU99C,MAAMk+C,QAAU,KAyE9B,SAASV,GAAT,GAA6D,IAAtClB,EAAqC,EAArCA,gBACbvB,EAAuCuB,EAAvCvB,YAAaJ,EAA0B2B,EAA1B3B,OAAQK,EAAkBsB,EAAlBtB,cAD6B,EAE9B9kD,IAAMS,SAAiB,SAFO,mBAEnDwkD,EAFmD,KAE3C+D,EAF2C,KAGpDC,EAAa3lD,KAAKgD,MAAMm+C,GAAQh2B,eAAe,SAC/Cs2B,EAAmB,cAACmE,GAAD,CAA0BxqC,KAAM0nC,IACnD+C,EAAatE,EAAYI,GACzBmE,EAAeppD,IAAMma,SACzB,kBAvDkB,SAAC2qC,GACrB,MAAO,CACLuE,SAAU,CACRC,WAAW,EACXC,SAAS,EACTC,OAAQ9B,IAEV+B,OAAQ,CACN35B,SAAS,GAEX45B,OAAQ,CACNC,MAAO,CACL,CACEC,MAAO,CACL95B,SAAS,GAEX+5B,UAAW,CACT/5B,SAAS,KAIfg6B,MAAO,CACL,CACEF,MAAO,CACLG,SAAU,IACVC,SAAU,GACVC,UAAW,OACXC,aAAa,EACbp6B,SAAS,EACTq6B,aAAcrF,GAEhB+E,UAAW,CACT/5B,SAAS,MAKjBs6B,UAAW,CACTrZ,SAAU,GAEZsZ,MAAO,CACLC,kBAAmB,GAErBC,4BAA6B,GAYvBC,CAAc1F,KACpB,CAACA,IAGG2F,EAAetB,EAAWrnD,OAC1B4oD,EAA6B,CACjCC,OAAQxB,EAAWp+C,KAAI,SAACkvC,EAAK/xB,GAC3B,MAAM,GAAN,OAAUu/B,GAAYxC,GAAQ5sC,MAAMoyC,EAAeviC,GAAnD,cAEF0iC,SAAU,CACR,CACEC,gBAAiB,UACjBC,qBAAsB,UACtBC,YAAa,EACb16C,KAAM84C,EAAWp+C,KAAI,SAACkvC,GAAD,OAASA,GAAO,QAK3C,OACE,qCACE,eAACzuC,GAAA,EAAD,WACE,+BACE,oBAAI9G,UAAU,QAAd,+BACA,qBAAIA,UAAU,+BAAd,UAA8CqgD,EAA9C,UAEF,+BACE,oBAAIrgD,UAAU,QAAd,2CACA,qBAAIA,UAAU,+BAAd,UAA8CukD,EAA9C,UAEF,+BACE,oBAAIvkD,UAAU,QAAd,qBACA,oBAAIA,UAAU,+BAAd,yBAIJ,oBAAIA,UAAU,SAEd,qBAAKA,UAAU,iBAAf,SACE,sBAAKA,UAAU,0DAAf,UACE,sBAAKA,UAAU,uCAAf,UACE,sBAAMA,UAAU,oBAAhB,yBAEA,qBAAKA,UAAU,eAAf,SACG8iD,GAAOz8C,KAAI,SAACQ,GAAD,OACV,wBAEEV,QAAS,kBAAMm+C,EAAUz9C,IACzB7G,UAAWsmD,KAAW,4BAA6B,CACjDx5C,OAAQyzC,IAAW15C,IAJvB,SAOGk8C,GAAYl8C,GAAK8hB,UANb9hB,WAYb,qBACE0F,GAAG,eACHvM,UAAU,iDAFZ,SAIE,qBAAKA,UAAU,QAAf,SACE,cAAC,OAAD,CAAK2L,KAAMq6C,EAAW9zC,QAASwyC,EAAch0C,OAAQ,iBASnE,SAAS8zC,GAAT,GAAwE,IAApCxqC,EAAmC,EAAnCA,KAC5BusC,EAAajrD,IAAMyW,OAAO,GAE1By0C,EADalrD,IAAMyW,OAAO,CAAEvC,MAAO,EAAGi3C,OAAQ,EAAGC,WAAY,IACxCz0C,QAED00C,EAAoB3sC,EAAtCqmC,iBAA2BN,EAAW/lC,EAAX+lC,OAGnC,GAAI4G,IAAYJ,EAAWt0C,QAAS,CAClC,GAAIu0C,EAAQE,WAAa,EAAG,CAG1B,IACME,GADUx4C,KAAKuB,MAAQ62C,EAAQE,YACP,IAC9BF,EAAQh3C,MAAQ5Q,KAAKy8C,MACnBmL,EAAQh3C,MAAQo3C,EAAiBJ,EAAQC,QAM3CD,EAAQC,OAAS7nD,KAAKgzC,IAAI+U,EAAUH,EAAQh3C,MAAO,QAInDg3C,EAAQC,ODxOiB,ECwOU1G,EACnCyG,EAAQh3C,MAAQm3C,EAAUH,EAAQC,OAEpCD,EAAQE,WAAat4C,KAAKuB,MAC1B42C,EAAWt0C,QAAU00C,EAIvB,IACME,EAAaL,EAAQh3C,MADL,EAC6Bg3C,EAAQC,OAC3D,OACE,cAAC,KAAD,CACEj3C,MAAOg3C,EAAQh3C,MACfC,IAAKo3C,EACLxa,SAAUya,GACVC,MAAO,EACPC,WAAW,EACXC,eAAe,EACfC,UAAU,O,SCnQJrE,O,eAAAA,I,+BAAAA,I,4BAAAA,Q,KASZ,ICQKz7B,GDRC3rB,GAAeH,IAAMC,mBAAiCC,GACtDE,GAAkBJ,IAAMC,mBAAoCC,GAG3D,SAAS2rD,GAAT,GAA8C,IAApBvrD,EAAmB,EAAnBA,SAAmB,EACxBN,IAAMS,SAAgB8mD,GAAOuE,MADL,mBAC3CrsD,EAD2C,KACpC2pB,EADoC,OAEFzmB,cAAhC0xC,EAFkC,EAE1C10C,OAAuBlB,EAFmB,EAEnBA,QAASoE,EAFU,EAEVA,IAWxC,OATA7C,IAAMwB,WAAU,WACV/B,IAAU8nD,GAAOuE,OACfzX,IAAkB/1C,IAAcwB,YAClCspB,EAASm+B,GAAOwE,cACd1X,IAAkB/1C,IAAcsB,WAClCqmB,GAAMmD,EAAU3qB,EAASoE,MAE5B,CAACwxC,EAAe51C,EAASoE,IAG1B,cAAC,GAAab,SAAd,CAAuBC,MAAOxC,EAA9B,SACE,cAAC,GAAgBuC,SAAjB,CAA0BC,MAAOmnB,EAAjC,SACG9oB,M,SAMM2lB,G,uFAAf,WAAqBzlB,EAAoB/B,EAAkBoE,GAA3D,kBAAAX,EAAA,6DACE1B,EAAS+mD,GAAOznD,YADlB,SAIUqC,EAAa,IAAIC,IAAWS,EAAK,aAJ3C,SAK0BV,EAAW6pD,YALrC,OAKU/tC,EALV,OAKkDhc,MAG9CzB,GAAS,SAACf,GACR,OAAIA,IAAU8nD,GAAOznD,WAAmBL,EACjCwe,KAVb,gDAaQxf,IAAYF,IAAQO,QACtByD,aAAY,EAAD,GAAM,CAAEM,QAErBrC,EAAS,0BAhBb,0D,sBAoBO,SAASyrD,KACd,IAAMxsD,EAAQO,IAAMyC,WAAWtC,IAC/B,QAAcD,IAAVT,EACF,MAAM,IAAIiD,MAAJ,kDAER,OAAOjD,EAGF,SAASysD,KACd,IAAM1rD,EAAWR,IAAMyC,WAAWrC,IAClC,IAAKI,EACH,MAAM,IAAIkC,MAAJ,uDAHuB,MAMNC,cAAjBlE,EANuB,EAMvBA,QAASoE,EANc,EAMdA,IACjB,OAAO7C,IAAMsI,aAAY,WACvB2d,GAAMzlB,EAAU/B,EAASoE,KACxB,CAACrC,EAAU/B,EAASoE,I,gDEzEzB,WACEpE,EACAoE,EACAspD,GAHF,kBAAAjqD,EAAA,sEAQUC,EAAa,IAAIC,IAAWS,GARtC,SASyBV,EAAWiqD,kBATpC,OASUhnD,EATV,OAUI+mD,EAAgB/mD,GAVpB,gDAYQ3G,IAAYF,IAAQO,QACtByD,aAAY,EAAD,GAAQ,CAAEM,QAb3B,0D,sBAkBO,SAASwpD,KAAmB,IAAD,EACQrsD,IAAMS,WADd,mBACzB6rD,EADyB,KACXH,EADW,OAEPxpD,cAAjBlE,EAFwB,EAExBA,QAASoE,EAFe,EAEfA,IAEjB,MAAO,CACL0pD,kBAAmB,kB,gDAAMA,CAAkB9tD,EAASoE,EAAKspD,IACzDG,iB,SDNCxgC,O,qBAAAA,I,8BAAAA,Q,KAKL,IAAMC,GAAkB,IAAIC,GAGtBwgC,GAAwB,8CAGvB,SAASC,KACd,OACE,sBAAK/nD,UAAU,iBAAf,UACE,cAACgoD,GAAD,IACA,sBAAKhoD,UAAU,OAAf,UACE,qBAAKA,UAAU,cAAf,SACE,qBAAKA,UAAU,yBAAf,SACE,qBAAKA,UAAU,MAAf,SACE,oBAAIA,UAAU,oBAAd,sCAIN,cAACioD,GAAD,OAEF,cAACxF,GAAD,OAKN,SAASuF,KAAoB,IAAD,MAClB/sD,EAAWgD,cAAXhD,OACFse,EAASguC,KACTW,EAAcV,KACdrO,EAAe70B,KACf6jC,EAAY/jC,GAAe0jC,IAC3Bt/B,EA+ZR,SAAsBC,GAA8C,IAAD,EACjCntB,IAAMS,WAD2B,mBAC1DysB,EAD0D,KAChDE,EADgD,KAsCjE,OAnCAptB,IAAMwB,WAAU,WACd,IAAM8rB,EAAc,WAClBvB,GAAgByB,MACbvH,MAAM,SACNnQ,MAAK,SAAC4I,GACL0O,EAAY,CACVF,SAAU,CACRO,MAAO/O,EAAKrO,KAAKqd,YAAYC,cAAcC,IAC3CC,UAAWnP,EAAKrO,KAAKqd,YAAYI,aAAaF,IAC9CG,WAAYrP,EAAKrO,KAAKqd,YAAYK,WAAWH,IAC7CI,gBAAiBtP,EAAKrO,KAAKqd,YAAYM,gBACvCC,4BACEvP,EAAKrO,KAAKqd,YAAYO,4BACxBC,aAAc,IAAIpb,KAAK4L,EAAKrO,KAAK6d,eAEnCvuB,OAAQmsB,GAAgBqC,aAG3BC,OAAM,SAAC9mB,GACN8lB,EAAY,CACVztB,OAAQmsB,GAAgB/P,kBAKhCuR,IACA,IAAMD,EAAWgB,aAAY,WAC3Bf,MAxdgB,KA2dlB,OAAO,WACLgB,cAAcjB,MAEf,CAACD,IAEGF,EArcUqB,GANS,EAOkB89B,KAApCE,EAPkB,EAOlBA,kBAAmBD,EAPD,EAOCA,aAE3B,SAASQ,IACPF,IACA/O,EAAa,IAAInhC,IAAU8vC,KAC3BD,IAGFvsD,IAAMwB,WAAU,WACV7B,IAAWrB,IAAcsB,WAC3BktD,MAED,CAACntD,IAEJ,IAAMotD,EAAiB/sD,IAAMma,SAAQ,WACnC,GAAImyC,EACF,OAAOA,EAAaU,WAAW72C,QAC7B,SAACoiC,EAAM5hC,GAAP,OAAmB4hC,EAAO5hC,EAAQs2C,iBAClC,KAGH,CAACX,IAEAxnC,EAAY,OAAG+nC,QAAH,IAAGA,GAAH,UAAGA,EAAWx8C,YAAd,iBAAG,EAAiB8I,eAApB,iBAAG,EAA0B9I,YAA7B,aAAG,EAAgCkL,OAAOmD,KAE1D,GAAIT,IAAWspC,GAAOwE,aAEpB,OAAO,KAGT,KACE9tC,IAAWspC,GAAOuE,MAClB7tC,IAAWspC,GAAOznD,YACjB+sD,GACA/nC,GACAoI,GAED,OAAO,cAACjB,GAAD,IACF,GAAsB,kBAAXhO,EAChB,OAAO,cAAC+Q,GAAD,CAAWnlB,KAAMoU,EAAQgR,MAAO69B,IAClC,GACLD,EAAUltD,SAAW8Z,EAAYsC,aAChC8wC,EAAUltD,SAAW8Z,EAAYqC,WAC9BgJ,EAAahjB,QAAUgjB,EAAahjB,OAAS,GAEjD,OACE,cAACktB,GAAD,CAAWnlB,KAAM,+BAAgColB,MAAO69B,IAI5DhoC,EAAeA,EAAa,GAAGA,aAE/B,IAKIooC,EAQAC,EAbEC,GACHnvC,EAAOovC,YAAcpvC,EAAOqvC,MAC7B,KACArnD,QAAQ,GAeV,OAZI8mD,IACFG,GACGH,EAAiBjoC,EAAaJ,UAC/B,KACAze,QAAQ,IAIRinB,EAASvtB,SAAWmsB,GAAgBqC,UACtCg/B,EAAajgC,EAASA,UA+EtB,cA3EA,CA2EA,OAAKxoB,UAAU,mBAAf,UACE,qBAAKA,UAAU,yBAAf,SACE,qBAAKA,UAAU,OAAf,SACE,sBAAKA,UAAU,YAAf,UACE,oDACA,sBAAMA,UAAU,gCAAgCoF,MAAO,CAACk+C,QAAS,GAAjE,SAAwEuF,GAAgBtvC,EAAOovC,kBAE/F,+BACE,6BAAKE,GAAgBtvC,EAAOovC,eAD9B,KACmD,IACjD,gCAAQE,GAAgBtvC,EAAOqvC,YAEjC,+BACE,+BAAKF,EAAL,OADF,4BAMN,qBAAK1oD,UAAU,yBAAf,SACE,qBAAKA,UAAU,OAAf,SACE,sBAAKA,UAAU,YAAf,UACE,8CAAiB,IACX,sBAAMA,UAAU,gCAAgCoF,MAAO,CAACk+C,QAAS,GAAjE,SAAwEuF,GAAgBzoC,EAAaJ,gBAE3G,+BACE,6BAAK6oC,GAAgBzoC,EAAaJ,aADpC,KACuD,IACrD,gCAAQ6oC,GAAgBtvC,EAAOqvC,YAEhCJ,GACC,oDACoB,+BAAKA,EAAL,iBAM5B,qBAAKxoD,UAAU,yBAAf,SACE,qBAAKA,UAAU,OAAf,SACE,sBAAKA,UAAU,YAAf,UACGyoD,GACC,qCACE,uCACQ,IACN,uBAAMzoD,UAAU,gCAAhB,mBACSyoD,EAAWn/B,sBAGtB,+BACE,mCAAMm/B,EAAW1/B,MAAMxnB,QAAQ,MAAS,IACvCknD,EAAWl/B,4BAA8B,GACxC,wBAAOvpB,UAAU,kBAAjB,oBACUyoD,EAAWl/B,4BAA4BhoB,QAAQ,GADzD,OAKDknD,EAAWl/B,4BAA8B,GACxC,wBAAOvpB,UAAU,kBAAjB,oBACUyoD,EAAWl/B,4BAA4BhoB,QAAQ,GADzD,OAK0C,IAA3CknD,EAAWl/B,6BACV,0CAGJ,2CACW,mCAAMloB,GAAkBonD,EAAWt/B,cAAiB,IAD/D,SAEQ,mCAAM9nB,GAAkBonD,EAAWp/B,qBAI9Cb,EAASvtB,SAAWmsB,GAAgB/P,aACnC,qCACE,uCACA,6BACE,0CAEF,gFAGHoxC,GACC,oBAAGzoD,UAAU,0BAAb,uBACa,IACVkP,EAA4Bu5C,EAAWj/B,aAAa5Z,wBAUrE,IEpSYizC,GFoSNxhD,GAAoB,SAAC9D,GAA8B,IAAf+D,EAAc,uDAAN,EAChD,OAAI/D,EAAQ,IAAYA,EACpBA,GAAS,KAAOA,EAAQ,MAAcA,EAAQ,KAAKgE,QAAQD,GAAS,IACpE/D,GAAS,KAAOA,EAAQ,MAAcA,EAAQ,KAAKgE,QAAQD,GAAS,IACpE/D,GAAS,KAAOA,EAAQ,OAAeA,EAAQ,KAAKgE,QAAQD,GAAS,IACrE/D,GAAS,OAAeA,EAAQ,MAAMgE,QAAQD,GAAS,SAA3D,GAGF,SAASunD,GAAgBtrD,GACvB,OAAO8D,GAAkBvC,YAAcvB,IAGzC,SAAS0qD,KACP,IAAMzG,EHxBD,WACL,IAAMtjD,EAAU5C,IAAMyC,WAAWqjD,IACjC,IAAKljD,EACH,MAAM,IAAIF,MAAJ,wDAER,OAAOE,EAAQ8b,KGmBO8uC,GAChBpH,EAAkBc,KAChBjB,EAAcgB,KAAdhB,UACAxnD,EAAYkE,cAAZlE,QAOR,GALAuB,IAAMwB,WAAU,WAEd,OADAykD,GAAU,GACH,kBAAMA,GAAU,MACtB,CAACA,EAAWxnD,IAGb2nD,EAAgBzmD,SAAWqkD,GAAmBC,OAC9CiC,EAAcvmD,SAAWqkD,GAAmBC,MAC5C,CACA,IAAM38C,EACJ8+C,EAAgBzmD,SAAWqkD,GAAmBthD,OAC9CwjD,EAAcvmD,SAAWqkD,GAAmBthD,MAC9C,OAAO,cAAC2kD,GAAD,CAAe//C,MAAOA,IAlBR,IAsBrBs8C,EAIEsC,EAJFtC,eACAM,EAGEgC,EAHFhC,iBACAn8B,EAEEm+B,EAFFn+B,UACAkU,EACEiqB,EADFjqB,UAEIwxB,EAAiBnqD,KAAKgD,MAAM,IAAOs9C,GACnC8J,EAAkBpqD,KAAKgD,MAAM,IAAO49C,GAClCyB,EAA4B59B,EAA5B49B,UAAWC,EAAiB79B,EAAjB69B,aACb+H,EAAe5lC,EAAUjI,MAAMje,WAC/B+rD,GAAkB,IAAMjI,EAAaC,GAAc3/C,QAAQ,GAAK,IAChE4nD,EAAqB/oD,YACzB8gD,EAAeD,EACf8H,GAEM/H,EAA8B39B,EAA9B29B,YAAa3B,EAAiBh8B,EAAjBg8B,aAErB,OACE,eAACv4C,GAAA,EAAD,WACE,+BACE,oBAAI9G,UAAU,QAAd,kBACA,oBAAIA,UAAU,+BAAd,SACE,cAACwsB,GAAD,CAAM9P,KAAM2iC,EAAc95B,MAAI,cAGjB/pB,IAAhBwlD,GACC,+BACE,oBAAIhhD,UAAU,QAAd,0BACA,oBAAIA,UAAU,+BAAd,SACE,cAACwsB,GAAD,CAAM9P,KAAMskC,SAIjBzpB,GACC,+BACE,oBAAIv3B,UAAU,QAAd,0BACA,oBAAIA,UAAU,+BAAd,SACGgP,EAAoBuoB,QAI1B,+BACC,oBAAIv3B,UAAU,QAAd,6BACA,oBAAIA,UAAU,+BAAd,sBAEF,+BACE,oBAAIA,UAAU,QAAd,sCACA,qBAAIA,UAAU,+BAAd,UAA8CgpD,EAA9C,WAEF,+BACE,oBAAIhpD,UAAU,QAAd,qCACA,qBAAIA,UAAU,+BAAd,UAA8C+oD,EAA9C,WAEF,+BACE,oBAAI/oD,UAAU,QAAd,mBACA,oBAAIA,UAAU,+BAAd,SAA8CipD,OAEhD,+BACE,oBAAIjpD,UAAU,QAAd,4BACA,oBAAIA,UAAU,+BAAd,SAA8CkpD,OAEhD,+BACE,oBAAIlpD,UAAU,QAAd,4CACA,qBAAIA,UAAU,+BAAd,cAA+CmpD,WAMhD,SAASxG,GAAT,GAAuD,IAA9B//C,EAA6B,EAA7BA,MAA6B,EACpB2/C,KAA/BD,EADmD,EACnDA,YAAa/3B,EADsC,EACtCA,MAAOzd,EAD+B,EAC/BA,OACpB/S,EAAYkE,cAAZlE,QAcR,OAZAuB,IAAMwB,WAAU,WACd,IAAIssD,EAAW,EAIf,OAHKxmD,IACHwmD,EAAWrkC,WAAWu9B,EAzXE,MA2XnB,WACD8G,GACFC,aAAaD,MAGhB,CAAC9G,EAAavoD,EAAS6I,IAEtBA,IAAUkK,EAEV,sBAAK9M,UAAU,wBAAf,uDAC6C,IAC3C,yBACEA,UAAU,uBACVmG,QAAS,WACPokB,KAHJ,UAME,sBAAMvqB,UAAU,0BANlB,kBAcJ,sBAAKA,UAAU,wBAAf,UACE,sBAAMA,UAAU,sCADlB,c,SE5aQ6iD,O,eAAAA,I,+BAAAA,I,4BAAAA,Q,KAeZ,IAAMpnD,GAAeH,IAAMC,mBAAiCC,GACtDE,GAAkBJ,IAAMC,mBAAoCC,GAG3D,SAAS8tD,GAAT,GAAgD,IAApB1tD,EAAmB,EAAnBA,SAAmB,EAC1BN,IAAMS,SAAgB8mD,GAAOuE,MADH,mBAC7CrsD,EAD6C,KACtC2pB,EADsC,OAEJzmB,cAAhC0xC,EAFoC,EAE5C10C,OAAuBlB,EAFqB,EAErBA,QAASoE,EAFY,EAEZA,IAiBxC,OAfA7C,IAAMwB,WAAU,WACd,GAAI/B,IAAU8nD,GAAOuE,KACnB,OAAQzX,GACN,KAAK/1C,IAAcwB,WACjBspB,EAASm+B,GAAOwE,cAChB,MAEF,KAAKztD,IAAcsB,UACjBqmB,GAAMmD,EAAU3qB,EAASoE,MAK9B,CAACwxC,EAAe51C,EAASoE,IAG1B,cAAC,GAAab,SAAd,CAAuBC,MAAOxC,EAA9B,SACE,cAAC,GAAgBuC,SAAjB,CAA0BC,MAAOmnB,EAAjC,SACG9oB,M,SAMM2lB,G,uFAAf,WAAqBzlB,EAAoB/B,EAAkBoE,GAA3D,0BAAAX,EAAA,6DACE1B,EAAS+mD,GAAOznD,YADlB,SAIUqC,EAAa,IAAIC,IAAWS,EAAK,aAJ3C,SAOYslB,QAAQC,IAAI,CAChBjmB,EAAW8rD,qBACX9rD,EAAW8rD,mBAAmB,CAAE91C,OAAQ,gBACxChW,EAAW8rD,mBAAmB,CAAE91C,OAAQ,qBAVhD,gBAYMpN,KAAI,SAAC2wB,GAAD,OAAcA,EAASz5B,SAZjC,mBAMWqrD,EANX,KAMkBD,EANlB,KAM+Ba,EAN/B,KAeI1tD,GAAS,SAACf,GACR,OAAIA,IAAU8nD,GAAOznD,WAAmBL,EACjC,CAAE6tD,QAAOD,cAAaa,qBAjBnC,kDAoBQzvD,IAAYF,IAAQO,QACtByD,aAAY,EAAD,GAAM,CAAEM,QAErBrC,EAAS,gCAvBb,2D,sBCvCO,SAAS2tD,KACd,IAoBIC,EACA1+C,EAAU/G,EArBRsV,EAASguC,KACToC,EDgED,WACL,IAAM5uD,EAAQO,IAAMyC,WAAWtC,IAC/B,QAAcD,IAAVT,EACF,MAAM,IAAIiD,MAAJ,sDAER,OAAOjD,ECrEU6uD,GACXC,EDuED,WACL,IAAM/tD,EAAWR,IAAMyC,WAAWrC,IAClC,IAAKI,EACH,MAAM,IAAIkC,MAAJ,2DAHyB,MAMRC,cAAjBlE,EANyB,EAMzBA,QAASoE,EANgB,EAMhBA,IACjB,OAAO7C,IAAMsI,aAAY,WACvB2d,GAAMzlB,EAAU/B,EAASoE,KACxB,CAACrC,EAAU/B,EAASoE,IChFD2rD,GAHU,EAIIxuD,IAAMS,UAAS,GAJnB,mBAIzBmvB,EAJyB,KAIXC,EAJW,KAK1B1X,EAASs2C,KAEf,GAAsB,kBAAXxwC,EAAqB,OAAO,KAEvC,GAAIowC,IAAa9G,GAAOwE,aACtB,OAAO,cAAC/8B,GAAD,CAAWnlB,KAAK,iCAGzB,GAAIwkD,IAAa9G,GAAOznD,WACtB,OAAO,cAACmsB,GAAD,IAGT,GAAwB,kBAAboiC,EACT,OAAO,cAACr/B,GAAD,CAAWnlB,KAAMwkD,EAAUp/B,MAAOs/B,IAM3C,GAAIF,IAAa9G,GAAOuE,KACtB,OAAQ3zC,GACN,IAAK,iBACHzI,EAAW2+C,EAASH,eACpBE,EAAcnwC,EAAOiwC,eACrBvlD,EAAS,kBACT,MAEF,IAAK,MACH+G,EAAW2+C,EAASf,MACpBc,EAAcnwC,EAAOqvC,MACrB3kD,EAAS,QACT,MAEF,IAAK,cACL,QACE+G,EAAW2+C,EAAShB,YACpBe,EAAcnwC,EAAOovC,YACrB1kD,EAAS,cAMf,OACE,qCACGinB,GACC,qBAAKlrB,UAAU,gBAAgBmG,QAAS,kBAAMglB,GAAY,MAG5D,sBAAKnrB,UAAU,OAAf,UACE,qBAAKA,UAAU,cAAf,SACE,sBAAKA,UAAU,yBAAf,UACE,qBAAKA,UAAU,MAAf,SACE,oBAAIA,UAAU,oBAAd,gCAGF,qBAAKA,UAAU,WAAf,SACE,cAAC,GAAD,CACEyT,OAAQA,EACR6X,OAAQ,kBAAMH,GAAY,SAACrf,GAAD,OAAWA,MACrCA,KAAMof,WAMby+B,IAAa9G,GAAOuE,MACnB,qBAAKpnD,UAAU,YAAf,SACE,sBACEA,UAAU,wCACVmG,QAAS0jD,EAFX,qCASH7+C,GACC,qBAAKhL,UAAU,wBAAf,SACE,wBAAOA,UAAU,yCAAjB,UACE,gCACE,+BACE,oBAAIA,UAAU,aAAd,kBACA,oBAAIA,UAAU,aAAd,qBACA,oBAAIA,UAAU,wBAAd,2BACA,qBAAIA,UAAU,wBAAd,kBACQiE,EADR,kBAKJ,uBAAOjE,UAAU,OAAjB,SACGgL,EAAS3E,KAAI,SAAC4E,EAASpG,GAAV,OACZmvC,GAAiB/oC,EAASpG,EAAO6kD,mBAWnD,IAAM1V,GAAmB,SACvB/oC,EACApG,EACA0U,GAEA,OACE,+BACE,6BACE,sBAAMvZ,UAAU,oCAAhB,SAAqD6E,EAAQ,MAE/D,6BACE,cAACwgB,GAAD,CAASja,OAAQH,EAAQvD,QAAS6d,MAAI,MAExC,oBAAIvlB,UAAU,aAAd,SACE,cAAC,IAAD,CAAYjB,SAAUkM,EAAQlM,SAAUW,sBAAuB,MAEjE,oBAAIM,UAAU,aAAd,oBACG,IAAMiL,EAAQlM,SACfwa,GACAhY,QAAQ,GAHV,SAVOsD,IAkBPklD,GAAiB,WACrB,IACMt2C,EADQtX,cACOC,IAAI,UACzB,MACa,gBAAXqX,GACW,mBAAXA,GACW,QAAXA,EAEOA,EAEA,MAILu2C,GAAc,SAACv2C,GACnB,OAAQA,GACN,IAAK,iBACH,MAAO,kBAET,IAAK,MACH,MAAO,MAET,IAAK,cACL,QACE,MAAO,gBAWP2+B,GAAiB,SAAC,GAA6C,IAA3C3+B,EAA0C,EAA1CA,OAAQ6X,EAAkC,EAAlCA,OAAQxf,EAA0B,EAA1BA,KAexC,OACE,sBAAK9L,UAAU,WAAf,UACE,wBACEA,UAAU,uCACVqM,KAAK,SACLlG,QAASmlB,EAHX,SAKG0+B,GAAYv2C,KAEf,qBACEzT,UAAS,2CAAsC8L,EAAO,QAAU,IADlE,SAVsB,CAAC,MAAO,KAAM,kBAazBzF,KAAI,SAACmsC,GACZ,OACE,cAAC,IAAD,CAEEllC,GAAI,SAAC1Q,GAAD,OA9BM,SAACA,EAAoB6W,GACzC,IAAMvM,EAAS,IAAIH,gBAAgBnK,EAASM,QAM5C,OALe,OAAXuW,EACFvM,EAAOlK,OAAO,UAEdkK,EAAOG,IAAI,SAAUoM,GAEhB,2BACF7W,GADL,IAEEM,OAAQgK,EAAO/J,aAqBWkvB,CAAczvB,EAAU41C,IAC1CxyC,UAAS,uBACPwyC,IAAiB/+B,EAAS,UAAY,IAExCtN,QAASmlB,EANX,SAQG0+B,GAAYxX,IAPRA,GAAgB,iBC5M5B,SAASyX,KACd,IAAM1wC,EAASguC,KACTW,EAAcV,KAOpB,OAJAlsD,IAAMwB,WAAU,WACVyc,IAAWspC,GAAOuE,MAAMc,MAC3B,IAEC3uC,IAAWspC,GAAOwE,aACb,cAAC/8B,GAAD,CAAWnlB,KAAK,iCAGrBoU,IAAWspC,GAAOuE,MAAQ7tC,IAAWspC,GAAOznD,WACvC,cAACmsB,GAAD,IAEa,kBAAXhO,EACF,cAAC+Q,GAAD,CAAWnlB,KAAMoU,EAAQgR,MAAO29B,IAIvC,sBAAKloD,UAAU,OAAf,UACGkqD,KAED,eAACpjD,GAAA,EAAD,WACE,+BACE,oBAAI9G,UAAU,QAAd,gCACA,oBAAIA,UAAU,gBAAd,SACE,cAAC,IAAD,CAAYjB,SAAUwa,EAAOqvC,MAAOlpD,sBAAuB,SAI/D,+BACE,oBAAIM,UAAU,QAAd,sCACA,oBAAIA,UAAU,gBAAd,SACE,cAAC,IAAD,CACEjB,SAAUwa,EAAOovC,YACjBjpD,sBAAuB,SAK7B,+BACE,oBAAIM,UAAU,QAAd,0CACA,oBAAIA,UAAU,gBAAd,SACE,cAAC,IAAD,CACEjB,SAAUwa,EAAOiwC,eACjB9pD,sBAAuB,eASrC,IAAMwqD,GAAe,WACnB,OACE,qBAAKlqD,UAAU,cAAf,SACE,qBAAKA,UAAU,yBAAf,SACE,qBAAKA,UAAU,MAAf,SACE,oBAAIA,UAAU,oBAAd,oCChEH,SAASmqD,KACd,OACE,sBAAKnqD,UAAU,iBAAf,UACE,cAACiqD,GAAD,IACA,cAACR,GAAD,OCDC,SAASW,GAAT,GAAgE,IAApC7nC,EAAmC,EAAnCA,MAAmC,EAC5BjnB,IAAMS,SAH9B,IAEoD,mBAC7DsuD,EAD6D,KAC/CC,EAD+C,KAGpE,OAAkC,IAA9B/nC,EAAMy0B,aAAa55C,OACd,cAACktB,GAAD,CAAWnlB,KAAK,mCAIvB,sBAAKnF,UAAU,OAAf,UACE,qBAAKA,UAAU,iCAAf,SACE,oBAAIA,UAAU,oBAAd,kCAGF,qBAAKA,UAAU,wBAAf,SACE,wBAAOA,UAAU,yCAAjB,UACE,gCACE,+BACE,oBAAIA,UAAU,aAAd,oBACA,oBAAIA,UAAU,aAAd,wCAGJ,uBAAOA,UAAU,OAAjB,SACGuiB,EAAMy0B,aAAaz3C,MAAM,EAAG8qD,GAAchkD,KAAI,SAACxC,EAAI2f,GAAO,IAAD,EACpD2sB,EACAD,EACAj6B,EAeJ,OAdI,UAAApS,EAAG6O,YAAH,eAASjQ,MAA4C,IAArCoB,EAAG8oB,YAAYjW,WAAWtZ,QAC5C8yC,EAAc,UACdC,EAAa,WAEbD,EAAc,UACdC,EAAa,WAGXtsC,EAAG8oB,YAAYjW,WAAWtZ,OAAS,IACrC6Y,EACE,cAACqW,GAAD,CAAWrW,UAAWpS,EAAG8oB,YAAYjW,WAAW,GAAI6O,MAAI,KAK1D,+BACE,6BACE,sBAAMvlB,UAAS,2BAAsBkwC,GAArC,SACGC,MAIL,6BAAKl6B,MAPEuN,aAelBjB,EAAMy0B,aAAa55C,OAASitD,GAC3B,qBAAKrqD,UAAU,cAAf,SACE,wBACEA,UAAU,wBACVmG,QAAS,kBACPmkD,GAAgB,SAACC,GAAD,OAAeA,EA/D3B,OA4DR,4BC1DH,SAASC,GAAT,GAAgE,IAApCjoC,EAAmC,EAAnCA,MAAmC,EACpBjnB,IAAMS,SAHtC,IAEoD,mBAC7D0uD,EAD6D,KAC3CC,EAD2C,KAGpE,OAAKnoC,EAAMI,SAAWJ,EAAMI,QAAQvlB,OAAS,EACpC,KAIP,sBAAK4C,UAAU,OAAf,UACE,qBAAKA,UAAU,iCAAf,SACE,oBAAIA,UAAU,oBAAd,6BAGF,qBAAKA,UAAU,wBAAf,SACE,wBAAOA,UAAU,yCAAjB,UACE,gCACE,+BACE,oBAAIA,UAAU,aAAd,qBACA,oBAAIA,UAAU,aAAd,kBACA,oBAAIA,UAAU,aAAd,oBACA,oBAAIA,UAAU,aAAd,yBACA,oBAAIA,UAAU,aAAd,iCAGJ,gCACGuiB,EAAMI,QAAQtc,KAAI,SAACqyC,EAAQ7zC,GAC1B,OAAIA,GAAS4lD,EAAmB,EACvB,MAIkB,OAAvB/R,EAAOE,aAA+C,IAAvBF,EAAOE,cACxC+R,GACG/rD,KAAKI,IAAI05C,EAAO35C,WACd25C,EAAOE,YAAcF,EAAO35C,UAC/B,KACAwC,QAAQ,IAGV,+BACE,6BACE,cAAC8jB,GAAD,CAASja,OAAQ,IAAI4M,IAAU0gC,EAAOttC,QAASma,MAAI,MAErD,6BAAKmzB,EAAOkS,aACZ,6BACE,cAAC,IAAD,CAAY7rD,SAAU25C,EAAO35C,aAE/B,6BACG25C,EAAOE,YACN,cAAC,IAAD,CAAY75C,SAAU25C,EAAOE,cAE7B,MAGJ,6BAAK+R,EAAgBA,EAAgB,IAAM,QAfpCjS,EAAOttC,OAASstC,EAAOkS,aATlC,IAAID,YAgCXpoC,EAAMI,QAAQvlB,OAASqtD,GACtB,qBAAKzqD,UAAU,cAAf,SACE,wBACEA,UAAU,wBACVmG,QAAS,kBACPukD,GAAoB,SAACH,GAAD,OAAeA,EArE/B,OAkER,4BClEH,SAASM,GAAT,GAAiE,IAApCtoC,EAAmC,EAAnCA,MAC5BuoC,EAAoBvoC,EAAMy0B,aAAa55C,OACvC2tD,EAAc,IAAI37C,IAClB47C,EAAc,IAAI57C,IAClB67C,EAAc,IAAI77C,IAEpB87C,EAAoB,EACxB3oC,EAAMy0B,aAAajyC,SAAQ,SAAClB,GAAQ,IAAD,MAC3BhB,EAAUgB,EAAG8oB,YAAY9pB,QAC/BqoD,GAAqBroD,EAAQuD,aAAahJ,OAC1C,IAAM+tD,EAAc,IAAIpZ,IAClBqZ,EAAe,SAACvmD,GACpB,KAAIA,GAAShC,EAAQ2D,YAAYpJ,QAAjC,CACA,IACMoI,EADY3C,EAAQ2D,YAAY3B,GACL6B,WACjCykD,EAAYjZ,IAAI1sC,GAChB,IAAM6lD,EAAYJ,EAAY7uD,IAAIoJ,GAClCylD,EAAY5jD,IAAI7B,EAAgB6lD,EAAYA,EAAY,EAAI,KAG9DxoD,EAAQuD,aAAarB,SAAQ,SAACuB,GAAD,OAAQ8kD,EAAa9kD,EAAGG,mBACrD,UAAA5C,EAAG6O,YAAH,mBAASw7B,yBAAT,SAA4BnpC,SAAQ,SAAC6rC,GACnCsa,GAAqBta,EAAMxqC,aAAahJ,OACxCwzC,EAAMxqC,aAAarB,SAAQ,SAACumD,GAAD,OACzBF,EAAaE,EAAQ7kD,sBAIzB,IAAM8kD,EAA8B,QAAjB,UAAA1nD,EAAG6O,YAAH,eAASjQ,KAC5B0oD,EAAYpmD,SAAQ,SAACwB,GACnB,IAAM8kD,EAAYL,EAAY5uD,IAAImK,GAElC,GADAykD,EAAY3jD,IAAId,EAAW8kD,EAAYA,EAAY,EAAI,GACnDE,EAAY,CACd,IAAMC,EAAQT,EAAY3uD,IAAImK,GAC9BwkD,EAAY1jD,IAAId,EAAWilD,EAAQA,EAAQ,EAAI,UAKrD,IAvCqE,EAuC/DC,EAAiB,GAvC8C,eAwCnDT,GAxCmD,IAwCrE,2BAA+B,CAAC,IAAvB91C,EAAsB,QAC7Bu2C,EAAexuD,KAAKiY,IAzC+C,8BAkDrE,OANAu2C,EAAepyB,MAAK,SAAC77B,EAAG87B,GACtB,OAAI97B,EAAE,GAAK87B,EAAE,GAAW,EACpB97B,EAAE,GAAK87B,EAAE,IAAY,EAClB,KAIP,qCACE,sBAAKt5B,UAAU,OAAf,UACE,qBAAKA,UAAU,iCAAf,SACE,oBAAIA,UAAU,oBAAd,mCAEF,eAAC8G,GAAA,EAAD,WACE,+BACE,oBAAI9G,UAAU,QAAd,mCACA,oBAAIA,UAAU,+BAAd,SACGyrD,EAAeruD,YAGpB,+BACE,oBAAI4C,UAAU,QAAd,gCACA,oBAAIA,UAAU,+BAAd,SACGkrD,aAKT,sBAAKlrD,UAAU,OAAf,UACE,qBAAKA,UAAU,iCAAf,SACE,oBAAIA,UAAU,oBAAd,8BAGF,qBAAKA,UAAU,wBAAf,SACE,wBAAOA,UAAU,yCAAjB,UACE,gCACE,+BACE,oBAAIA,UAAU,aAAd,qBACA,oBAAIA,UAAU,aAAd,+BACA,oBAAIA,UAAU,aAAd,wBACA,oBAAIA,UAAU,aAAd,+BACA,oBAAIA,UAAU,aAAd,wBACA,oBAAIA,UAAU,aAAd,+BAGJ,gCACGyrD,EAAeplD,KAAI,YAA0B,IAAD,mBAAvBE,EAAuB,KAAZmlD,EAAY,KACrCC,EAASV,EAAY7uD,IAAImK,GACzBqlD,EAAYb,EAAY3uD,IAAImK,IAAc,EAChD,OACE,+BACE,6BACE,cAAC8e,GAAD,CAASja,OAAQ,IAAI4M,IAAUzR,GAAYgf,MAAI,MAEjD,6BAAKmmC,IACL,gCAAO,IAAMA,EAAUZ,GAAmBvpD,QAAQ,GAAlD,OACA,6BAAKoqD,IACL,gCAAO,IAAMA,EAAUT,GAAmB3pD,QAAQ,GAAlD,OACA,gCAAO,IAAMqqD,EAAaF,GAAQnqD,QAAQ,GAA1C,SAROgF,mBCvFpB,SAASslD,GAAT,GAAiE,IAApCtpC,EAAmC,EAAnCA,MAAmC,EAC7BjnB,IAAMS,SAAS,IADc,mBAC9DsuD,EAD8D,KAChDC,EADgD,KAE/DQ,EAAoBvoC,EAAMy0B,aAAa55C,OAEvC0uD,EAAexwD,IAAMma,SAAQ,WACjC,IAAMs2C,EAAW,IAAI38C,IACrBmT,EAAMy0B,aAAajyC,SAAQ,SAAClB,GAC1B,IAAMhB,EAAUgB,EAAG8oB,YAAY9pB,QACzBmpD,EAAQ,IAAI58C,IAClBvM,EAAQuD,aAAarB,SAAQ,SAACuB,GAC5BA,EAAG0E,SAASjG,SAAQ,SAACF,GACnB,IAAM6C,EAAU7E,EAAQ2D,YAAY3B,GAAO6B,WAC3CslD,EAAM3kD,IAAIK,EAAS7E,EAAQ25C,kBAAkB33C,UAIjDmnD,EAAMjnD,SAAQ,SAACyG,EAAY9D,GACzB,IAAMukD,EAAQF,EAAS3vD,IAAIsL,IAAY,CAAEwkD,MAAO,EAAGC,OAAQ,GACvD3gD,EACFygD,EAAME,SAENF,EAAMC,QAERH,EAAS1kD,IAAIK,EAASukD,SAI1B,IAvBuC,EAuBjCG,EAAiB,GAvBgB,eAwBrBL,GAxBqB,IAwBvC,2BAA4B,CAAC,IAApB72C,EAAmB,QAC1Bk3C,EAAenvD,KAAKiY,IAzBiB,8BAoCvC,OARAk3C,EAAe/yB,MAAK,SAAC77B,EAAG87B,GACtB,IAAM+yB,EAAS7uD,EAAE,GAAG0uD,MAAQ1uD,EAAE,GAAG2uD,OAC3BG,EAAShzB,EAAE,GAAG4yB,MAAQ5yB,EAAE,GAAG6yB,OACjC,OAAIE,EAASC,EAAe,EACxBD,EAASC,GAAgB,EACtB,KAGFF,IACN,CAAC7pC,IAEJ,OACE,sBAAKviB,UAAU,OAAf,UACE,qBAAKA,UAAU,iCAAf,SACE,oBAAIA,UAAU,oBAAd,mCAGF,qBAAKA,UAAU,wBAAf,SACE,wBAAOA,UAAU,yCAAjB,UACE,gCACE,+BACE,oBAAIA,UAAU,aAAd,qBACA,oBAAIA,UAAU,aAAd,8BACA,oBAAIA,UAAU,aAAd,6BACA,oBAAIA,UAAU,aAAd,yBACA,oBAAIA,UAAU,aAAd,oCAGJ,gCACG8rD,EACEvsD,MAAM,EAAG8qD,GACThkD,KAAI,YAAmC,IAAD,mBAAhCqB,EAAgC,YAArBykD,EAAqB,EAArBA,OAAQD,EAAa,EAAbA,MACxB,OACE,+BACE,6BACE,cAAC7mC,GAAD,CAASja,OAAQ,IAAI4M,IAAUtQ,GAAU6d,MAAI,MAE/C,6BAAK4mC,IACL,6BAAKD,IACL,6BAAKC,EAASD,IACd,gCACK,KAAOC,EAASD,GAAUpB,GAAmBvpD,QAC9C,GAFJ,SAPOmG,aAoBpBokD,EAAa1uD,OAASitD,GACrB,qBAAKrqD,UAAU,cAAf,SACE,wBACEA,UAAU,wBACVmG,QAAS,kBACPmkD,GAAgB,SAACC,GAAD,OAAeA,EA5F3B,OAyFR,4BCnFH,SAASgC,GAAT,GAMH,IALF7vC,EAKC,EALDA,KACAw8B,EAIC,EAJDA,IAKMsT,E9IwBD,SAAkB3lD,GACvB,IAAM3I,EAAU5C,IAAMyC,WAAWtC,IAEjC,IAAKyC,EACH,MAAM,IAAIF,MAAJ,gDAGR,OAAOE,EAAQsV,QAAQ3M,G8I/BA4lD,CAAS/vC,GAC1B+F,EAAaD,KACXvnB,EAAWgD,cAAXhD,OACFuc,EAAU,kBAAMiL,EAAW/F,IAOjC,GAJAphB,IAAMwB,WAAU,WACT0vD,GAAkBvxD,IAAWrB,IAAcsB,WAAWsc,MAC1D,CAACkF,EAAMzhB,KAELuxD,GAAkBA,EAAevxD,SAAW8Z,GAAYkC,SAC3D,OAAO,cAACsQ,GAAD,CAAa1kB,QAAQ,kBACvB,QACmBrH,IAAxBgxD,EAAe7gD,MACf6gD,EAAevxD,SAAW8Z,GAAYsC,YAEtC,OAAO,cAACiT,GAAD,CAAWC,MAAO/S,EAASrS,KAAK,0BAClC,QAAkC3J,IAA9BgxD,EAAe7gD,KAAK4W,MAC7B,OAAO,cAAC+H,GAAD,CAAWC,MAAO/S,EAASrS,KAAI,gBAAWuX,EAAX,oBAGxC,IAAM6F,EAAQiqC,EAAe7gD,KAAK4W,MAC5BmqC,EAAenqC,EAAMy0B,aAAavjC,QAAO,SAAC5P,GAAD,aAAyB,QAAjB,UAAAA,EAAG6O,YAAH,eAASjQ,QAEhE,OACE,qCACE,sBAAKzC,UAAU,OAAf,UACE,qBAAKA,UAAU,cAAf,SACE,oBAAIA,UAAU,mDAAd,wBAIF,eAAC8G,GAAA,EAAD,WACE,+BACE,oBAAI9G,UAAU,QAAd,kBACA,oBAAIA,UAAU,+BAAd,SACE,cAACwsB,GAAD,CAAM9P,KAAMA,SAGhB,+BACE,oBAAI1c,UAAU,QAAd,uBACA,oBAAIA,UAAU,+BAAd,SACE,+BAAOuiB,EAAM5E,iBAGjB,+BACE,oBAAI3d,UAAU,QAAd,yBACA,oBAAIA,UAAU,+BAAd,SACE,cAACwsB,GAAD,CAAM9P,KAAM6F,EAAMoqC,WAAYpnC,MAAI,SAGtC,+BACE,oBAAIvlB,UAAU,QAAd,8BACA,oBAAIA,UAAU,+BAAd,SACE,+BAAOuiB,EAAMqqC,yBAGjB,+BACE,oBAAI5sD,UAAU,QAAd,oCACA,oBAAIA,UAAU,+BAAd,SACE,+BAAOuiB,EAAMy0B,aAAa55C,cAG9B,+BACE,oBAAI4C,UAAU,QAAd,qCACA,oBAAIA,UAAU,+BAAd,SACE,+BAAO0sD,EAAatvD,oBAM5B,cAAC,GAAD,CAAamlB,MAAOA,EAAO7F,KAAMA,EAAMw8B,IAAKA,OAKlD,IAAM2T,GAAc,CAClB,CACE9+C,KAAM,UACNkX,MAAO,eACP8zB,KAAM,IAER,CACEhrC,KAAM,UACNkX,MAAO,UACP8zB,KAAM,YAER,CACEhrC,KAAM,WACNkX,MAAO,WACP8zB,KAAM,aAER,CACEhrC,KAAM,WACNkX,MAAO,WACP8zB,KAAM,cAYV,SAASa,GAAT,GAQI,IAPFl9B,EAOC,EAPDA,KACA6F,EAMC,EANDA,MACA22B,EAKC,EALDA,IAMA,OACE,qCACE,qBAAKl5C,UAAU,YAAf,SACE,qBAAKA,UAAU,SAAf,SACE,qBAAKA,UAAU,mBAAf,SACE,oBAAIA,UAAU,wCAAd,SACG6sD,GAAKxmD,KAAI,gBAAG4e,EAAH,EAAGA,MAAOlX,EAAV,EAAUA,KAAMgrC,EAAhB,EAAgBA,KAAhB,OACR,oBAAe/4C,UAAU,WAAzB,SACE,cAAC,IAAD,CACEA,UAAU,WACVsN,GAAItG,YAAY,UAAD,OAAW0V,GAAX,OAAkBq8B,IACjCnoC,OAAK,EAHP,SAKGqU,KANIlX,mBAcVvS,IAAR09C,GAAqB,cAACkR,GAAD,CAAkB7nC,MAAOA,IACtC,YAAR22B,GAAqB,cAACsR,GAAD,CAAkBjoC,MAAOA,IACtC,aAAR22B,GAAsB,cAAC2S,GAAD,CAAmBtpC,MAAOA,IACxC,aAAR22B,GAAsB,cAAC2R,GAAD,CAAmBtoC,MAAOA,OCzJhD,SAASuqC,GAAT,GAAiD,IAArBpwC,EAAoB,EAApBA,KAAMw8B,EAAc,EAAdA,IACjC6T,EAAal4C,OAAO6H,GACtBswC,EAAS,cAAC1iC,GAAD,CAAWnlB,KAAI,gBAAWuX,EAAX,mBAU5B,OAPG9H,MAAMm4C,IACPA,EAVqB,kBAWrBA,EAAa,IAAM,IAEnBC,EAAS,cAACT,GAAD,CAAmB7vC,KAAMqwC,EAAY7T,IAAKA,KAInD,sBAAKl5C,UAAU,kBAAf,UACE,qBAAKA,UAAU,SAAf,SACE,sBAAKA,UAAU,cAAf,UACE,oBAAIA,UAAU,kBAAd,qBACA,oBAAIA,UAAU,eAAd,wBAGHgtD,KCdP,IAAMC,GAAkB,CAAC,UAAW,WAAY,aAC1CC,GAAa,CAAC,MAAO,MAAO,OAAQ,cAAe,gBAkF1CC,OAhFf,WACE,OACE,qCACE,cAACphD,EAAD,IACA,sBAAK/L,UAAU,oBAAf,UACE,cAACqQ,EAAD,IACA,cAAChB,EAAD,IACA,cAACQ,EAAD,IACA,cAAC+B,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOhB,OAAK,EAACmoC,KAAM,CAAC,UAAW,YAAa,gBAA5C,SACE,cAACoR,GAAD,MAEF,cAAC,IAAD,CACEv5C,OAAK,EACLmoC,KAAMmU,GAAW7mD,KAAI,SAACxC,GAAD,iBAAYA,EAAZ,kBACrBupD,OAAQ,YAA0B,IAAvB1lC,EAAsB,EAAtBA,MAAO9qB,EAAe,EAAfA,SACZqK,EAAQ,cAAUygB,EAAMxgB,OAAO+O,WACnC,OAAO,cAAC,IAAD,CAAU3I,GAAE,2BAAO1Q,GAAP,IAAiBqK,kBAGxC,cAAC,IAAD,CACE2J,OAAK,EACLmoC,KAAM,CAAC,gBAAiB,0BACxBqU,OAAQ,gBAAG1lC,EAAH,EAAGA,MAAH,OACN,cAACy1B,GAAD,CAA0BlnC,UAAWyR,EAAMxgB,OAAO+O,eAGtD,cAAC,IAAD,CACErF,OAAK,EACLmoC,KAAM,iBACNqU,OAAQ,gBAAG1lC,EAAH,EAAGA,MAAH,OACN,cAACunB,GAAD,CAAwBh5B,UAAWyR,EAAMxgB,OAAO+O,eAGpD,cAAC,IAAD,CACErF,OAAK,EACLmoC,KAAM,CAAC,aAAc,mBACrBqU,OAAQ,gBAAG1lC,EAAH,EAAGA,MAAH,OACN,cAAColC,GAAD,CAAkBpwC,KAAMgL,EAAMxgB,OAAOqF,GAAI2sC,IAAKxxB,EAAMxgB,OAAOgyC,SAG/D,cAAC,IAAD,CACEtoC,OAAK,EACLmoC,KAAI,sBACCkU,GAAgB5mD,KAAI,SAAC0yC,GAAD,iBAAcA,EAAd,iBADrB,YAECkU,GAAgB5mD,KAAI,SAAC0yC,GAAD,iBAAcA,EAAd,uBAEzBqU,OAAQ,YAA0B,IAAvB1lC,EAAsB,EAAtBA,MAAO9qB,EAAe,EAAfA,SACZqK,EAAQ,mBAAeygB,EAAMxgB,OAAOQ,SAIxC,OAHIggB,EAAMxgB,OAAOgyC,MACfjyC,GAAQ,WAAQygB,EAAMxgB,OAAOgyC,MAExB,cAAC,IAAD,CAAU5rC,GAAE,2BAAO1Q,GAAP,IAAiBqK,kBAGxC,cAAC,IAAD,CACE2J,OAAK,EACLmoC,KAAM,CAAC,oBAAqB,0BAC5BqU,OAAQ,gBAAG1lC,EAAH,EAAGA,MAAH,OACN,cAACuxB,GAAD,CACEvxC,QAASggB,EAAMxgB,OAAOQ,QACtBwxC,IAAKxxB,EAAMxgB,OAAOgyC,SAIxB,cAAC,IAAD,CAAOtoC,OAAK,EAACmoC,KAAK,IAAlB,SACE,cAACgP,GAAD,MAEF,cAAC,IAAD,CACEqF,OAAQ,gBAAGxwD,EAAH,EAAGA,SAAH,OACN,cAAC,IAAD,CAAU0Q,GAAE,2BAAO1Q,GAAP,IAAiBqK,SAAU,qBCtF9C,SAASomD,GAAT,GAA6C,IAApBzxD,EAAmB,EAAnBA,SAC9B,OAAO,cAAC0lD,GAAD,UAA6B1lD,ICA/B,SAAS0xD,GAAT,GAAqD,IAA5B1xD,EAA2B,EAA3BA,SAC9B,OACE,cAACoV,EAAD,UACE,cAACiiC,GAAD,UAA0Br3C,MCQ9BkH,IAAY,CACVyqD,IAAK,8EAITC,IAASJ,OACP,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAACC,GAAD,UACE,cAAClG,GAAD,UACE,cAACmC,GAAD,UACE,cAAC1lC,GAAD,UACE,cAACvB,GAAD,UACE,cAACirC,GAAD,UACE,cAACn2B,GAAD,UACE,cAAC,GAAD,sBAUlBgsB,SAASC,eAAe,W","file":"static/js/main.4ae64909.chunk.js","sourcesContent":["import React from \"react\";\nimport { Connection } from \"@velas/web3\";\nimport { useQuery } from \"../utils/url\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { reportError } from \"utils/sentry\";\nimport { localStorageIsAvailable } from \"utils\";\n\nexport function clusterApiUrl(cluster: string): string {\n  switch (cluster) {\n    case \"mainnet-beta\":\n      return \"https://rpc-main-1.exzo.network\";\n    case \"testnet\":\n      return \"https://rpc-test-1.exzo.network\";\n    case \"devnet\":\n      return \"https://rpc-dev-1.exzo.network\";\n    default:\n      return \"https://rpc-test-1.exzo.network\";\n  }\n}\n\nexport enum ClusterStatus {\n  Connected,\n  Connecting,\n  Failure,\n}\n\nexport enum Cluster {\n  MainnetBeta,\n  Testnet,\n  Devnet,\n  Custom,\n}\n\nexport const CLUSTERS = [\n  Cluster.MainnetBeta,\n  Cluster.Testnet,\n  Cluster.Devnet,\n  Cluster.Custom,\n];\n\nexport function clusterSlug(cluster: Cluster): string {\n  switch (cluster) {\n    case Cluster.MainnetBeta:\n      return \"mainnet-beta\";\n    case Cluster.Testnet:\n      return \"testnet\";\n    case Cluster.Devnet:\n      return \"devnet\";\n    case Cluster.Custom:\n      return \"custom\";\n  }\n}\n\nexport function clusterName(cluster: Cluster): string {\n  switch (cluster) {\n    case Cluster.MainnetBeta:\n      return \"Mainnet\";\n    case Cluster.Testnet:\n      return \"Testnet\";\n    case Cluster.Devnet:\n      return \"Devnet\";\n    case Cluster.Custom:\n      return \"Custom\";\n  }\n}\n\nexport const MAINNET_BETA_URL = clusterApiUrl(\"mainnet-beta\");\nexport const TESTNET_URL = clusterApiUrl(\"testnet\");\nexport const DEVNET_URL = clusterApiUrl(\"devnet\");\n\nexport function clusterUrl(cluster: Cluster, customUrl: string): string {\n  switch (cluster) {\n    case Cluster.Devnet:\n      return DEVNET_URL.replace(\"api\", \"explorer-api\");\n    case Cluster.MainnetBeta:\n      return MAINNET_BETA_URL.replace(\"api\", \"explorer-api\");\n    case Cluster.Testnet:\n      return TESTNET_URL.replace(\"api\", \"explorer-api\");\n    case Cluster.Custom:\n      return customUrl;\n  }\n}\n\nexport const DEFAULT_CLUSTER = Cluster.MainnetBeta;\n\ninterface State {\n  cluster: Cluster;\n  customUrl: string;\n  firstAvailableBlock?: number;\n  status: ClusterStatus;\n}\n\ninterface Action {\n  status: ClusterStatus;\n  cluster: Cluster;\n  customUrl: string;\n  firstAvailableBlock?: number;\n}\n\ntype Dispatch = (action: Action) => void;\n\nfunction clusterReducer(state: State, action: Action): State {\n  switch (action.status) {\n    case ClusterStatus.Connected:\n    case ClusterStatus.Failure: {\n      if (\n        state.cluster !== action.cluster ||\n        state.customUrl !== action.customUrl\n      )\n        return state;\n      return action;\n    }\n    case ClusterStatus.Connecting: {\n      return action;\n    }\n  }\n}\n\nfunction parseQuery(query: URLSearchParams): Cluster {\n  const clusterParam = query.get(\"cluster\");\n  switch (clusterParam) {\n    case \"custom\":\n      return Cluster.Custom;\n    case \"devnet\":\n      return Cluster.Devnet;\n    case \"testnet\":\n      return Cluster.Testnet;\n    case \"mainnet-beta\":\n    default:\n      return Cluster.MainnetBeta;\n  }\n}\n\ntype SetShowModal = React.Dispatch<React.SetStateAction<boolean>>;\nconst ModalContext = React.createContext<[boolean, SetShowModal] | undefined>(\n  undefined\n);\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype ClusterProviderProps = { children: React.ReactNode };\nexport function ClusterProvider({ children }: ClusterProviderProps) {\n  const [state, dispatch] = React.useReducer(clusterReducer, {\n    cluster: DEFAULT_CLUSTER,\n    customUrl: \"\",\n    status: ClusterStatus.Connecting,\n  });\n  const [showModal, setShowModal] = React.useState(false);\n  const query = useQuery();\n  const cluster = parseQuery(query);\n  const enableCustomUrl =\n    localStorageIsAvailable() &&\n    localStorage.getItem(\"enableCustomUrl\") !== null;\n  const customUrl = enableCustomUrl\n    ? query.get(\"customUrl\") || \"\"\n    : state.customUrl;\n  const history = useHistory();\n  const location = useLocation();\n\n  // Remove customUrl param if dev setting is disabled\n  React.useEffect(() => {\n    if (!enableCustomUrl && query.has(\"customUrl\")) {\n      query.delete(\"customUrl\");\n      history.push({ ...location, search: query.toString() });\n    }\n  }, [enableCustomUrl]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Reconnect to cluster when params change\n  React.useEffect(() => {\n    if (cluster === Cluster.Custom) {\n      // Remove cluster param if custom url has not been set\n      if (customUrl.length === 0) {\n        query.delete(\"cluster\");\n        history.push({ ...location, search: query.toString() });\n        return;\n      }\n    }\n\n    updateCluster(dispatch, cluster, customUrl);\n  }, [cluster, customUrl]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        <ModalContext.Provider value={[showModal, setShowModal]}>\n          {children}\n        </ModalContext.Provider>\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nasync function updateCluster(\n  dispatch: Dispatch,\n  cluster: Cluster,\n  customUrl: string\n) {\n  dispatch({\n    status: ClusterStatus.Connecting,\n    cluster,\n    customUrl,\n  });\n\n  try {\n    const connection = new Connection(clusterUrl(cluster, customUrl));\n    const firstAvailableBlock = await connection.getFirstAvailableBlock();\n    dispatch({\n      status: ClusterStatus.Connected,\n      cluster,\n      customUrl,\n      firstAvailableBlock,\n    });\n  } catch (error) {\n    if (cluster !== Cluster.Custom) {\n      reportError(error, { clusterUrl: clusterUrl(cluster, customUrl) });\n    }\n    dispatch({\n      status: ClusterStatus.Failure,\n      cluster,\n      customUrl,\n    });\n  }\n}\n\nexport function useUpdateCustomUrl() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(`useUpdateCustomUrl must be used within a ClusterProvider`);\n  }\n\n  return (customUrl: string) => {\n    updateCluster(dispatch, Cluster.Custom, customUrl);\n  };\n}\n\nexport function useCluster() {\n  const context = React.useContext(StateContext);\n  if (!context) {\n    throw new Error(`useCluster must be used within a ClusterProvider`);\n  }\n  return {\n    ...context,\n    url: clusterUrl(context.cluster, context.customUrl),\n    name: clusterName(context.cluster),\n  };\n}\n\nexport function useClusterModal() {\n  const context = React.useContext(ModalContext);\n  if (!context) {\n    throw new Error(`useClusterModal must be used within a ClusterProvider`);\n  }\n  return context;\n}\n","import React from \"react\";\nimport BN from \"bn.js\";\nimport {\n  HumanizeDuration,\n  HumanizeDurationLanguage,\n} from \"humanize-duration-ts\";\n\n// Switch to web3 constant when web3 updates superstruct\nexport const LAMPORTS_PER_SOL = 1000000000;\n\nexport const NUM_TICKS_PER_SECOND = 160;\nexport const DEFAULT_TICKS_PER_SLOT = 64;\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n\nexport function assertUnreachable(x: never): never {\n  throw new Error(\"Unreachable!\");\n}\n\nexport function normalizeTokenAmount(\n  raw: string | number,\n  decimals: number\n): number {\n  let rawTokens: number;\n  if (typeof raw === \"string\") rawTokens = parseInt(raw);\n  else rawTokens = raw;\n  return rawTokens / Math.pow(10, decimals);\n}\n\nexport function lamportsToSol(lamports: number | BN): number {\n  if (typeof lamports === \"number\") {\n    return Math.abs(lamports) / LAMPORTS_PER_SOL;\n  }\n\n  let signMultiplier = 1;\n  if (lamports.isNeg()) {\n    signMultiplier = -1;\n  }\n\n  const absLamports = lamports.abs();\n  const lamportsString = absLamports.toString(10).padStart(10, \"0\");\n  const splitIndex = lamportsString.length - 9;\n  const solString =\n    lamportsString.slice(0, splitIndex) +\n    \".\" +\n    lamportsString.slice(splitIndex);\n  return signMultiplier * parseFloat(solString);\n}\n\nexport function lamportsToSolString(\n  lamports: number | BN,\n  maximumFractionDigits: number = 9\n): string {\n  const sol = lamportsToSol(lamports);\n  return new Intl.NumberFormat(\"en-US\", { maximumFractionDigits }).format(sol);\n}\n\nexport function SolBalance({\n  lamports,\n  maximumFractionDigits = 9,\n}: {\n  lamports: number | BN;\n  maximumFractionDigits?: number;\n}) {\n  return (\n    <span>\n      ◎\n      <span className=\"text-monospace\">\n        {lamportsToSolString(lamports, maximumFractionDigits)}\n      </span>\n    </span>\n  );\n}\n\nconst HUMANIZER = new HumanizeDuration(new HumanizeDurationLanguage());\nHUMANIZER.setOptions({\n  language: \"short\",\n  spacer: \"\",\n  delimiter: \" \",\n  round: true,\n  units: [\"d\", \"h\", \"m\", \"s\"],\n  largest: 3,\n});\nHUMANIZER.addLanguage(\"short\", {\n  y: () => \"y\",\n  mo: () => \"mo\",\n  w: () => \"w\",\n  d: () => \"d\",\n  h: () => \"h\",\n  m: () => \"m\",\n  s: () => \"s\",\n  ms: () => \"ms\",\n  decimal: \".\",\n});\n\nexport function slotsToHumanString(\n  slots: number,\n  slotTime = MS_PER_SLOT\n): string {\n  return HUMANIZER.humanize(slots * slotTime);\n}\n\nexport function wrap(input: string, length: number): string {\n  var result = [];\n  while (input.length) {\n    result.push(input.substr(0, length));\n    input = input.substr(length);\n  }\n  return result.join(\"\\n\");\n}\n\nexport function localStorageIsAvailable() {\n  const test = \"test\";\n  try {\n    localStorage.setItem(test, test);\n    localStorage.removeItem(test);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport function camelToTitleCase(str: string): string {\n  const result = str.replace(/([A-Z])/g, \" $1\");\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}\n\nexport function abbreviatedNumber(value: number, fixed = 1) {\n  if (value < 1e3) return value;\n  if (value >= 1e3 && value < 1e6) return +(value / 1e3).toFixed(fixed) + \"K\";\n  if (value >= 1e6 && value < 1e9) return +(value / 1e6).toFixed(fixed) + \"M\";\n  if (value >= 1e9 && value < 1e12) return +(value / 1e9).toFixed(fixed) + \"B\";\n  if (value >= 1e12) return +(value / 1e12).toFixed(fixed) + \"T\";\n}\n","import * as Sentry from \"@sentry/react\";\n\ntype Tags =\n  | {\n      [key: string]: string;\n    }\n  | undefined;\n\nexport function reportError(err: unknown, tags: Tags) {\n  if (err instanceof Error) {\n    console.error(err, err.message);\n    try {\n      Sentry.captureException(err, {\n        tags,\n      });\n    } catch (err) {\n      // Sentry can fail if error rate limit is reached\n    }\n  }\n}\n","import React from \"react\";\nimport bs58 from \"bs58\";\nimport { Connection, Message, Transaction } from \"@velas/web3\";\nimport { useCluster } from \"providers/cluster\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport { programLabel } from \"utils/tx\";\n\ntype LogMessage = {\n  text: string;\n  prefix: string;\n  style: \"muted\" | \"info\" | \"success\" | \"warning\";\n};\n\ntype InstructionLogs = {\n  logs: LogMessage[];\n  failed: boolean;\n};\n\nconst DEFAULT_SIGNATURE = bs58.encode(Buffer.alloc(64).fill(0));\n\nexport function SimulatorCard({ message }: { message: Message }) {\n  const { cluster } = useCluster();\n  const {\n    simulate,\n    simulating,\n    simulationLogs: logs,\n    simulationError,\n  } = useSimulator(message);\n  if (simulating) {\n    return (\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <h3 className=\"card-header-title\">Transaction Simulation</h3>\n        </div>\n        <div className=\"card-body text-center\">\n          <span className=\"spinner-grow spinner-grow-sm mr-2\"></span>\n          Simulating\n        </div>\n      </div>\n    );\n  } else if (!logs) {\n    return (\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <h3 className=\"card-header-title\">Transaction Simulation</h3>\n          <button className=\"btn btn-sm d-flex btn-white\" onClick={simulate}>\n            Simulate\n          </button>\n        </div>\n        {simulationError ? (\n          <div className=\"card-body\">\n            Failed to run simulation:\n            <span className=\"text-warning ml-2\">{simulationError}</span>\n          </div>\n        ) : (\n          <div className=\"card-body text-muted\">\n            <ul>\n              <li>\n                Simulation is free and will run this transaction against the\n                latest confirmed ledger state.\n              </li>\n              <li>\n                No state changes will be persisted and all signature checks will\n                be disabled.\n              </li>\n            </ul>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title\">Transaction Simulation</h3>\n        <button className=\"btn btn-sm d-flex btn-white\" onClick={simulate}>\n          Retry\n        </button>\n      </div>\n      <TableCardBody>\n        {message.instructions.map((ix, index) => {\n          const programId = message.accountKeys[ix.programIdIndex];\n          const programName =\n            programLabel(programId.toBase58(), cluster) || \"Unknown\";\n          const programLogs: InstructionLogs | undefined = logs[index];\n\n          let badgeColor = \"white\";\n          if (programLogs) {\n            badgeColor = programLogs.failed ? \"warning\" : \"success\";\n          }\n\n          return (\n            <tr key={index}>\n              <td>\n                <div className=\"d-flex align-items-center\">\n                  <span className={`badge badge-soft-${badgeColor} mr-2`}>\n                    #{index + 1}\n                  </span>\n                  {programName} Instruction\n                </div>\n                {programLogs && (\n                  <div className=\"d-flex align-items-start flex-column text-monospace p-2 font-size-sm\">\n                    {programLogs.logs.map((log, key) => {\n                      return (\n                        <span key={key}>\n                          <span className=\"text-muted\">{log.prefix}</span>\n                          <span className={`text-${log.style}`}>\n                            {log.text}\n                          </span>\n                        </span>\n                      );\n                    })}\n                  </div>\n                )}\n              </td>\n            </tr>\n          );\n        })}\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction useSimulator(message: Message) {\n  const { cluster, url } = useCluster();\n  const [simulating, setSimulating] = React.useState(false);\n  const [logs, setLogs] = React.useState<Array<InstructionLogs> | null>(null);\n  const [error, setError] = React.useState<string>();\n\n  React.useEffect(() => {\n    setLogs(null);\n    setSimulating(false);\n    setError(undefined);\n  }, [url]);\n\n  const onClick = React.useCallback(() => {\n    if (simulating) return;\n    setError(undefined);\n    setSimulating(true);\n\n    const connection = new Connection(url, \"confirmed\");\n    (async () => {\n      try {\n        const tx = Transaction.populate(\n          message,\n          new Array(message.header.numRequiredSignatures).fill(\n            DEFAULT_SIGNATURE\n          )\n        );\n\n        // Simulate without signers to skip signer verification\n        const resp = await connection.simulateTransaction(tx);\n\n        let depth = 0;\n        let instructionLogs: InstructionLogs[] = [];\n        const prefixBuilder = (depth: number) => {\n          const prefix = new Array(depth - 1).fill(\"\\u00A0\\u00A0\").join(\"\");\n          return prefix + \"> \";\n        };\n\n        let instructionError;\n        const responseLogs = resp.value.logs;\n        const responseErr = resp.value.err;\n        if (!responseLogs) {\n          if (resp.value.err) throw new Error(JSON.stringify(responseErr));\n          throw new Error(\"No logs detected\");\n        } else if (responseErr) {\n          if (typeof responseErr !== \"string\") {\n            let ixError = (responseErr as any)[\"InstructionError\"];\n            const [index, message] = ixError;\n            if (typeof message === \"string\") {\n              instructionError = { index, message };\n            }\n          } else {\n            throw new Error(responseErr);\n          }\n        }\n\n        responseLogs.forEach((log) => {\n          if (log.startsWith(\"Program log:\")) {\n            instructionLogs[instructionLogs.length - 1].logs.push({\n              prefix: prefixBuilder(depth),\n              text: log,\n              style: \"muted\",\n            });\n          } else {\n            const regex = /Program (\\w*) invoke \\[(\\d)\\]/g;\n            const matches = [...log.matchAll(regex)];\n\n            if (matches.length > 0) {\n              const programAddress = matches[0][1];\n              const programName =\n                programLabel(programAddress, cluster) ||\n                `Unknown (${programAddress}) Program`;\n\n              if (depth === 0) {\n                instructionLogs.push({\n                  logs: [],\n                  failed: false,\n                });\n              } else {\n                instructionLogs[instructionLogs.length - 1].logs.push({\n                  prefix: prefixBuilder(depth),\n                  style: \"info\",\n                  text: `Invoking ${programName}`,\n                });\n              }\n\n              depth++;\n            } else if (log.includes(\"success\")) {\n              instructionLogs[instructionLogs.length - 1].logs.push({\n                prefix: prefixBuilder(depth),\n                style: \"success\",\n                text: `Program returned success`,\n              });\n              depth--;\n            } else if (log.includes(\"failed\")) {\n              const instructionLog =\n                instructionLogs[instructionLogs.length - 1];\n              if (!instructionLog.failed) {\n                instructionLog.failed = true;\n                instructionLog.logs.push({\n                  prefix: prefixBuilder(depth),\n                  style: \"warning\",\n                  text: `Program returned error: ${log.slice(\n                    log.indexOf(\": \") + 2\n                  )}`,\n                });\n              }\n              depth--;\n            } else {\n              if (depth === 0) {\n                instructionLogs.push({\n                  logs: [],\n                  failed: false,\n                });\n                depth++;\n              }\n              // system transactions don't start with \"Program log:\"\n              instructionLogs[instructionLogs.length - 1].logs.push({\n                prefix: prefixBuilder(depth),\n                text: log,\n                style: \"muted\",\n              });\n            }\n          }\n        });\n\n        // If the instruction's simulation returned an error without any logs then add an empty log entry for Runtime error\n        // For example BpfUpgradableLoader fails without returning any logs for Upgrade instruction with buffer that doesn't exist\n        if (instructionError && instructionLogs.length === 0) {\n          instructionLogs.push({\n            logs: [],\n            failed: true,\n          });\n        }\n\n        if (\n          instructionError &&\n          instructionError.index === instructionLogs.length - 1\n        ) {\n          const failedIx = instructionLogs[instructionError.index];\n          failedIx.failed = true;\n          failedIx.logs.push({\n            prefix: prefixBuilder(1),\n            text: `Runtime error: ${instructionError.message}`,\n            style: \"warning\",\n          });\n        }\n\n        setLogs(instructionLogs);\n      } catch (err) {\n        console.error(err);\n        setLogs(null);\n        if (err instanceof Error) {\n          setError(err.message);\n        }\n      } finally {\n        setSimulating(false);\n      }\n    })();\n  }, [cluster, url, message, simulating]);\n  return {\n    simulate: onClick,\n    simulating,\n    simulationLogs: logs,\n    simulationError: error,\n  };\n}\n","import React from \"react\";\n\nexport function TableCardBody({ children }: { children: React.ReactNode }) {\n  return (\n    <div className=\"table-responsive mb-0\">\n      <table className=\"table table-sm table-nowrap card-table\">\n        <tbody className=\"list\">{children}</tbody>\n      </table>\n    </div>\n  );\n}\n","import { useLocation } from \"react-router-dom\";\nimport { Location } from \"history\";\n\nexport function useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nexport const clusterPath = (pathname: string, params?: URLSearchParams) => {\n  return (location: Location) => ({\n    ...pickClusterParams(location, params),\n    pathname,\n  });\n};\n\nexport function pickClusterParams(\n  location: Location,\n  newParams?: URLSearchParams\n): Location {\n  const urlParams = new URLSearchParams(location.search);\n  const cluster = urlParams.get(\"cluster\");\n  const customUrl = urlParams.get(\"customUrl\");\n\n  // Pick the params we care about\n  newParams = newParams || new URLSearchParams();\n  if (cluster) newParams.set(\"cluster\", cluster);\n  if (customUrl) newParams.set(\"customUrl\", customUrl);\n\n  return {\n    ...location,\n    search: newParams.toString(),\n  };\n}\n","import { Cluster } from \"providers/cluster\";\n\nconst MARKET_REGISTRY: { [key: string]: string } = {\n  \"7kgkDyW7dmyMeP8KFXzbcUZz1R2WHsovDZ7n3ihZuNDS\": \"Serum: MSRM / USDC\",\n  \"6WpkeqE5oU1MUNPWvMDHhru1G5gjxMgAtib5wXuBSvgm\": \"Serum: MSRM / USDC - Request Queue\",\n  \"DwpUjRHQuotE1LG2R68wZM3nwkv2fChHibcm7NzL8WGq\": \"Serum: MSRM / USDC - Event Queue\",\n  \"7zyPwxjHMJsTdPe7Rd992oe1cVhrZcbkcH9qURzKV8wV\": \"Serum: MSRM / USDC - Order Book (Bids)\",\n  \"4nHe9oNh7JJoJZ1HrktVghB19Cis4N848so7UCWXhF2t\": \"Serum: MSRM / USDC - Order Book (Asks)\",\n  \"8gbnu8XUNmigCSKP43UXbtYYTUHJPRbctyB7Kj1QbTyZ\": \"Serum: MSRM / USDC - Base Asset Vault\",\n  \"8MboeurJ28fQj3n18jBrM7oQSu3coyFbQUpxWnabF3gc\": \"Serum: MSRM / USDC - Quote Currency Vault\",\n  \"GFyDCG3EBVrAWiHKLf7zF2DLqMp89dLHUtsYKwFUe4AC\": \"Serum: MSRM / USDC - Vault Owner\",\n\n  \"H4snTKK9adiU15gP22ErfZYtro3aqR9BTMXiH3AwiUTQ\": \"Serum: MSRM / USDT\",\n  \"3mrit8EKnsy9M8L7EQ24GjNeuwXssVGqDRLZXDarb9Wk\": \"Serum: MSRM / USDT - Request Queue\",\n  \"98qQ1Dintci8xSUAHEJqQukSKnE9g1LQY2jxNwwgcQQu\": \"Serum: MSRM / USDT - Event Queue\",\n  \"83Snk2SJTX8KKMPmi5UX9JYKxy2QWrn2jFC9zH6NmP7L\": \"Serum: MSRM / USDT - Order Book (Bids)\",\n  \"CKjPS8ntVbN7YjGk4Goq24ScaA1qjNFFqQpVuzNkFRo4\": \"Serum: MSRM / USDT - Order Book (Asks)\",\n  \"mKeCpjYQWzptDQn5J5XfSzyoNmsnH9W3RryzUWFe3G7\": \"Serum: MSRM / USDT - Base Asset Vault\",\n  \"9o8XKrbbbA8eXMe72Tsopkk8y7aFF2HQPDMoxdyX4S9b\": \"Serum: MSRM / USDT - Quote Currency Vault\",\n  \"12rqwuEgBYiGhBrDJStCiqEtzQpTTiZbh7teNVLuYcFA\": \"Serum: MSRM / USDT - Vault Owner\",\n\n  \"CAgAeMD7quTdnr6RPa7JySQpjf3irAmefYNdTb6anemq\": \"Serum: BTC / USDC\",\n  \"5PMuDUdk7VFLSYXDo6wHsEfyfWAf1rG4rkdmrmnK4ZME\": \"Serum: BTC / USDC - Request Queue\",\n  \"DrGCgNJAwpihVrRCzd69Ys6k5ggu1qC2FQFjCESnj3Do\": \"Serum: BTC / USDC - Event Queue\",\n  \"6oVGgm4D2fgvv3jcTy3DzUHCbu14J6pe7RYqxHA5FGB1\": \"Serum: BTC / USDC - Order Book (Bids)\",\n  \"AXjn1qHYrAad5nVznXm7Txyp8WmdzJEEi5NM2axSLtnL\": \"Serum: BTC / USDC - Order Book (Asks)\",\n  \"CAiSJtSZfA5usmP9ikPz69nzJLMejbjo7CrGQLwSXR8h\": \"Serum: BTC / USDC - Base Asset Vault\",\n  \"HcEnLVJxG126a68FX6pzw252pL9jUrxkucsbth8hzh9U\": \"Serum: BTC / USDC - Quote Currency Vault\",\n  \"3bYr6BzwMqrrH1N3BGjYeEPRrRxde25zj3Garud4qom3\": \"Serum: BTC / USDC - Vault Owner\",\n\n  \"8AcVjMG2LTbpkjNoyq8RwysokqZunkjy3d5JDzxC6BJa\": \"Serum: BTC / USDT\",\n  \"5r8FfnbNYcQbS1m4CYmoHYGjBtu6bxfo6UJHNRfzPiYH\": \"Serum: BTC / USDT\",\n  \"DoYVFapBvZksM6DqqsWgLrqYQL5JknhnjFcEPb2jCr6D\": \"Serum: BTC / USDT - Request Queue\",\n  \"6iveBLh1CWrE1T4p7AE1tX3DPSpnbPLxCPZ2RxTfeTvT\": \"Serum: BTC / USDT - Event Queue\",\n  \"5N2uRKMNDv22rgV8Cm8VtyTByvKGfdFBTtUToqga3bxR\": \"Serum: BTC / USDT - Order Book (Bids)\",\n  \"7g8U7LqXbMcRyLnU3KhDNJKrq4VTDbvcVTL3Qt1onKJD\": \"Serum: BTC / USDT - Order Book (Asks)\",\n  \"5piQPUuxpGR1HVDA7vMJneH3bcogmXJo7crgNmwaP49D\": \"Serum: BTC / USDT - Base Asset Vault\",\n  \"5Gb6ngdANPa3upkaGbcR9ib55PcsktDhiQcsVr3XCZhj\": \"Serum: BTC / USDT - Quote Currency Vault\",\n  \"4rJea7ape61LD6CredX9Xd5mWpKQiJrcWwencsUe1s5r\": \"Serum: BTC / USDT - Vault Owner\",\n\n  \"ASKiV944nKg1W9vsf7hf3fTsjawK6DwLwrnB2LH9n61c\": \"Serum: ETH / USDC\",\n  \"BWqhtYi9sQgN8wfsJNBkKA5fMmbmctFwjUL1xZSHEEdm\": \"Serum: ETH / USDC - Request Queue\",\n  \"PzjG3J5Lzm2P9BaeHHogxacp1BDMtawvrz88fWuadT4\": \"Serum: ETH / USDC - Event Queue\",\n  \"9HqtE85iR2DFMDduCAZe9DG9ygckE7WgmVmbdvKVj3x1\": \"Serum: ETH / USDC - Order Book (Bids)\",\n  \"tSZM7972KpDL1WV2r9fTwGhaoPWhJ8nMnEzuvhW9b6Y\": \"Serum: ETH / USDC - Order Book (Asks)\",\n  \"HSzt9nNG6MuD1iojc76Ke3eeZ9tN4nnd2NduR3ZccE48\": \"Serum: ETH / USDC - Base Asset Vault\",\n  \"Hmxx3y5EiaaYrC65uoxmsP97TTDs7ffHAi44oiKxTypU\": \"Serum: ETH / USDC - Quote Currency Vault\",\n  \"4PfXQMYgQPZe7Z6SuAFKmRiM2jNMi9XbN2vbMS2BhwSm\": \"Serum: ETH / USDC - Vault Owner\",\n\n  \"HfCZdJ1wfsWKfYP2qyWdXTT5PWAGWFctzFjLH48U1Hsd\": \"Serum: ETH / USDT\",\n  \"71CtEComq2XdhGNbXBuYPmosAjMCPSedcgbNi5jDaGbR\": \"Serum: ETH / USDT\",\n  \"78dUr2kcuvDnsxTb8caFaGeD8GBmreReSLevDEJjVJmf\": \"Serum: ETH / USDT - Request Queue\",\n  \"2GQd5e5z5BvsPyqSVVUs5Qgk8uSPf43MWnKAMfEQRPH7\": \"Serum: ETH / USDT - Event Queue\",\n  \"888UP9HWwY1vaCMpNpP4nzQXgn7hpqomaFwQcV95FkYB\": \"Serum: ETH / USDT - Order Book (Bids)\",\n  \"RCDCybQ7ivCzZPLWQWXNmQo1b6kyAbrkYZStnpJC3Dd\": \"Serum: ETH / USDT - Order Book (Asks)\",\n  \"E67Asz53dn73aw7Eju1UdL72qVGTK4Svv3Bk7BYdmwTa\": \"Serum: ETH / USDT - Base Asset Vault\",\n  \"J9EEc8dgJyygNWwN8xzsMh342hS58JRyuX4mBqKNUyQn\": \"Serum: ETH / USDT - Quote Currency Vault\",\n  \"9UY946SraowE1R97at4qc8NXfJdr75mBLTbjesN4JKb8\": \"Serum: ETH / USDT - Vault Owner\",\n\n  \"68J6nkWToik6oM9rTatKSR5ibVSykAtzftBUEAvpRsys\": \"Serum: SRM / USDC\",\n  \"GPwEA9RMXAk2ovJZke6xczWt9HM9NzAAC5GD8JeTNRfL\": \"Serum: SRM / USDC - Request Queue\",\n  \"2N1a9yuTRePYzjszUHr2qyjhrKdH3UqUosEbW9sRm5Sq\": \"Serum: SRM / USDC - Event Queue\",\n  \"GKiV6ogZunNyk5nhcRZLTmDbXztDynyB674apQgGo5ve\": \"Serum: SRM / USDC - Order Book (Bids)\",\n  \"CASsL5nemAKjD6qCPKXWmfWK1WHQXARVoBUynmTnfgS2\": \"Serum: SRM / USDC - Order Book (Asks)\",\n  \"7pzWoBvBdQkF8SLA2PjYNX2aPddPCSnqQ8LTefvQAaq2\": \"Serum: SRM / USDC - Base Asset Vault\",\n  \"Gge5vGgh15dWeJPJSQyErqiTVffUNkctteAoT4tHjRFB\": \"Serum: SRM / USDC - Quote Currency Vault\",\n  \"AZVmspyVcUv78HX9PtMFr5guSswotsV6Afsr7Vaifz2P\": \"Serum: SRM / USDC - Vault Owner\",\n\n  \"HARFLhSq8nECZk4DVFKvzqXMNMA9a3hjvridGMFizeLa\": \"Serum: SRM / USDT\",\n  \"3p86S1RzNo7sCVBD3awQ9M88C9bHdgCeDirU2bDv7P3n\": \"Serum: SRM / USDT - Request Queue\",\n  \"yaJV7SqjmDyQXkpEtyxF4R1k3UdVJtdKse7RHB3hKLE\": \"Serum: SRM / USDT - Event Queue\",\n  \"4KoZ6w5hbUGUgBJyAvUZAtHx2MCDyoGrFXZyAXrpu3ep\": \"Serum: SRM / USDT - Order Book (Bids)\",\n  \"CS3k6C8gWUupTBeEeh8AyK8fHN16Yj9zXaqLPh3Q4Ti8\": \"Serum: SRM / USDT - Order Book (Asks)\",\n  \"8u5NUxd5ShNe5LNv42MXqJ7uuWgAigGe9b5DueLttTh7\": \"Serum: SRM / USDT - Base Asset Vault\",\n  \"FvTgrXUUD2KiLBybdPa3zG5tJJuCD3qyrJsennNRc58W\": \"Serum: SRM / USDT - Quote Currency Vault\",\n  \"7SjKY8GoSVTNZa26gNyMtgdUMEKYcxNPtbGVFTmiFbhS\": \"Serum: SRM / USDT - Vault Owner\",\n\n  \"FZqrBXz7ADGsmDf1TM9YgysPUfvtG8rJiNUrqDpHc9Au\": \"Serum: FTC / USDC\",\n  \"2spxPVwPaMWruDHiFfwbchwWG6Lx2soxaCGhjK6DFL1a\": \"Serum: FTC / USDC - Request Queue\",\n  \"9YbacjStsjbAL2P2tjn3TEALBABBh2jsroq911bEbmva\": \"Serum: FTC / USDC - Event Queue\",\n  \"8Vwf6LVGyB5XcxRUPC1S4U2U3GkoEf9x6yTLhwGE611y\": \"Serum: FTC / USDC - Order Book (Bids)\",\n  \"GjasUQFVeXcaGcZk5qFRfdWpbbEMcAbv2EVSFxpu6EDR\": \"Serum: FTC / USDC - Order Book (Asks)\",\n  \"6HmxKKjmmRZZqUYTH63whUWWF7vdNQfiKx2BtUrtFB3A\": \"Serum: FTC / USDC - Base Asset Vault\",\n  \"2mULsMxTia5uAiFi8huEQ3zeCe8UBXRdnVaQYybnsJ6L\": \"Serum: FTC / USDC - Quote Currency Vault\",\n  \"G4FCN83ZSRh4baXDY8eNLhk8reWxKZke3dnDBPmev1Bk\": \"Serum: FTC / USDC - Vault Owner\",\n\n  \"DHDdghmkBhEpReno3tbzBPtsxCt6P3KrMzZvxavTktJt\": \"Serum: FTT / USDT\",\n  \"6cXxUcn7yAkgEWAHqXDav7zeEkbGRAC3cR8VpgzD8kxy\": \"Serum: FTT / USDT - Request Queue\",\n  \"GmE8DSdDkEJJfzABt7DRYB2DUrPKSLgjzBMsgHjpKmZX\": \"Serum: FTT / USDT - Event Queue\",\n  \"DiBDJzU91rSGqrTjnVtQgnsJ3dGYQ2TYwspwxsMLzZV4\": \"Serum: FTT / USDT - Order Book (Bids)\",\n  \"B2qVWSfy4HFK9tGATeYWFbMZ6fi54DEiMCh5bDGmy9n4\": \"Serum: FTT / USDT - Order Book (Asks)\",\n  \"6xKUQy2Ao4KVvyPns88AwPXchemb9EY4YB3r8gczg6gu\": \"Serum: FTT / USDT - Base Asset Vault\",\n  \"DEixXfs1PJ4q8VcNYJas2JFDdgFnKMS5mEj9WKP9Kn1J\": \"Serum: FTT / USDT - Quote Currency Vault\",\n  \"F3Wh4ZAEkR8xrdXwzrADLotvJmYjUiQNwWVvm91mAAa8\": \"Serum: FTT / USDT - Vault Owner\",\n\n  \"FJg9FUtbN3fg3YFbMCFiZKjGh5Bn4gtzxZmtxFzmz9kT\": \"Serum: YFI / USDC\",\n  \"13mTW8D1yoyXMVyCKtmVBtH1sSnHBUWCjfjNJp6CEtDf\": \"Serum: YFI / USDC - Request Queue\",\n  \"EzZkAWQ97k5D1Augf1bopK7zf9CwJZ9V6eCua6yNGnNj\": \"Serum: YFI / USDC - Event Queue\",\n  \"5ULcF7rHaMFqmGWBYxcsFGSpo2SfWYzJ4TcMAYWrMG3S\": \"Serum: YFI / USDC - Order Book (Bids)\",\n  \"78XjqnsSY9CWibWCiAumfx8oSL7yCjoWA1DuuvN4TfUr\": \"Serum: YFI / USDC - Order Book (Asks)\",\n  \"7j3UcJ77HqA7MTpBNYniBtkDs2F5EgxaLv4oRhK1t63Z\": \"Serum: YFI / USDC - Base Asset Vault\",\n  \"AbMjvkKRRa5SSwR1MHrSL5inxuybDDMfL3F5RJuMyaHL\": \"Serum: YFI / USDC - Quote Currency Vault\",\n  \"AnuZK381G6gSbfMsWykkD33WwS4BENfL2rqciQhfbN9L\": \"Serum: YFI / USDC - Vault Owner\",\n\n  \"5zu5bTZZvqESAAgFsr12CUMxdQvMrvU9CgvC1GW8vJdf\": \"Serum: YFI / USDT\",\n  \"HRhgyAnVKX5waJWyC9Yd8jiBnEtwxzjKwk2feSVKrWs3\": \"Serum: YFI / USDT - Request Queue\",\n  \"DZ9rDKDzimKwTCspqePzH5768rqxkjEkDdhHT46ZqSiJ\": \"Serum: YFI / USDT - Event Queue\",\n  \"M6cbtnTtDKeehBpie5edWNLX9C3CNFzZA7HBhjevXiJ\": \"Serum: YFI / USDT - Order Book (Bids)\",\n  \"C7XehQ7R7R8CrxJkJFhoRtsV4SJyKhYoawqadxxYYs3F\": \"Serum: YFI / USDT - Order Book (Asks)\",\n  \"9gFKq8bvkCYwqoLQj6ZXckggS2BEb7Jj6mnUMPxagDVj\": \"Serum: YFI / USDT - Base Asset Vault\",\n  \"8GF7m51UzcvRWwcRcXRpttetB7PwfHdwn9fqE9PCLk6F\": \"Serum: YFI / USDT - Quote Currency Vault\",\n  \"Ci5BrxgxTB2nfmsBz5REpDaChJTZk7FhFTBb8jFbfJp5\": \"Serum: YFI / USDT - Vault Owner\",\n\n  \"7GZ59DMgJ7D6dfoJTpszPayTRyua9jwcaGJXaRMMF1my\": \"Serum: LINK / USDC\",\n  \"8wTo4Tn3QfzYwyjoofutKU4CE8i98Zj8AJrSa2BL4vso\": \"Serum: LINK / USDC - Request Queue\",\n  \"4BTeKadBCoTaCrxwSYj36FNiutZFvRMi8bvuPqZA9pKW\": \"Serum: LINK / USDC - Event Queue\",\n  \"GoaFC6qRq7MNy1suxvPSNYeoioN32kad17qbdqqWEnTe\": \"Serum: LINK / USDC - Order Book (Bids)\",\n  \"9cLbP6pEwEXDttbgTrPqYzxyXnHFygj29DT1EdtrQFfS\": \"Serum: LINK / USDC - Order Book (Asks)\",\n  \"2vXebfXSBhQ1aEV5Nnv4j3eo1RJVuJP7CoWmHNdvPvhk\": \"Serum: LINK / USDC - Base Asset Vault\",\n  \"BnzYkmNRVZ6Q71mvzLwYqkU5B4S2hUdqm1GyU2DfQJEC\": \"Serum: LINK / USDC - Quote Currency Vault\",\n  \"Fpg7XoRAfvrxaVSHmuUS8HRfGzBjRmMoWvRDHoW6G3zV\": \"Serum: LINK / USDC - Vault Owner\",\n\n  \"F5xschQBMpu1gD2q1babYEAVJHR1buj1YazLiXyQNqSW\": \"Serum: LINK / USDT\",\n  \"Ga48n8R13mW4jFnUXmejVa4tPpR8nAo3mYKG95qZEUZV\": \"Serum: LINK / USDT - Request Queue\",\n  \"H7ZHuTaMHswJWbJxsCgtV4ar28Kjty2hB1DbZVT3icjB\": \"Serum: LINK / USDT - Event Queue\",\n  \"HAx1rwxYapD4CPm9G3H2hq1bufykJg6LksZjU39HwHov\": \"Serum: LINK / USDT - Order Book (Bids)\",\n  \"7sjAfkzD9xCU68dmvCtt5mEFBaFzqF8GrYjKdUDhLnst\": \"Serum: LINK / USDT - Order Book (Asks)\",\n  \"5vNPSbGTMUzKPQtDdDBGUCeCip9uD8igj4Erfdzz7YdU\": \"Serum: LINK / USDT - Base Asset Vault\",\n  \"76jYTFWR1qjaxNeNvLmHuLeitBEdpQ9P7QPBa4pMp5ve\": \"Serum: LINK / USDT - Quote Currency Vault\",\n  \"BeZc9vWGyNJ5g6gG8JoRSkvY5oJgyjV7ErLajfVDJ3FA\": \"Serum: LINK / USDT - Vault Owner\",\n\n  \"4eM8iy2k7VXec5VxRk8xFRhHw5Cn67m5FjNzCEegWibm\": \"Serum: XRP / USDC\",\n  \"56RPf4XMR1wLhPKnxgr1cko9gpDWwE7i8w5owWLW4qNT\": \"Serum: XRP / USDC - Request Queue\",\n  \"49oPGPoTexM5CLzrbrMNiNbrrRjhBfLvEPTZRzsPYL3g\": \"Serum: XRP / USDC - Event Queue\",\n  \"66oziZDCXpsCJkYHcxucmEp6bCPaRJUPeeAjSwnudkhb\": \"Serum: XRP / USDC - Order Book (Bids)\",\n  \"9cy917jmyRQqQCocgtnPv5gjiUMx4x4npUPF2CP9bHxP\": \"Serum: XRP / USDC - Order Book (Asks)\",\n  \"9Sfk6Hk9V8FR3kxYNhNt1STKAtWuXifQGKxUJ9g3Np4b\": \"Serum: XRP / USDC - Base Asset Vault\",\n  \"8gDM85fdTxEWYVbBPDQFh1d5gVRTDQ4vhpCai3UTEdS7\": \"Serum: XRP / USDC - Quote Currency Vault\",\n  \"5LaKtnftuks8DB8aJGuHrMnY95KJcUhSpJ77pRi5mvGP\": \"Serum: XRP / USDC - Vault Owner\",\n\n  \"H5BtazuKhHtZCZjFTZSRd4W3QZRaRgq6JcQCBLbjkj1o\": \"Serum: XRP / USDT\",\n  \"6tYvWamhBADnQ3rv7BvAUMyKgcJ2CgtNGSw79REXnsc6\": \"Serum: XRP / USDT - Request Queue\",\n  \"eKr9MEvo1Nv1CMYTjUE3cw1qk3infy5VdtaCZEFkZzn\": \"Serum: XRP / USDT - Event Queue\",\n  \"HrmGTNSsAoe7cUdtZPqzZmnTfnS9WvNwwqiAYXi8ZwAW\": \"Serum: XRP / USDT - Order Book (Bids)\",\n  \"BVejg9wNCCai4n2EgTpkiPev3gvS15f1AoKTmK9b2pNs\": \"Serum: XRP / USDT - Order Book (Asks)\",\n  \"2SmRPibwnar9Gd9byx5nK6D8ikAcEUQn7ZC6yqjTBkDg\": \"Serum: XRP / USDT - Base Asset Vault\",\n  \"3jjzgJWeFk3J57JvSJ6P22GdyQFkBTbTLsWB6eSNf6WJ\": \"Serum: XRP / USDT - Quote Currency Vault\",\n  \"GJKaUk5NCHL4LTpP1Yn57qzTdCtjd3mSCyvXdktF4uPx\": \"Serum: XRP / USDT - Vault Owner\",\n\n  \"BGjv1z7GLAHQH9F9Xd6a3idz5JUo1tka8rsLizPvPq5Z\": \"Serum: SRM / USDC\",\n  \"E6EQQpB7nQwbzggSCUUPhjE8C9TGSw5dguQuQPMgr5Dt\": \"Serum: SRM / USDC - Request Queue\",\n  \"8yG8L7hcUtnboi4RcGQ1SBz9njeXzPvJUrmYrysFr1rT\": \"Serum: SRM / USDC - Event Queue\",\n  \"FjPSrcboahL3jGe4GVZDPURQWE8dL3TWVFHNznK6qaXi\": \"Serum: SRM / USDC - Order Book (Bids)\",\n  \"Bh5JCiV2uMsNLDiy5oKJ23YmCPwnmeGQ34kGHUF5dhgu\": \"Serum: SRM / USDC - Order Book (Asks)\",\n  \"8q42g61uTZ9bH9RFdWJyceBTcsRJyaeehzUtSyYzMbj2\": \"Serum: SRM / USDC - Base Asset Vault\",\n  \"2Rn3quSFg8cKTcHwadmEXoR2dcjqhsF3s3AJXZUDKMJb\": \"Serum: SRM / USDC - Quote Currency Vault\",\n  \"BeiNALSUcT23SqwnGKxJ6XUG1jeFcCozKd3SBKVgDRBN\": \"Serum: SRM / USDC - Vault Owner\",\n\n  \"9kJ8YCHZSiqXgfFyT9LoNVFEv8og3C5oN1pPCwmYRgCz\": \"Serum: SRM / USDT\",\n  \"9DsKwjwP1wkg2UaYXESQtbbTYJ6Q888gfuoa1yAuzMAp\": \"Serum: SRM / USDT - Request Queue\",\n  \"BKhdZHfXaVQ1TjG8mNvifJiMxazjRpWcznjCbtxt3YNv\": \"Serum: SRM / USDT - Event Queue\",\n  \"4iy4REdaS3AEWC4fGZmxP121qKTZ659EeKYyP5uB66qj\": \"Serum: SRM / USDT - Order Book (Bids)\",\n  \"2BmuY8oAZVUSn9F2r8JGcLcJN8VHc5QFecub7XBx234W\": \"Serum: SRM / USDT - Order Book (Asks)\",\n  \"HZ1aXc9KVfGGS9mD2mzxHh5jeJSvQrx1dz4zGWBaGmkE\": \"Serum: SRM / USDT - Base Asset Vault\",\n  \"FEyMWn3KnWVEMeJr8q7nQxfQu3jq15MchkhLq94kEoVh\": \"Serum: SRM / USDT - Quote Currency Vault\",\n  \"9sBxruSjQ97z8k42RXAr2grx9S7Fsk2yisbvZE9cNfjG\": \"Serum: SRM / USDT - Vault Owner\",\n};\n\nfunction get(address: string, cluster: Cluster): string | undefined {\n  if (cluster === Cluster.MainnetBeta) return MARKET_REGISTRY[address];\n}\n\nexport const SerumMarketRegistry = {\n  get,\n};\n","import bs58 from \"bs58\";\nimport {\n  SystemProgram,\n  StakeProgram,\n  VOTE_PROGRAM_ID,\n  BPF_LOADER_PROGRAM_ID,\n  BPF_LOADER_DEPRECATED_PROGRAM_ID,\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_REWARDS_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n  ParsedTransaction,\n  TransactionInstruction,\n  Transaction,\n  PartiallyDecodedInstruction,\n  ParsedInstruction,\n  Secp256k1Program,\n} from \"@velas/web3\";\nimport { Cluster } from \"providers/cluster\";\nimport { SerumMarketRegistry } from \"serumMarketRegistry\";\nimport { TokenInfoMap } from \"@solana/spl-token-registry\";\n\nexport type ProgramName =\n  typeof PROGRAM_NAME_BY_ID[keyof typeof PROGRAM_NAME_BY_ID];\n\nexport enum PROGRAM_NAMES {\n  // native built-ins\n  CONFIG = \"Config Program\",\n  STAKE = \"Stake Program\",\n  SYSTEM = \"System Program\",\n  VOTE = \"Vote Program\",\n  SECP256K1 = \"Secp256k1 Program\",\n\n  // spl\n  ASSOCIATED_TOKEN = \"Associated Token Program\",\n  FEATURE_PROPOSAL = \"Feature Proposal Program\",\n  LENDING = \"Lending Program\",\n  MEMO = \"Memo Program\",\n  MEMO_2 = \"Memo Program v2\",\n  SWAP = \"Swap Program\",\n  TOKEN = \"Token Program\",\n\n  // other\n  WORMHOLE = \"Wormhole\",\n  BONFIDA_POOL = \"Bonfida Pool Program\",\n  BREAK_SOLANA = \"Break Solana Program\",\n  RAYDIUM_LIQUIDITY_1 = \"Raydium Liquidity Pool Program v1\",\n  RAYDIUM_LIQUIDITY_2 = \"Raydium Liquidity Pool Program v2\",\n  RAYDIUM_STAKING = \"Raydium Staking Program\",\n  SERUM_1 = \"Serum Program v1\",\n  SERUM_2 = \"Serum Program v2\",\n  SERUM_3 = \"Serum Program v3\",\n  MANGO_3 = \"Mango Program v3\",\n}\n\nconst ALL_CLUSTERS = [\n  Cluster.Custom,\n  Cluster.Devnet,\n  Cluster.Testnet,\n  Cluster.MainnetBeta,\n];\n\nconst LIVE_CLUSTERS = [Cluster.Devnet, Cluster.Testnet, Cluster.MainnetBeta];\n\nconst MAINNET_ONLY = [Cluster.MainnetBeta];\n\nexport const PROGRAM_DEPLOYMENTS = {\n  // native built-ins\n  [PROGRAM_NAMES.CONFIG]: ALL_CLUSTERS,\n  [PROGRAM_NAMES.STAKE]: ALL_CLUSTERS,\n  [PROGRAM_NAMES.SYSTEM]: ALL_CLUSTERS,\n  [PROGRAM_NAMES.VOTE]: ALL_CLUSTERS,\n  [PROGRAM_NAMES.SECP256K1]: ALL_CLUSTERS,\n\n  // spl\n  [PROGRAM_NAMES.ASSOCIATED_TOKEN]: ALL_CLUSTERS,\n  [PROGRAM_NAMES.FEATURE_PROPOSAL]: ALL_CLUSTERS,\n  [PROGRAM_NAMES.LENDING]: LIVE_CLUSTERS,\n  [PROGRAM_NAMES.MEMO]: ALL_CLUSTERS,\n  [PROGRAM_NAMES.MEMO_2]: ALL_CLUSTERS,\n  [PROGRAM_NAMES.SWAP]: LIVE_CLUSTERS,\n  [PROGRAM_NAMES.TOKEN]: ALL_CLUSTERS,\n\n  // other\n  [PROGRAM_NAMES.WORMHOLE]: MAINNET_ONLY,\n  [PROGRAM_NAMES.BONFIDA_POOL]: MAINNET_ONLY,\n  [PROGRAM_NAMES.BREAK_SOLANA]: LIVE_CLUSTERS,\n  [PROGRAM_NAMES.RAYDIUM_LIQUIDITY_1]: MAINNET_ONLY,\n  [PROGRAM_NAMES.RAYDIUM_LIQUIDITY_2]: MAINNET_ONLY,\n  [PROGRAM_NAMES.RAYDIUM_STAKING]: MAINNET_ONLY,\n  [PROGRAM_NAMES.SERUM_1]: MAINNET_ONLY,\n  [PROGRAM_NAMES.SERUM_2]: MAINNET_ONLY,\n  [PROGRAM_NAMES.SERUM_3]: MAINNET_ONLY,\n  [PROGRAM_NAMES.MANGO_3]: MAINNET_ONLY,\n} as const;\n\nexport const PROGRAM_NAME_BY_ID = {\n  // native built-ins\n  Config1111111111111111111111111111111111111: PROGRAM_NAMES.CONFIG,\n  [StakeProgram.programId.toBase58()]: PROGRAM_NAMES.STAKE,\n  [SystemProgram.programId.toBase58()]: PROGRAM_NAMES.SYSTEM,\n  [VOTE_PROGRAM_ID.toBase58()]: PROGRAM_NAMES.VOTE,\n  [Secp256k1Program.programId.toBase58()]: PROGRAM_NAMES.SECP256K1,\n\n  // spl\n  ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL: PROGRAM_NAMES.ASSOCIATED_TOKEN,\n  Feat1YXHhH6t1juaWF74WLcfv4XoNocjXA6sPWHNgAse: PROGRAM_NAMES.FEATURE_PROPOSAL,\n  Memo1UhkJRfHyvLMcVucJwxXeuD728EqVDDwQDxFMNo: PROGRAM_NAMES.MEMO,\n  MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr: PROGRAM_NAMES.MEMO_2,\n  SwaPpA9LAaLfeLi3a68M4DjnLqgtticKg6CnyNwgAC8: PROGRAM_NAMES.SWAP,\n  TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA: PROGRAM_NAMES.TOKEN,\n  LendZqTs7gn5CTSJU1jWKhKuVpjJGom45nnwPb2AMTi: PROGRAM_NAMES.LENDING,\n\n  // other\n  WormT3McKhFJ2RkiGpdw9GKvNCrB2aB54gb2uV9MfQC: PROGRAM_NAMES.WORMHOLE,\n  WvmTNLpGMVbwJVYztYL4Hnsy82cJhQorxjnnXcRm3b6: PROGRAM_NAMES.BONFIDA_POOL,\n  BrEAK7zGZ6dM71zUDACDqJnekihmwF15noTddWTsknjC: PROGRAM_NAMES.BREAK_SOLANA,\n  RVKd61ztZW9GUwhRbbLoYVRE5Xf1B2tVscKqwZqXgEr:\n    PROGRAM_NAMES.RAYDIUM_LIQUIDITY_1,\n  \"27haf8L6oxUeXrHrgEgsexjSY5hbVUWEmvv9Nyxg8vQv\":\n    PROGRAM_NAMES.RAYDIUM_LIQUIDITY_2,\n  EhhTKczWMGQt46ynNeRX1WfeagwwJd7ufHvCDjRxjo5Q: PROGRAM_NAMES.RAYDIUM_STAKING,\n  BJ3jrUzddfuSrZHXSCxMUUQsjKEyLmuuyZebkcaFp2fg: PROGRAM_NAMES.SERUM_1,\n  EUqojwWA2rd19FZrzeBncJsm38Jm1hEhE3zsmX3bRc2o: PROGRAM_NAMES.SERUM_2,\n  \"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin\": PROGRAM_NAMES.SERUM_3,\n  mv3ekLzLbnVPNxjSKvqBpU3ZeZXPQdEC3bp5MDEBG68: PROGRAM_NAMES.MANGO_3,\n} as const;\n\nexport type LoaderName = typeof LOADER_IDS[keyof typeof LOADER_IDS];\nexport const LOADER_IDS = {\n  MoveLdr111111111111111111111111111111111111: \"Move Loader\",\n  NativeLoader1111111111111111111111111111111: \"Native Loader\",\n  [BPF_LOADER_DEPRECATED_PROGRAM_ID.toBase58()]: \"BPF Loader\",\n  [BPF_LOADER_PROGRAM_ID.toBase58()]: \"BPF Loader 2\",\n  BPFLoaderUpgradeab1e11111111111111111111111: \"BPF Upgradeable Loader\",\n} as const;\n\nexport const SPECIAL_IDS: { [key: string]: string } = {\n  \"1nc1nerator11111111111111111111111111111111\": \"Incinerator\",\n  Sysvar1111111111111111111111111111111111111: \"SYSVAR\",\n};\n\nexport const SYSVAR_IDS = {\n  [SYSVAR_CLOCK_PUBKEY.toBase58()]: \"Sysvar: Clock\",\n  SysvarEpochSchedu1e111111111111111111111111: \"Sysvar: Epoch Schedule\",\n  SysvarFees111111111111111111111111111111111: \"Sysvar: Fees\",\n  SysvarRecentB1ockHashes11111111111111111111: \"Sysvar: Recent Blockhashes\",\n  [SYSVAR_RENT_PUBKEY.toBase58()]: \"Sysvar: Rent\",\n  [SYSVAR_REWARDS_PUBKEY.toBase58()]: \"Sysvar: Rewards\",\n  SysvarS1otHashes111111111111111111111111111: \"Sysvar: Slot Hashes\",\n  SysvarS1otHistory11111111111111111111111111: \"Sysvar: Slot History\",\n  [SYSVAR_STAKE_HISTORY_PUBKEY.toBase58()]: \"Sysvar: Stake History\",\n  Sysvar1nstructions1111111111111111111111111: \"Sysvar: Instructions\",\n};\n\nexport function programLabel(\n  address: string,\n  cluster: Cluster\n): string | undefined {\n  const programName = PROGRAM_NAME_BY_ID[address];\n  if (programName && PROGRAM_DEPLOYMENTS[programName].includes(cluster)) {\n    return programName;\n  }\n\n  return LOADER_IDS[address];\n}\n\nexport function tokenLabel(\n  address: string,\n  tokenRegistry?: TokenInfoMap\n): string | undefined {\n  if (!tokenRegistry) return;\n  const tokenInfo = tokenRegistry.get(address);\n  if (!tokenInfo) return;\n  if (tokenInfo.name === tokenInfo.symbol) {\n    return tokenInfo.name;\n  }\n  return `${tokenInfo.symbol} - ${tokenInfo.name}`;\n}\n\nexport function addressLabel(\n  address: string,\n  cluster: Cluster,\n  tokenRegistry?: TokenInfoMap\n): string | undefined {\n  return (\n    programLabel(address, cluster) ||\n    SYSVAR_IDS[address] ||\n    SPECIAL_IDS[address] ||\n    tokenLabel(address, tokenRegistry) ||\n    SerumMarketRegistry.get(address, cluster)\n  );\n}\n\nexport function displayAddress(\n  address: string,\n  cluster: Cluster,\n  tokenRegistry: TokenInfoMap\n): string {\n  return addressLabel(address, cluster, tokenRegistry) || address;\n}\n\nexport function intoTransactionInstruction(\n  tx: ParsedTransaction,\n  instruction: ParsedInstruction | PartiallyDecodedInstruction\n): TransactionInstruction | undefined {\n  const message = tx.message;\n  if (\"parsed\" in instruction) return;\n\n  const keys = [];\n  for (const account of instruction.accounts) {\n    const accountKey = message.accountKeys.find(({ pubkey }) =>\n      pubkey.equals(account)\n    );\n    if (!accountKey) return;\n    keys.push({\n      pubkey: accountKey.pubkey,\n      isSigner: accountKey.signer,\n      isWritable: accountKey.writable,\n    });\n  }\n\n  return new TransactionInstruction({\n    data: bs58.decode(instruction.data),\n    keys: keys,\n    programId: instruction.programId,\n  });\n}\n\nexport function intoParsedTransaction(tx: Transaction): ParsedTransaction {\n  const message = tx.compileMessage();\n  return {\n    signatures: tx.signatures.map((value) =>\n      bs58.encode(value.signature as any)\n    ),\n    message: {\n      accountKeys: message.accountKeys.map((key, index) => ({\n        pubkey: key,\n        signer: tx.signatures.some(({ publicKey }) => publicKey.equals(key)),\n        writable: message.isAccountWritable(index),\n      })),\n      instructions: message.instructions.map((ix) => ({\n        programId: message.accountKeys[ix.programIdIndex],\n        accounts: ix.accounts.map((index) => message.accountKeys[index]),\n        data: ix.data,\n      })),\n      recentBlockhash: message.recentBlockhash,\n    },\n  };\n}\n","import React from \"react\";\n\ntype OverlayProps = {\n  show: boolean;\n};\n\nexport function Overlay({ show }: OverlayProps) {\n  return <div className={`modal-backdrop fade${show ? \" show\" : \"\"}`}></div>;\n}\n","import React, { ChangeEvent } from \"react\";\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\nimport { useDebounceCallback } from \"@react-hook/debounce\";\nimport { Location } from \"history\";\nimport {\n  useCluster,\n  ClusterStatus,\n  clusterUrl,\n  clusterName,\n  clusterSlug,\n  CLUSTERS,\n  Cluster,\n  useClusterModal,\n  useUpdateCustomUrl,\n} from \"providers/cluster\";\nimport { assertUnreachable, localStorageIsAvailable } from \"../utils\";\nimport { Overlay } from \"./common/Overlay\";\nimport { useQuery } from \"utils/url\";\n\nexport function ClusterModal() {\n  const [show, setShow] = useClusterModal();\n  const onClose = () => setShow(false);\n  const showDeveloperSettings = localStorageIsAvailable();\n  const enableCustomUrl =\n    showDeveloperSettings && localStorage.getItem(\"enableCustomUrl\") !== null;\n  const onToggleCustomUrlFeature = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      localStorage.setItem(\"enableCustomUrl\", \"\");\n    } else {\n      localStorage.removeItem(\"enableCustomUrl\");\n    }\n  };\n\n  return (\n    <>\n      <div\n        className={`modal fade fixed-right${show ? \" show\" : \"\"}`}\n        onClick={onClose}\n      >\n        <div className=\"modal-dialog modal-dialog-vertical\">\n          <div className=\"modal-content\">\n            <div className=\"modal-body\" onClick={(e) => e.stopPropagation()}>\n              <span className=\"c-pointer\" onClick={onClose}>\n                &times;\n              </span>\n\n              <h2 className=\"text-center mb-4 mt-4\">Choose a Cluster</h2>\n              <ClusterToggle />\n\n              {showDeveloperSettings && (\n                <>\n                  <hr />\n\n                  <h2 className=\"text-center mb-4 mt-4\">Developer Settings</h2>\n                  <div className=\"d-flex justify-content-between\">\n                    <span className=\"mr-3\">Enable custom url param</span>\n                    <div className=\"custom-control custom-switch d-inline\">\n                      <input\n                        type=\"checkbox\"\n                        defaultChecked={enableCustomUrl}\n                        className=\"custom-control-input\"\n                        id=\"cardToggle\"\n                        onChange={onToggleCustomUrlFeature}\n                      />\n                      <label\n                        className=\"custom-control-label\"\n                        htmlFor=\"cardToggle\"\n                      ></label>\n                    </div>\n                  </div>\n                  <p className=\"text-muted font-size-sm mt-3\">\n                    Enable this setting to easily connect to a custom cluster\n                    via the \"customUrl\" url param.\n                  </p>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <Overlay show={show} />\n    </>\n  );\n}\n\ntype InputProps = { activeSuffix: string; active: boolean };\nfunction CustomClusterInput({ activeSuffix, active }: InputProps) {\n  const { customUrl } = useCluster();\n  const updateCustomUrl = useUpdateCustomUrl();\n  const [editing, setEditing] = React.useState(false);\n  const query = useQuery();\n  const history = useHistory();\n  const location = useLocation();\n\n  const customClass = (prefix: string) =>\n    active ? `${prefix}-${activeSuffix}` : \"\";\n\n  const clusterLocation = (location: Location) => {\n    if (customUrl.length > 0) {\n      query.set(\"cluster\", \"custom\");\n      query.set(\"customUrl\", customUrl);\n    }\n    return {\n      ...location,\n      search: query.toString(),\n    };\n  };\n\n  const onUrlInput = useDebounceCallback((url: string) => {\n    updateCustomUrl(url);\n    if (url.length > 0) {\n      query.set(\"cluster\", \"custom\");\n      query.set(\"customUrl\", url);\n      history.push({ ...location, search: query.toString() });\n    }\n  }, 500);\n\n  const inputTextClass = editing ? \"\" : \"text-muted\";\n  return (\n    <Link\n      to={(location) => clusterLocation(location)}\n      className=\"btn input-group input-group-merge p-0\"\n    >\n      <input\n        type=\"text\"\n        defaultValue={customUrl}\n        className={`form-control form-control-prepended ${inputTextClass} ${customClass(\n          \"border\"\n        )}`}\n        onFocus={() => setEditing(true)}\n        onBlur={() => setEditing(false)}\n        onInput={(e) => onUrlInput(e.currentTarget.value)}\n      />\n      <div className=\"input-group-prepend\">\n        <div className={`input-group-text pr-0 ${customClass(\"border\")}`}>\n          <span className={customClass(\"text\") || \"\"}>Custom:</span>\n        </div>\n      </div>\n    </Link>\n  );\n}\n\nfunction ClusterToggle() {\n  const { status, cluster, customUrl } = useCluster();\n\n  let activeSuffix = \"\";\n  switch (status) {\n    case ClusterStatus.Connected:\n      activeSuffix = \"primary\";\n      break;\n    case ClusterStatus.Connecting:\n      activeSuffix = \"primary\";\n      break;\n    case ClusterStatus.Failure:\n      activeSuffix = \"danger\";\n      break;\n    default:\n      assertUnreachable(status);\n  }\n\n  return (\n    <div className=\"btn-group-toggle d-flex flex-wrap mb-4\">\n      {CLUSTERS.map((net, index) => {\n        const active = net === cluster;\n        if (net === Cluster.Custom)\n          return (\n            <CustomClusterInput\n              key={index}\n              activeSuffix={activeSuffix}\n              active={active}\n            />\n          );\n\n        const btnClass = active\n          ? `border-${activeSuffix} text-${activeSuffix}`\n          : \"btn-white\";\n\n        const clusterLocation = (location: Location) => {\n          const params = new URLSearchParams(location.search);\n          const slug = clusterSlug(net);\n          if (slug !== \"mainnet-beta\") {\n            params.set(\"cluster\", slug);\n          } else {\n            params.delete(\"cluster\");\n          }\n          return {\n            ...location,\n            search: params.toString(),\n          };\n        };\n\n        return (\n          <Link\n            key={index}\n            className={`btn text-left col-12 mb-3 ${btnClass}`}\n            to={clusterLocation}\n          >\n            {`${clusterName(net)}: `}\n            <span className=\"text-muted d-inline-block\">\n              {clusterUrl(net, customUrl).replace(\"explorer-\", \"\")}\n            </span>\n          </Link>\n        );\n      })}\n    </div>\n  );\n}\n","export function displayTimestamp(\n  unixTimestamp: number,\n  shortTimeZoneName = false\n): string {\n  const expireDate = new Date(unixTimestamp);\n  const dateString = new Intl.DateTimeFormat(\"en-US\", {\n    year: \"numeric\",\n    month: \"short\",\n    day: \"numeric\",\n  }).format(expireDate);\n  const timeString = new Intl.DateTimeFormat(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"numeric\",\n    second: \"numeric\",\n    hourCycle: \"h23\",\n    timeZoneName: shortTimeZoneName ? \"short\" : \"long\",\n  }).format(expireDate);\n  return `${dateString} at ${timeString}`;\n}\n\nexport function displayTimestampUtc(\n  unixTimestamp: number,\n  shortTimeZoneName = false\n): string {\n  const expireDate = new Date(unixTimestamp);\n  const dateString = new Intl.DateTimeFormat(\"en-US\", {\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\",\n    timeZone: \"UTC\",\n  }).format(expireDate);\n  const timeString = new Intl.DateTimeFormat(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"numeric\",\n    second: \"numeric\",\n    hourCycle: \"h23\",\n    timeZone: \"UTC\",\n    timeZoneName: shortTimeZoneName ? \"short\" : \"long\",\n  }).format(expireDate);\n  return `${dateString} at ${timeString}`;\n}\n\nexport function displayTimestampWithoutDate(\n  unixTimestamp: number,\n  shortTimeZoneName = true\n) {\n  const expireDate = new Date(unixTimestamp);\n  const timeString = new Intl.DateTimeFormat(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"numeric\",\n    second: \"numeric\",\n    hourCycle: \"h23\",\n    timeZoneName: shortTimeZoneName ? \"short\" : \"long\",\n  }).format(expireDate);\n  return timeString;\n}\n","import React from \"react\";\nimport { useCluster, Cluster } from \"providers/cluster\";\nimport { displayTimestamp } from \"utils/date\";\n\ntype Announcement = {\n  message: string;\n  estimate?: string;\n  start?: Date;\n  end?: Date;\n};\n\nconst announcements = new Map<Cluster, Announcement>();\n// announcements.set(Cluster.Devnet, {\n//   message: \"Devnet API node is restarting\",\n//   start: new Date(\"July 25, 2020 18:00:00 GMT+8:00\"),\n//   estimate: \"2 hours\",\n// });\n// announcements.set(Cluster.MainnetBeta, {\n//   message: \"Mainnet Beta upgrade in progress. Transactions disabled until epoch 62\",\n//   start: new Date(\"August 2, 2020 00:00:00 GMT+0:00\"),\n//   end: new Date(\"August 4, 2020 00:00:00 GMT+0:00\"),\n// });\n// announcements.set(Cluster.MainnetBeta, {\n//   message:\n//     \"Mainnet Beta upgrade in progress. Transactions disabled until epoch 62\",\n// });\n\nexport function MessageBanner() {\n  const cluster = useCluster().cluster;\n  const announcement = announcements.get(cluster);\n  if (!announcement) return null;\n  const { message, start, end, estimate } = announcement;\n\n  const now = new Date();\n  if (end && now > end) return null;\n  if (start && now < start) return null;\n\n  let timeframe;\n  if (estimate || start || end) {\n    timeframe = (\n      <div>\n        <hr className=\"text-gray-500 w-100 my-3 opacity-50\" />\n        {estimate && (\n          <h5 className=\"font-sm text-gray-200\">\n            <span className=\"text-uppercase\">Estimated Duration: </span>\n            {estimate}\n          </h5>\n        )}\n        {start && (\n          <h5 className=\"font-sm text-gray-200\">\n            <span className=\"text-uppercase\">Started at: </span>\n            {displayTimestamp(start.getTime())}\n          </h5>\n        )}\n        {end && (\n          <h5 className=\"font-sm text-gray-200\">\n            <span className=\"text-uppercase\">End: </span>\n            {displayTimestamp(end.getTime())}\n          </h5>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-info\">\n      <div className=\"container\">\n        <div className=\"d-flex flex-column align-items-center justify-content-center text-center py-3\">\n          <h3 className=\"mb-0 line-height-md\">\n            <span className=\"fe fe-alert-circle mr-2\"></span>\n            {message}\n          </h3>\n          {timeframe}\n        </div>\n      </div>\n    </div>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/dark-explorer-logo.76c545a6.svg\";","import React from \"react\";\nimport {\n  useCluster,\n  ClusterStatus,\n  Cluster,\n  useClusterModal,\n} from \"providers/cluster\";\n\nexport function ClusterStatusBanner() {\n  const [, setShow] = useClusterModal();\n\n  return (\n    <div className=\"container d-md-none my-4\">\n      <div onClick={() => setShow(true)}>\n        <Button />\n      </div>\n    </div>\n  );\n}\n\nexport function ClusterStatusButton() {\n  const [, setShow] = useClusterModal();\n\n  return (\n    <div onClick={() => setShow(true)}>\n      <Button />\n    </div>\n  );\n}\n\nfunction Button() {\n  const { status, cluster, name, customUrl } = useCluster();\n  const statusName = cluster !== Cluster.Custom ? `${name}` : `${customUrl}`;\n\n  const btnClasses = (variant: string) => {\n    return `btn d-block btn-${variant}`;\n  };\n\n  const spinnerClasses = \"spinner-grow spinner-grow-sm mr-2\";\n\n  switch (status) {\n    case ClusterStatus.Connected:\n      return (\n        <span className={btnClasses(\"primary\")}>\n          <span className=\"fe fe-check-circle mr-2\"></span>\n          {statusName}\n        </span>\n      );\n\n    case ClusterStatus.Connecting:\n      return (\n        <span className={btnClasses(\"primary\")}>\n          <span\n            className={spinnerClasses}\n            role=\"status\"\n            aria-hidden=\"true\"\n          ></span>\n          {statusName}\n        </span>\n      );\n\n    case ClusterStatus.Failure:\n      return (\n        <span className={btnClasses(\"danger\")}>\n          <span className=\"fe fe-alert-circle mr-2\"></span>\n          {statusName}\n        </span>\n      );\n  }\n}\n","import React from \"react\";\nimport Logo from \"img/logos-solana/dark-explorer-logo.svg\";\nimport { clusterPath } from \"utils/url\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport { ClusterStatusButton } from \"components/ClusterStatusButton\";\n\nexport function Navbar() {\n  // TODO: use `collapsing` to animate collapsible navbar\n  const [collapse, setCollapse] = React.useState(false);\n  \n  return (\n    <nav className=\"navbar navbar-expand-md navbar-light\">\n      <div className=\"container\">\n        <Link to={clusterPath(\"/\")}>\n          <img src={Logo} height=\"50\" alt=\"Exzo Native Explorer\" />\n        </Link>\n\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          onClick={() => setCollapse((value) => !value)}\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div\n          className={`collapse navbar-collapse ml-auto mr-4 ${collapse ? \"show\" : \"\"\n            }`}\n        >\n          <ul className=\"navbar-nav mr-auto tabs\">\n            <li className=\"nav-item\">\n              <NavLink className=\"nav-link\" to={clusterPath(\"/\")} exact>\n                Cluster Stats\n              </NavLink>\n            </li>\n            <li className=\"nav-item\">\n              <NavLink className=\"nav-link\" to={clusterPath(\"/supply\")}>\n                Supply\n              </NavLink>\n            </li>\n            <li className=\"nav-item\">\n              <NavLink className=\"nav-link\" to={clusterPath(\"/tx/inspector\")}>\n                Inspector\n              </NavLink>\n            </li>\n            {/*\n            <li className=\"nav-item\">\n              <a className=\"nav-link url-link\" href=\"https://exzovalidators.com\" target=\"_blank\" rel=\"noreferrer\">\n              exzovalidators.com\n              </a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link url-link\" href=\"https://exzocity.com/\" target=\"_blank\" rel=\"noreferrer\">\n              exzocity.com\n              </a>\n            </li>\n            */}\n            <li className=\"nav-item\">\n              <a className=\"nav-link url-link\" href=\"https://evm.exzoscan.io/\" target=\"_blank\" rel=\"noreferrer\">\n                EVM Explorer\n              </a>\n            </li>\n          </ul>\n        </div>\n\n        <div className=\"d-none d-md-block\">\n          <ClusterStatusButton />\n        </div>\n      </div>\n    </nav>\n  );\n}\n","import React from \"react\";\nimport {\n  TokenListProvider,\n  TokenInfoMap,\n  TokenInfo,\n  TokenListContainer,\n} from \"@solana/spl-token-registry\";\nimport { Cluster, clusterSlug, useCluster } from \"providers/cluster\";\n\nconst TokenRegistryContext = React.createContext<TokenInfoMap>(new Map());\n\ntype ProviderProps = { children: React.ReactNode };\n\nexport function TokenRegistryProvider({ children }: ProviderProps) {\n  const [tokenRegistry, setTokenRegistry] = React.useState<TokenInfoMap>(\n    new Map()\n  );\n  const { cluster } = useCluster();\n\n  React.useEffect(() => {\n    new TokenListProvider().resolve().then((tokens: TokenListContainer) => {\n      const tokenList =\n        cluster === Cluster.Custom\n          ? []\n          : tokens.filterByClusterSlug(clusterSlug(cluster)).getList();\n\n      setTokenRegistry(\n        tokenList.reduce((map: TokenInfoMap, item: TokenInfo) => {\n          map.set(item.address, item);\n          return map;\n        }, new Map())\n      );\n    });\n  }, [cluster]);\n\n  return (\n    <TokenRegistryContext.Provider value={tokenRegistry}>\n      {children}\n    </TokenRegistryContext.Provider>\n  );\n}\n\nexport function useTokenRegistry() {\n  const tokenRegistry = React.useContext(TokenRegistryContext);\n\n  if (!tokenRegistry) {\n    throw new Error(`useTokenRegistry must be used within a MintsProvider`);\n  }\n\n  return { tokenRegistry };\n}\n","import React from \"react\";\nimport bs58 from \"bs58\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport Select, { InputActionMeta, ActionMeta, ValueType } from \"react-select\";\nimport StateManager from \"react-select\";\nimport {\n  LOADER_IDS,\n  PROGRAM_NAME_BY_ID,\n  SPECIAL_IDS,\n  SYSVAR_IDS,\n  LoaderName,\n  programLabel,\n} from \"utils/tx\";\nimport { Cluster, useCluster } from \"providers/cluster\";\nimport { useTokenRegistry } from \"providers/mints/token-registry\";\nimport { TokenInfoMap } from \"@solana/spl-token-registry\";\n\nexport function SearchBar() {\n  const [search, setSearch] = React.useState(\"\");\n  const selectRef = React.useRef<StateManager<any> | null>(null);\n  const history = useHistory();\n  const location = useLocation();\n  const { tokenRegistry } = useTokenRegistry();\n  const { cluster } = useCluster();\n\n  const onChange = (\n    { pathname }: ValueType<any, false>,\n    meta: ActionMeta<any>\n  ) => {\n    if (meta.action === \"select-option\") {\n      history.push({ ...location, pathname });\n      setSearch(\"\");\n    }\n  };\n\n  const onInputChange = (value: string, { action }: InputActionMeta) => {\n    if (action === \"input-change\") setSearch(value);\n  };\n\n  const resetValue = \"\" as any;\n  return (\n    <div className=\"container my-4\">\n      <div className=\"row align-items-center\">\n        <div className=\"col\">\n          <Select\n            ref={(ref) => (selectRef.current = ref)}\n            options={buildOptions(search, cluster, tokenRegistry)}\n            noOptionsMessage={() => \"No Results\"}\n            placeholder=\"Search for blocks, accounts, transactions, programs, and tokens\"\n            value={resetValue}\n            inputValue={search}\n            blurInputOnSelect\n            onMenuClose={() => selectRef.current?.blur()}\n            onChange={onChange}\n            styles={{\n              /* work around for https://github.com/JedWatson/react-select/issues/3857 */\n              placeholder: (style) => ({ ...style, pointerEvents: \"none\" }),\n              input: (style) => ({ ...style, width: \"100%\" }),\n            }}\n            onInputChange={onInputChange}\n            components={{ DropdownIndicator }}\n            classNamePrefix=\"search-bar\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction buildProgramOptions(search: string, cluster: Cluster) {\n  const matchedPrograms = Object.entries(PROGRAM_NAME_BY_ID).filter(\n    ([address]) => {\n      const name = programLabel(address, cluster);\n      if (!name) return false;\n      return (\n        name.toLowerCase().includes(search.toLowerCase()) ||\n        address.includes(search)\n      );\n    }\n  );\n\n  if (matchedPrograms.length > 0) {\n    return {\n      label: \"Programs\",\n      options: matchedPrograms.map(([id, name]) => ({\n        label: name,\n        value: [name, id],\n        pathname: \"/address/\" + id,\n      })),\n    };\n  }\n}\n\nconst SEARCHABLE_LOADERS: LoaderName[] = [\n  \"BPF Loader\",\n  \"BPF Loader 2\",\n  \"BPF Upgradeable Loader\",\n];\n\nfunction buildLoaderOptions(search: string) {\n  const matchedLoaders = Object.entries(LOADER_IDS).filter(\n    ([address, name]) => {\n      return (\n        SEARCHABLE_LOADERS.includes(name) &&\n        (name.toLowerCase().includes(search.toLowerCase()) ||\n          address.includes(search))\n      );\n    }\n  );\n\n  if (matchedLoaders.length > 0) {\n    return {\n      label: \"Program Loaders\",\n      options: matchedLoaders.map(([id, name]) => ({\n        label: name,\n        value: [name, id],\n        pathname: \"/address/\" + id,\n      })),\n    };\n  }\n}\n\nfunction buildSysvarOptions(search: string) {\n  const matchedSysvars = Object.entries(SYSVAR_IDS).filter(\n    ([address, name]) => {\n      return (\n        name.toLowerCase().includes(search.toLowerCase()) ||\n        address.includes(search)\n      );\n    }\n  );\n\n  if (matchedSysvars.length > 0) {\n    return {\n      label: \"Sysvars\",\n      options: matchedSysvars.map(([id, name]) => ({\n        label: name,\n        value: [name, id],\n        pathname: \"/address/\" + id,\n      })),\n    };\n  }\n}\n\nfunction buildSpecialOptions(search: string) {\n  const matchedSpecialIds = Object.entries(SPECIAL_IDS).filter(\n    ([address, name]) => {\n      return (\n        name.toLowerCase().includes(search.toLowerCase()) ||\n        address.includes(search)\n      );\n    }\n  );\n\n  if (matchedSpecialIds.length > 0) {\n    return {\n      label: \"Accounts\",\n      options: matchedSpecialIds.map(([id, name]) => ({\n        label: name,\n        value: [name, id],\n        pathname: \"/address/\" + id,\n      })),\n    };\n  }\n}\n\nfunction buildTokenOptions(\n  search: string,\n  cluster: Cluster,\n  tokenRegistry: TokenInfoMap\n) {\n  const matchedTokens = Array.from(tokenRegistry.entries()).filter(\n    ([address, details]) => {\n      const searchLower = search.toLowerCase();\n      return (\n        details.name.toLowerCase().includes(searchLower) ||\n        details.symbol.toLowerCase().includes(searchLower) ||\n        address.includes(search)\n      );\n    }\n  );\n\n  if (matchedTokens.length > 0) {\n    return {\n      label: \"Tokens\",\n      options: matchedTokens.map(([id, details]) => ({\n        label: details.name,\n        value: [details.name, details.symbol, id],\n        pathname: \"/address/\" + id,\n      })),\n    };\n  }\n}\n\nfunction buildOptions(\n  rawSearch: string,\n  cluster: Cluster,\n  tokenRegistry: TokenInfoMap\n) {\n  const search = rawSearch.trim();\n  if (search.length === 0) return [];\n\n  const options = [];\n\n  const programOptions = buildProgramOptions(search, cluster);\n  if (programOptions) {\n    options.push(programOptions);\n  }\n\n  const loaderOptions = buildLoaderOptions(search);\n  if (loaderOptions) {\n    options.push(loaderOptions);\n  }\n\n  const sysvarOptions = buildSysvarOptions(search);\n  if (sysvarOptions) {\n    options.push(sysvarOptions);\n  }\n\n  const specialOptions = buildSpecialOptions(search);\n  if (specialOptions) {\n    options.push(specialOptions);\n  }\n\n  const tokenOptions = buildTokenOptions(search, cluster, tokenRegistry);\n  if (tokenOptions) {\n    options.push(tokenOptions);\n  }\n\n  if (!isNaN(Number(search))) {\n    options.push({\n      label: \"Block\",\n      options: [\n        {\n          label: `Slot #${search}`,\n          value: [search],\n          pathname: `/block/${search}`,\n        },\n      ],\n    });\n  }\n\n  // Prefer nice suggestions over raw suggestions\n  if (options.length > 0) return options;\n\n  try {\n    const decoded = bs58.decode(search);\n    if (decoded.length === 32) {\n      options.push({\n        label: \"Account\",\n        options: [\n          {\n            label: search,\n            value: [search],\n            pathname: \"/address/\" + search,\n          },\n        ],\n      });\n    } else if (decoded.length === 64) {\n      options.push({\n        label: \"Transaction\",\n        options: [\n          {\n            label: search,\n            value: [search],\n            pathname: \"/tx/\" + search,\n          },\n        ],\n      });\n    }\n  } catch (err) {}\n  return options;\n}\n\nfunction DropdownIndicator() {\n  return (\n    <div className=\"search-indicator\">\n      <span className=\"fe fe-search\"></span>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport enum FetchStatus {\n  Fetching,\n  FetchFailed,\n  Fetched,\n}\n\nexport type CacheEntry<T> = {\n  status: FetchStatus;\n  data?: T;\n};\n\nexport type State<T> = {\n  entries: {\n    [key: string]: CacheEntry<T>;\n  };\n  url: string;\n};\n\nexport enum ActionType {\n  Update,\n  Clear,\n}\n\nexport type Update<T> = {\n  type: ActionType.Update;\n  url: string;\n  key: string | number;\n  status: FetchStatus;\n  data?: T;\n};\n\nexport type Clear = {\n  type: ActionType.Clear;\n  url: string;\n};\n\nexport type Action<T> = Update<T> | Clear;\nexport type Dispatch<T> = (action: Action<T>) => void;\ntype Reducer<T, U> = (state: State<T>, action: Action<U>) => State<T>;\ntype Reconciler<T, U> = (\n  entry: T | undefined,\n  update: U | undefined\n) => T | undefined;\n\nfunction defaultReconciler<T>(entry: T | undefined, update: T | undefined) {\n  if (entry) {\n    if (update) {\n      return {\n        ...entry,\n        ...update,\n      };\n    } else {\n      return entry;\n    }\n  } else {\n    return update;\n  }\n}\n\nfunction defaultReducer<T>(state: State<T>, action: Action<T>) {\n  return reducer(state, action, defaultReconciler);\n}\n\nexport function useReducer<T>(url: string) {\n  return React.useReducer<Reducer<T, T>>(defaultReducer, { url, entries: {} });\n}\n\nexport function useCustomReducer<T, U>(\n  url: string,\n  reconciler: Reconciler<T, U>\n) {\n  const customReducer = React.useMemo(() => {\n    return (state: State<T>, action: Action<U>) => {\n      return reducer(state, action, reconciler);\n    };\n  }, [reconciler]);\n  return React.useReducer<Reducer<T, U>>(customReducer, { url, entries: {} });\n}\n\nexport function reducer<T, U>(\n  state: State<T>,\n  action: Action<U>,\n  reconciler: Reconciler<T, U>\n): State<T> {\n  if (action.type === ActionType.Clear) {\n    return { url: action.url, entries: {} };\n  } else if (action.url !== state.url) {\n    return state;\n  }\n\n  switch (action.type) {\n    case ActionType.Update: {\n      const key = action.key;\n      const entry = state.entries[key];\n      const entries = {\n        ...state.entries,\n        [key]: {\n          ...entry,\n          status: action.status,\n          data: reconciler(entry?.data, action.data),\n        },\n      };\n      return { ...state, entries };\n    }\n  }\n}\n","import React from \"react\";\nimport {\n  PublicKey,\n  ConfirmedSignatureInfo,\n  TransactionSignature,\n  Connection,\n  ParsedConfirmedTransaction,\n} from \"@velas/web3\";\nimport { useCluster, Cluster } from \"../cluster\";\nimport * as Cache from \"providers/cache\";\nimport { ActionType, FetchStatus } from \"providers/cache\";\nimport { reportError } from \"utils/sentry\";\n\nconst MAX_TRANSACTION_BATCH_SIZE = 10;\n\ntype TransactionMap = Map<string, ParsedConfirmedTransaction>;\n\ntype AccountHistory = {\n  fetched: ConfirmedSignatureInfo[];\n  transactionMap?: TransactionMap;\n  foundOldest: boolean;\n};\n\ntype HistoryUpdate = {\n  history?: AccountHistory;\n  transactionMap?: TransactionMap;\n  before?: TransactionSignature;\n};\n\ntype State = Cache.State<AccountHistory>;\ntype Dispatch = Cache.Dispatch<HistoryUpdate>;\n\nfunction combineFetched(\n  fetched: ConfirmedSignatureInfo[],\n  current: ConfirmedSignatureInfo[] | undefined,\n  before: TransactionSignature | undefined\n) {\n  if (current === undefined || current.length === 0) {\n    return fetched;\n  }\n\n  // History was refreshed, fetch results should be prepended if contiguous\n  if (before === undefined) {\n    const end = fetched.findIndex((f) => f.signature === current[0].signature);\n    if (end < 0) return fetched;\n    return fetched.slice(0, end).concat(current);\n  }\n\n  // More history was loaded, fetch results should be appended\n  if (current[current.length - 1].signature === before) {\n    return current.concat(fetched);\n  }\n\n  return fetched;\n}\n\nfunction reconcile(\n  history: AccountHistory | undefined,\n  update: HistoryUpdate | undefined\n) {\n  if (update?.history === undefined) return history;\n\n  let transactionMap = history?.transactionMap || new Map();\n  if (update.transactionMap) {\n    transactionMap = new Map([...transactionMap, ...update.transactionMap]);\n  }\n\n  return {\n    fetched: combineFetched(\n      update.history.fetched,\n      history?.fetched,\n      update?.before\n    ),\n    transactionMap,\n    foundOldest: update?.history?.foundOldest || history?.foundOldest || false,\n  };\n}\n\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype HistoryProviderProps = { children: React.ReactNode };\nexport function HistoryProvider({ children }: HistoryProviderProps) {\n  const { url } = useCluster();\n  const [state, dispatch] = Cache.useCustomReducer(url, reconcile);\n\n  React.useEffect(() => {\n    dispatch({ type: ActionType.Clear, url });\n  }, [dispatch, url]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        {children}\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nasync function fetchParsedTransactions(\n  url: string,\n  transactionSignatures: string[]\n) {\n  const transactionMap = new Map();\n  const connection = new Connection(url);\n\n  while (transactionSignatures.length > 0) {\n    const signatures = transactionSignatures.splice(\n      0,\n      MAX_TRANSACTION_BATCH_SIZE\n    );\n    const fetched = await connection.getParsedConfirmedTransactions(signatures);\n    fetched.forEach(\n      (parsed: ParsedConfirmedTransaction | null, index: number) => {\n        if (parsed !== null) {\n          transactionMap.set(signatures[index], parsed);\n        }\n      }\n    );\n  }\n\n  return transactionMap;\n}\n\nasync function fetchAccountHistory(\n  dispatch: Dispatch,\n  pubkey: PublicKey,\n  cluster: Cluster,\n  url: string,\n  options: {\n    before?: TransactionSignature;\n    limit: number;\n  },\n  fetchTransactions?: boolean,\n  additionalSignatures?: string[]\n) {\n  dispatch({\n    type: ActionType.Update,\n    status: FetchStatus.Fetching,\n    key: pubkey.toBase58(),\n    url,\n  });\n\n  let status;\n  let history;\n  try {\n    const connection = new Connection(url);\n    const fetched = await connection.getConfirmedSignaturesForAddress2(\n      pubkey,\n      options\n    );\n    history = {\n      fetched,\n      foundOldest: fetched.length < options.limit,\n    };\n    status = FetchStatus.Fetched;\n  } catch (error) {\n    if (cluster !== Cluster.Custom) {\n      reportError(error, { url });\n    }\n    status = FetchStatus.FetchFailed;\n  }\n\n  let transactionMap;\n  if (fetchTransactions && history?.fetched) {\n    try {\n      const signatures = history.fetched\n        .map((signature) => signature.signature)\n        .concat(additionalSignatures || []);\n      transactionMap = await fetchParsedTransactions(url, signatures);\n    } catch (error) {\n      if (cluster !== Cluster.Custom) {\n        reportError(error, { url });\n      }\n      status = FetchStatus.FetchFailed;\n    }\n  }\n\n  dispatch({\n    type: ActionType.Update,\n    url,\n    key: pubkey.toBase58(),\n    status,\n    data: {\n      history,\n      transactionMap,\n      before: options?.before,\n    },\n  });\n}\n\nexport function useAccountHistories() {\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(\n      `useAccountHistories must be used within a AccountsProvider`\n    );\n  }\n\n  return context.entries;\n}\n\nexport function useAccountHistory(\n  address: string\n): Cache.CacheEntry<AccountHistory> | undefined {\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(`useAccountHistory must be used within a AccountsProvider`);\n  }\n\n  return context.entries[address];\n}\n\nfunction getUnfetchedSignatures(before: Cache.CacheEntry<AccountHistory>) {\n  if (!before.data?.transactionMap) {\n    return [];\n  }\n\n  const existingMap = before.data.transactionMap;\n  const allSignatures = before.data.fetched.map(\n    (signatureInfo) => signatureInfo.signature\n  );\n  return allSignatures.filter((signature) => !existingMap.has(signature));\n}\n\nexport function useFetchAccountHistory() {\n  const { cluster, url } = useCluster();\n  const state = React.useContext(StateContext);\n  const dispatch = React.useContext(DispatchContext);\n  if (!state || !dispatch) {\n    throw new Error(\n      `useFetchAccountHistory must be used within a AccountsProvider`\n    );\n  }\n\n  return React.useCallback(\n    (pubkey: PublicKey, fetchTransactions?: boolean, refresh?: boolean) => {\n      const before = state.entries[pubkey.toBase58()];\n      if (!refresh && before?.data?.fetched && before.data.fetched.length > 0) {\n        if (before.data.foundOldest) return;\n\n        let additionalSignatures: string[] = [];\n        if (fetchTransactions) {\n          additionalSignatures = getUnfetchedSignatures(before);\n        }\n\n        const oldest =\n          before.data.fetched[before.data.fetched.length - 1].signature;\n        fetchAccountHistory(\n          dispatch,\n          pubkey,\n          cluster,\n          url,\n          {\n            before: oldest,\n            limit: 25,\n          },\n          fetchTransactions,\n          additionalSignatures\n        );\n      } else {\n        fetchAccountHistory(\n          dispatch,\n          pubkey,\n          cluster,\n          url,\n          { limit: 25 },\n          fetchTransactions\n        );\n      }\n    },\n    [state, dispatch, cluster, url]\n  );\n}\n","import { coerce, instance, string } from \"superstruct\";\nimport { PublicKey } from \"@velas/web3\";\n\nexport const PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  (value) => new PublicKey(value)\n);\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport {\n  Infer,\n  number,\n  optional,\n  enums,\n  any,\n  boolean,\n  string,\n  array,\n  type,\n  nullable,\n} from \"superstruct\";\nimport { PublicKeyFromString } from \"validators/pubkey\";\n\nexport type TokenAccountType = Infer<typeof TokenAccountType>;\nexport const TokenAccountType = enums([\"mint\", \"account\", \"multisig\"]);\n\nexport type TokenAccountState = Infer<typeof AccountState>;\nconst AccountState = enums([\"initialized\", \"uninitialized\", \"frozen\"]);\n\nconst TokenAmount = type({\n  decimals: number(),\n  uiAmountString: string(),\n  amount: string(),\n});\n\nexport type TokenAccountInfo = Infer<typeof TokenAccountInfo>;\nexport const TokenAccountInfo = type({\n  mint: PublicKeyFromString,\n  owner: PublicKeyFromString,\n  tokenAmount: TokenAmount,\n  delegate: optional(PublicKeyFromString),\n  state: AccountState,\n  isNative: boolean(),\n  rentExemptReserve: optional(TokenAmount),\n  delegatedAmount: optional(TokenAmount),\n  closeAuthority: optional(PublicKeyFromString),\n});\n\nexport type MintAccountInfo = Infer<typeof MintAccountInfo>;\nexport const MintAccountInfo = type({\n  mintAuthority: nullable(PublicKeyFromString),\n  supply: string(),\n  decimals: number(),\n  isInitialized: boolean(),\n  freezeAuthority: nullable(PublicKeyFromString),\n});\n\nexport type MultisigAccountInfo = Infer<typeof MultisigAccountInfo>;\nexport const MultisigAccountInfo = type({\n  numRequiredSigners: number(),\n  numValidSigners: number(),\n  isInitialized: boolean(),\n  signers: array(PublicKeyFromString),\n});\n\nexport type TokenAccount = Infer<typeof TokenAccount>;\nexport const TokenAccount = type({\n  type: TokenAccountType,\n  info: any(),\n});\n","import React from \"react\";\nimport { Connection, PublicKey } from \"@velas/web3\";\nimport * as Cache from \"providers/cache\";\nimport { ActionType, FetchStatus } from \"providers/cache\";\nimport { TokenAccountInfo } from \"validators/accounts/token\";\nimport { useCluster, Cluster } from \"../cluster\";\nimport { create } from \"superstruct\";\nimport { reportError } from \"utils/sentry\";\n\nexport type TokenInfoWithPubkey = {\n  info: TokenAccountInfo;\n  pubkey: PublicKey;\n};\n\ninterface AccountTokens {\n  tokens?: TokenInfoWithPubkey[];\n}\n\ntype State = Cache.State<AccountTokens>;\ntype Dispatch = Cache.Dispatch<AccountTokens>;\n\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype ProviderProps = { children: React.ReactNode };\nexport function TokensProvider({ children }: ProviderProps) {\n  const { url } = useCluster();\n  const [state, dispatch] = Cache.useReducer<AccountTokens>(url);\n\n  React.useEffect(() => {\n    dispatch({ url, type: ActionType.Clear });\n  }, [dispatch, url]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        {children}\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nexport const TOKEN_PROGRAM_ID = new PublicKey(\n  \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\n);\n\nasync function fetchAccountTokens(\n  dispatch: Dispatch,\n  pubkey: PublicKey,\n  cluster: Cluster,\n  url: string\n) {\n  const key = pubkey.toBase58();\n  dispatch({\n    type: ActionType.Update,\n    key,\n    status: FetchStatus.Fetching,\n    url,\n  });\n\n  let status;\n  let data;\n  try {\n    const { value } = await new Connection(\n      url,\n      \"processed\"\n    ).getParsedTokenAccountsByOwner(pubkey, { programId: TOKEN_PROGRAM_ID });\n    data = {\n      tokens: value.map((accountInfo) => {\n        const parsedInfo = accountInfo.account.data.parsed.info;\n        const info = create(parsedInfo, TokenAccountInfo);\n        return { info, pubkey: accountInfo.pubkey };\n      }),\n    };\n    status = FetchStatus.Fetched;\n  } catch (error) {\n    if (cluster !== Cluster.Custom) {\n      reportError(error, { url });\n    }\n    status = FetchStatus.FetchFailed;\n  }\n  dispatch({ type: ActionType.Update, url, status, data, key });\n}\n\nexport function useAccountOwnedTokens(\n  address: string\n): Cache.CacheEntry<AccountTokens> | undefined {\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(\n      `useAccountOwnedTokens must be used within a AccountsProvider`\n    );\n  }\n\n  return context.entries[address];\n}\n\nexport function useFetchAccountOwnedTokens() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(\n      `useFetchAccountOwnedTokens must be used within a AccountsProvider`\n    );\n  }\n\n  const { cluster, url } = useCluster();\n  return React.useCallback(\n    (pubkey: PublicKey) => {\n      fetchAccountTokens(dispatch, pubkey, cluster, url);\n    },\n    [dispatch, cluster, url]\n  );\n}\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport { type, any, Infer, string } from \"superstruct\";\n\nexport type ParsedInfo = Infer<typeof ParsedInfo>;\nexport const ParsedInfo = type({\n  type: string(),\n  info: any(),\n});\n","import { coerce, instance, string } from \"superstruct\";\nimport BN from \"bn.js\";\n\nexport const BigNumFromString = coerce(instance(BN), string(), (value) => {\n  if (typeof value === \"string\") return new BN(value, 10);\n  throw new Error(\"invalid big num\");\n});\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport { Infer, number, nullable, enums, type } from \"superstruct\";\nimport { PublicKeyFromString } from \"validators/pubkey\";\nimport { BigNumFromString } from \"validators/bignum\";\n\nexport type StakeAccountType = Infer<typeof StakeAccountType>;\nexport const StakeAccountType = enums([\n  \"uninitialized\",\n  \"initialized\",\n  \"delegated\",\n  \"rewardsPool\",\n]);\n\nexport type StakeMeta = Infer<typeof StakeMeta>;\nexport const StakeMeta = type({\n  rentExemptReserve: BigNumFromString,\n  authorized: type({\n    staker: PublicKeyFromString,\n    withdrawer: PublicKeyFromString,\n  }),\n  lockup: type({\n    unixTimestamp: number(),\n    epoch: number(),\n    custodian: PublicKeyFromString,\n  }),\n});\n\nexport type StakeAccountInfo = Infer<typeof StakeAccountInfo>;\nexport const StakeAccountInfo = type({\n  meta: StakeMeta,\n  stake: nullable(\n    type({\n      delegation: type({\n        voter: PublicKeyFromString,\n        stake: BigNumFromString,\n        activationEpoch: BigNumFromString,\n        deactivationEpoch: BigNumFromString,\n        warmupCooldownRate: number(),\n      }),\n      creditsObserved: number(),\n    })\n  ),\n});\n\nexport type StakeAccount = Infer<typeof StakeAccount>;\nexport const StakeAccount = type({\n  type: StakeAccountType,\n  info: StakeAccountInfo,\n});\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport {\n  Infer,\n  enums,\n  number,\n  array,\n  type,\n  nullable,\n  string,\n} from \"superstruct\";\nimport { PublicKeyFromString } from \"validators/pubkey\";\n\nexport type VoteAccountType = Infer<typeof VoteAccountType>;\nexport const VoteAccountType = enums([\"vote\"]);\n\nexport type AuthorizedVoter = Infer<typeof AuthorizedVoter>;\nexport const AuthorizedVoter = type({\n  authorizedVoter: PublicKeyFromString,\n  epoch: number(),\n});\n\nexport type PriorVoter = Infer<typeof PriorVoter>;\nexport const PriorVoter = type({\n  authorizedPubkey: PublicKeyFromString,\n  epochOfLastAuthorizedSwitch: number(),\n  targetEpoch: number(),\n});\n\nexport type EpochCredits = Infer<typeof EpochCredits>;\nexport const EpochCredits = type({\n  epoch: number(),\n  credits: string(),\n  previousCredits: string(),\n});\n\nexport type Vote = Infer<typeof Vote>;\nexport const Vote = type({\n  slot: number(),\n  confirmationCount: number(),\n});\n\nexport type VoteAccountInfo = Infer<typeof VoteAccountInfo>;\nexport const VoteAccountInfo = type({\n  authorizedVoters: array(AuthorizedVoter),\n  authorizedWithdrawer: PublicKeyFromString,\n  commission: number(),\n  epochCredits: array(EpochCredits),\n  lastTimestamp: type({\n    slot: number(),\n    timestamp: number(),\n  }),\n  nodePubkey: PublicKeyFromString,\n  priorVoters: array(PriorVoter),\n  rootSlot: nullable(number()),\n  votes: array(Vote),\n});\n\nexport type VoteAccount = Infer<typeof VoteAccount>;\nexport const VoteAccount = type({\n  type: VoteAccountType,\n  info: VoteAccountInfo,\n});\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport { Infer, string, enums, type } from \"superstruct\";\nimport { PublicKeyFromString } from \"validators/pubkey\";\n\nexport type NonceAccountType = Infer<typeof NonceAccountType>;\nexport const NonceAccountType = enums([\"uninitialized\", \"initialized\"]);\n\nexport type NonceAccountInfo = Infer<typeof NonceAccountInfo>;\nexport const NonceAccountInfo = type({\n  authority: PublicKeyFromString,\n  blockhash: string(),\n  feeCalculator: type({\n    lamportsPerSignature: string(),\n  }),\n});\n\nexport type NonceAccount = Infer<typeof NonceAccount>;\nexport const NonceAccount = type({\n  type: NonceAccountType,\n  info: NonceAccountInfo,\n});\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport {\n  Infer,\n  enums,\n  array,\n  number,\n  type,\n  boolean,\n  string,\n  literal,\n  union,\n} from \"superstruct\";\n\nexport type SysvarAccountType = Infer<typeof SysvarAccountType>;\nexport const SysvarAccountType = enums([\n  \"clock\",\n  \"epochSchedule\",\n  \"fees\",\n  \"recentBlockhashes\",\n  \"rent\",\n  \"rewards\",\n  \"slotHashes\",\n  \"slotHistory\",\n  \"stakeHistory\",\n]);\n\nexport type ClockAccountInfo = Infer<typeof ClockAccountInfo>;\nexport const ClockAccountInfo = type({\n  slot: number(),\n  epoch: number(),\n  leaderScheduleEpoch: number(),\n  unixTimestamp: number(),\n});\n\nexport type SysvarClockAccount = Infer<typeof SysvarClockAccount>;\nexport const SysvarClockAccount = type({\n  type: literal(\"clock\"),\n  info: ClockAccountInfo,\n});\n\nexport type EpochScheduleInfo = Infer<typeof EpochScheduleInfo>;\nexport const EpochScheduleInfo = type({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\nexport type SysvarEpochScheduleAccount = Infer<\n  typeof SysvarEpochScheduleAccount\n>;\nexport const SysvarEpochScheduleAccount = type({\n  type: literal(\"epochSchedule\"),\n  info: EpochScheduleInfo,\n});\n\nexport type FeesInfo = Infer<typeof FeesInfo>;\nexport const FeesInfo = type({\n  feeCalculator: type({\n    lamportsPerSignature: string(),\n  }),\n});\n\nexport type SysvarFeesAccount = Infer<typeof SysvarFeesAccount>;\nexport const SysvarFeesAccount = type({\n  type: literal(\"fees\"),\n  info: FeesInfo,\n});\n\nexport type RecentBlockhashesEntry = Infer<typeof RecentBlockhashesEntry>;\nexport const RecentBlockhashesEntry = type({\n  blockhash: string(),\n  feeCalculator: type({\n    lamportsPerSignature: string(),\n  }),\n});\n\nexport type RecentBlockhashesInfo = Infer<typeof RecentBlockhashesInfo>;\nexport const RecentBlockhashesInfo = array(RecentBlockhashesEntry);\n\nexport type SysvarRecentBlockhashesAccount = Infer<\n  typeof SysvarRecentBlockhashesAccount\n>;\nexport const SysvarRecentBlockhashesAccount = type({\n  type: literal(\"recentBlockhashes\"),\n  info: RecentBlockhashesInfo,\n});\n\nexport type RentInfo = Infer<typeof RentInfo>;\nexport const RentInfo = type({\n  lamportsPerByteYear: string(),\n  exemptionThreshold: number(),\n  burnPercent: number(),\n});\n\nexport type SysvarRentAccount = Infer<typeof SysvarRentAccount>;\nexport const SysvarRentAccount = type({\n  type: literal(\"rent\"),\n  info: RentInfo,\n});\n\nexport type RewardsInfo = Infer<typeof RewardsInfo>;\nexport const RewardsInfo = type({\n  validatorPointValue: number(),\n});\n\nexport type SysvarRewardsAccount = Infer<typeof SysvarRewardsAccount>;\nexport const SysvarRewardsAccount = type({\n  type: literal(\"rewards\"),\n  info: RewardsInfo,\n});\n\nexport type SlotHashEntry = Infer<typeof SlotHashEntry>;\nexport const SlotHashEntry = type({\n  slot: number(),\n  hash: string(),\n});\n\nexport type SlotHashesInfo = Infer<typeof SlotHashesInfo>;\nexport const SlotHashesInfo = array(SlotHashEntry);\n\nexport type SysvarSlotHashesAccount = Infer<typeof SysvarSlotHashesAccount>;\nexport const SysvarSlotHashesAccount = type({\n  type: literal(\"slotHashes\"),\n  info: SlotHashesInfo,\n});\n\nexport type SlotHistoryInfo = Infer<typeof SlotHistoryInfo>;\nexport const SlotHistoryInfo = type({\n  nextSlot: number(),\n  bits: string(),\n});\n\nexport type SysvarSlotHistoryAccount = Infer<typeof SysvarSlotHistoryAccount>;\nexport const SysvarSlotHistoryAccount = type({\n  type: literal(\"slotHistory\"),\n  info: SlotHistoryInfo,\n});\n\nexport type StakeHistoryEntryItem = Infer<typeof StakeHistoryEntryItem>;\nexport const StakeHistoryEntryItem = type({\n  effective: number(),\n  activating: number(),\n  deactivating: number(),\n});\n\nexport type StakeHistoryEntry = Infer<typeof StakeHistoryEntry>;\nexport const StakeHistoryEntry = type({\n  epoch: number(),\n  stakeHistory: StakeHistoryEntryItem,\n});\n\nexport type StakeHistoryInfo = Infer<typeof StakeHistoryInfo>;\nexport const StakeHistoryInfo = array(StakeHistoryEntry);\n\nexport type SysvarStakeHistoryAccount = Infer<typeof SysvarStakeHistoryAccount>;\nexport const SysvarStakeHistoryAccount = type({\n  type: literal(\"stakeHistory\"),\n  info: StakeHistoryInfo,\n});\n\nexport type SysvarAccount = Infer<typeof SysvarAccount>;\nexport const SysvarAccount = union([\n  SysvarClockAccount,\n  SysvarEpochScheduleAccount,\n  SysvarFeesAccount,\n  SysvarRecentBlockhashesAccount,\n  SysvarRentAccount,\n  SysvarRewardsAccount,\n  SysvarSlotHashesAccount,\n  SysvarSlotHistoryAccount,\n  SysvarStakeHistoryAccount,\n]);\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport {\n  Infer,\n  array,\n  boolean,\n  type,\n  number,\n  string,\n  record,\n  union,\n  literal,\n} from \"superstruct\";\n\nexport type StakeConfigInfo = Infer<typeof StakeConfigInfo>;\nexport const StakeConfigInfo = type({\n  warmupCooldownRate: number(),\n  slashPenalty: number(),\n});\n\nexport type ConfigKey = Infer<typeof ConfigKey>;\nexport const ConfigKey = type({\n  pubkey: string(),\n  signer: boolean(),\n});\n\nexport type ValidatorInfoConfigData = Infer<typeof ValidatorInfoConfigData>;\nexport const ValidatorInfoConfigData = record(string(), string());\n\nexport type ValidatorInfoConfigInfo = Infer<typeof ValidatorInfoConfigInfo>;\nexport const ValidatorInfoConfigInfo = type({\n  keys: array(ConfigKey),\n  configData: ValidatorInfoConfigData,\n});\n\nexport type ValidatorInfoAccount = Infer<typeof ValidatorInfoAccount>;\nexport const ValidatorInfoAccount = type({\n  type: literal(\"validatorInfo\"),\n  info: ValidatorInfoConfigInfo,\n});\n\nexport type StakeConfigInfoAccount = Infer<typeof StakeConfigInfoAccount>;\nexport const StakeConfigInfoAccount = type({\n  type: literal(\"stakeConfig\"),\n  info: StakeConfigInfo,\n});\n\nexport type ConfigAccount = Infer<typeof ConfigAccount>;\nexport const ConfigAccount = union([\n  StakeConfigInfoAccount,\n  ValidatorInfoAccount,\n]);\n","import React from \"react\";\nimport { fetch } from \"cross-fetch\";\n\nconst FLAGGED_REGISTRY =\n  \"https://solana-labs.github.io/solana-flagged-accounts/flagged.txt\";\n\ntype FlaggedMap = Map<string, boolean>;\ntype ProviderProps = { children: React.ReactNode };\n\nconst FlaggedContext = React.createContext<FlaggedMap>(new Map());\n\nexport function FlaggedAccountsProvider({ children }: ProviderProps) {\n  const [flaggedAccounts, setFlaggedAccounts] = React.useState<FlaggedMap>(\n    new Map()\n  );\n\n  React.useEffect(() => {\n    fetch(FLAGGED_REGISTRY)\n      .then((res) => {\n        return res.text();\n      })\n      .then((body: string) => {\n        const flaggedAccounts = new Map<string, boolean>();\n        body\n          .split(\"\\n\")\n          .forEach((account) => flaggedAccounts.set(account, true));\n        setFlaggedAccounts(flaggedAccounts);\n      });\n  }, []);\n\n  return (\n    <FlaggedContext.Provider value={flaggedAccounts}>\n      {children}\n    </FlaggedContext.Provider>\n  );\n}\n\nexport function useFlaggedAccounts() {\n  const flaggedAccounts = React.useContext(FlaggedContext);\n  if (!flaggedAccounts) {\n    throw new Error(\n      `useFlaggedAccounts must be used within a AccountsProvider`\n    );\n  }\n\n  return { flaggedAccounts };\n}\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport {\n  type,\n  number,\n  literal,\n  nullable,\n  Infer,\n  union,\n  coerce,\n  create,\n  any,\n} from \"superstruct\";\nimport { ParsedInfo } from \"validators\";\nimport { PublicKeyFromString } from \"validators/pubkey\";\n\nexport type ProgramAccountInfo = Infer<typeof ProgramAccountInfo>;\nexport const ProgramAccountInfo = type({\n  programData: PublicKeyFromString,\n});\n\nexport type ProgramAccount = Infer<typeof ProgramDataAccount>;\nexport const ProgramAccount = type({\n  type: literal(\"program\"),\n  info: ProgramAccountInfo,\n});\n\nexport type ProgramDataAccountInfo = Infer<typeof ProgramDataAccountInfo>;\nexport const ProgramDataAccountInfo = type({\n  authority: nullable(PublicKeyFromString),\n  // don't care about data yet\n  slot: number(),\n});\n\nexport type ProgramDataAccount = Infer<typeof ProgramDataAccount>;\nexport const ProgramDataAccount = type({\n  type: literal(\"programData\"),\n  info: ProgramDataAccountInfo,\n});\n\nexport type ProgramBufferAccountInfo = Infer<typeof ProgramBufferAccountInfo>;\nexport const ProgramBufferAccountInfo = type({\n  authority: nullable(PublicKeyFromString),\n  // don't care about data yet\n});\n\nexport type ProgramBufferAccount = Infer<typeof ProgramBufferAccount>;\nexport const ProgramBufferAccount = type({\n  type: literal(\"buffer\"),\n  info: ProgramBufferAccountInfo,\n});\n\nexport type ProgramUninitializedAccountInfo = Infer<\n  typeof ProgramUninitializedAccountInfo\n>;\nexport const ProgramUninitializedAccountInfo = any();\n\nexport type ProgramUninitializedAccount = Infer<\n  typeof ProgramUninitializedAccount\n>;\nexport const ProgramUninitializedAccount = type({\n  type: literal(\"uninitialized\"),\n  info: ProgramUninitializedAccountInfo,\n});\n\nexport type UpgradeableLoaderAccount = Infer<typeof UpgradeableLoaderAccount>;\nexport const UpgradeableLoaderAccount = coerce(\n  union([\n    ProgramAccount,\n    ProgramDataAccount,\n    ProgramBufferAccount,\n    ProgramUninitializedAccount,\n  ]),\n  ParsedInfo,\n  (value) => {\n    // Coercions like `PublicKeyFromString` are not applied within\n    // union validators so we use this custom coercion as a workaround.\n    switch (value.type) {\n      case \"program\": {\n        return {\n          type: value.type,\n          info: create(value.info, ProgramAccountInfo),\n        };\n      }\n      case \"programData\": {\n        return {\n          type: value.type,\n          info: create(value.info, ProgramDataAccountInfo),\n        };\n      }\n      case \"buffer\": {\n        return {\n          type: value.type,\n          info: create(value.info, ProgramBufferAccountInfo),\n        };\n      }\n      case \"uninitialized\": {\n        return {\n          type: value.type,\n          info: create(value.info, ProgramUninitializedAccountInfo),\n        };\n      }\n      default: {\n        throw new Error(`Unknown program account type: ${value.type}`);\n      }\n    }\n  }\n);\n","import React from \"react\";\nimport * as Sentry from \"@sentry/react\";\nimport * as Cache from \"providers/cache\";\nimport { Connection, BlockResponse } from \"@velas/web3\";\nimport { useCluster, Cluster } from \"./cluster\";\n\nexport enum FetchStatus {\n  Fetching,\n  FetchFailed,\n  Fetched,\n}\n\nexport enum ActionType {\n  Update,\n  Clear,\n}\n\ntype Block = {\n  block?: BlockResponse;\n};\n\ntype State = Cache.State<Block>;\ntype Dispatch = Cache.Dispatch<Block>;\n\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype BlockProviderProps = { children: React.ReactNode };\n\nexport function BlockProvider({ children }: BlockProviderProps) {\n  const { url } = useCluster();\n  const [state, dispatch] = Cache.useReducer<Block>(url);\n\n  React.useEffect(() => {\n    dispatch({ type: ActionType.Clear, url });\n  }, [dispatch, url]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        {children}\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nexport function useBlock(key: number): Cache.CacheEntry<Block> | undefined {\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(`useBlock must be used within a BlockProvider`);\n  }\n\n  return context.entries[key];\n}\n\nexport async function fetchBlock(\n  dispatch: Dispatch,\n  url: string,\n  cluster: Cluster,\n  key: number\n) {\n  dispatch({\n    type: ActionType.Update,\n    status: FetchStatus.Fetching,\n    key,\n    url,\n  });\n\n  let status: FetchStatus;\n  let data: Block | undefined = undefined;\n\n  try {\n    const connection = new Connection(url, \"finalized\");\n    const block = await connection.getBlock(Number(key));\n    if (block === null) {\n      data = {};\n      status = FetchStatus.Fetched;\n    } else {\n      data = { block };\n      status = FetchStatus.Fetched;\n    }\n  } catch (err) {\n    status = FetchStatus.FetchFailed;\n    if (cluster !== Cluster.Custom) {\n      Sentry.captureException(err, { tags: { url } });\n    }\n  }\n\n  dispatch({\n    type: ActionType.Update,\n    url,\n    key,\n    status,\n    data,\n  });\n}\n\nexport function useFetchBlock() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(`useFetchBlock must be used within a BlockProvider`);\n  }\n\n  const { cluster, url } = useCluster();\n  return React.useCallback(\n    (key: number) => fetchBlock(dispatch, url, cluster, key),\n    [dispatch, cluster, url]\n  );\n}\n","import React from \"react\";\nimport { Cluster, useCluster } from \"providers/cluster\";\nimport * as Cache from \"providers/cache\";\nimport { Connection, InflationReward, PublicKey } from \"@velas/web3\";\nimport { ActionType } from \"providers/block\";\nimport { FetchStatus } from \"providers/cache\";\nimport { reportError } from \"utils/sentry\";\n\nconst REWARDS_AVAILABLE_EPOCH = new Map<Cluster, number>([\n  [Cluster.MainnetBeta, 132],\n  [Cluster.Testnet, 43],\n]);\n\nconst PAGE_SIZE = 15;\n\nexport type Rewards = {\n  highestFetchedEpoch?: number;\n  lowestFetchedEpoch?: number;\n  rewards: (InflationReward | null)[];\n  foundOldest?: boolean;\n};\n\nexport type RewardsUpdate = {\n  rewards: (InflationReward | null)[];\n  highestFetchedEpoch: number;\n  lowestFetchedEpoch: number;\n  foundOldest?: boolean;\n};\n\ntype State = Cache.State<Rewards>;\ntype Dispatch = Cache.Dispatch<RewardsUpdate>;\n\nfunction reconcile(\n  rewards: Rewards | undefined,\n  update: RewardsUpdate | undefined\n): Rewards | undefined {\n  if (update === undefined) {\n    return rewards;\n  }\n\n  const combined = (rewards?.rewards || [])\n    .concat(update.rewards)\n    .filter((value) => value !== null);\n\n  const foundOldest = update.foundOldest;\n\n  return {\n    rewards: combined,\n    highestFetchedEpoch:\n      rewards?.highestFetchedEpoch || update.highestFetchedEpoch,\n    lowestFetchedEpoch: update.lowestFetchedEpoch,\n    foundOldest,\n  };\n}\n\nexport const StateContext = React.createContext<State | undefined>(undefined);\nexport const DispatchContext = React.createContext<Dispatch | undefined>(\n  undefined\n);\n\ntype RewardsProviderProps = { children: React.ReactNode };\n\nexport function RewardsProvider({ children }: RewardsProviderProps) {\n  const { url } = useCluster();\n  const [state, dispatch] = Cache.useCustomReducer(url, reconcile);\n\n  React.useEffect(() => {\n    dispatch({ type: ActionType.Clear, url });\n  }, [dispatch, url]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        {children}\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nasync function fetchRewards(\n  dispatch: Dispatch,\n  pubkey: PublicKey,\n  cluster: Cluster,\n  url: string,\n  fromEpoch?: number,\n  highestEpoch?: number\n) {\n  dispatch({\n    type: ActionType.Update,\n    status: FetchStatus.Fetching,\n    key: pubkey.toBase58(),\n    url,\n  });\n\n  const lowestAvailableEpoch = REWARDS_AVAILABLE_EPOCH.get(cluster) || 0;\n  const connection = new Connection(url);\n\n  if (!fromEpoch) {\n    try {\n      const epochInfo = await connection.getEpochInfo();\n      fromEpoch = epochInfo.epoch - 1;\n    } catch (error) {\n      if (cluster !== Cluster.Custom) {\n        reportError(error, { url });\n      }\n\n      return dispatch({\n        type: ActionType.Update,\n        status: FetchStatus.FetchFailed,\n        key: pubkey.toBase58(),\n        url,\n      });\n    }\n\n    if (highestEpoch && highestEpoch < fromEpoch) {\n      fromEpoch = highestEpoch;\n    }\n  }\n\n  const getInflationReward = async (epoch: number) => {\n    try {\n      const result = await connection.getInflationReward([pubkey], epoch);\n      return result[0];\n    } catch (error) {\n      if (cluster !== Cluster.Custom) {\n        reportError(error, { url });\n      }\n    }\n    return null;\n  };\n\n  const requests = [];\n  for (let i: number = fromEpoch; i > fromEpoch - PAGE_SIZE; i--) {\n    if (i >= 0) {\n      requests.push(getInflationReward(i));\n    }\n  }\n\n  const results = await Promise.all(requests);\n  const lowestFetchedEpoch = fromEpoch - requests.length + 1;\n\n  dispatch({\n    type: ActionType.Update,\n    url,\n    key: pubkey.toBase58(),\n    status: FetchStatus.Fetched,\n    data: {\n      rewards: results || [],\n      foundOldest: lowestFetchedEpoch <= lowestAvailableEpoch,\n      highestFetchedEpoch: fromEpoch,\n      lowestFetchedEpoch,\n    },\n  });\n}\n\nexport function useRewards(\n  address: string\n): Cache.CacheEntry<Rewards> | undefined {\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(`useRewards must be used within a AccountsProvider`);\n  }\n\n  return context.entries[address];\n}\n\nexport function useFetchRewards() {\n  const { cluster, url } = useCluster();\n  const state = React.useContext(StateContext);\n  const dispatch = React.useContext(DispatchContext);\n\n  if (!state || !dispatch) {\n    throw new Error(`useFetchRewards must be used within a AccountsProvider`);\n  }\n\n  return React.useCallback(\n    (pubkey: PublicKey, highestEpoch?: number) => {\n      const before = state.entries[pubkey.toBase58()];\n      if (before?.data) {\n        fetchRewards(\n          dispatch,\n          pubkey,\n          cluster,\n          url,\n          before.data.lowestFetchedEpoch\n            ? before.data.lowestFetchedEpoch - 1\n            : undefined,\n          highestEpoch\n        );\n      } else {\n        fetchRewards(dispatch, pubkey, cluster, url, undefined, highestEpoch);\n      }\n    },\n    [state, dispatch, cluster, url]\n  );\n}\n","import React from \"react\";\nimport { PublicKey, Connection, StakeActivationData } from \"@velas/web3\";\nimport { useCluster, Cluster } from \"../cluster\";\nimport { HistoryProvider } from \"./history\";\nimport { TokensProvider } from \"./tokens\";\nimport { create } from \"superstruct\";\nimport { ParsedInfo } from \"validators\";\nimport { StakeAccount } from \"validators/accounts/stake\";\nimport {\n  TokenAccount,\n  MintAccountInfo,\n  TokenAccountInfo,\n} from \"validators/accounts/token\";\nimport * as Cache from \"providers/cache\";\nimport { ActionType, FetchStatus } from \"providers/cache\";\nimport { reportError } from \"utils/sentry\";\nimport { VoteAccount } from \"validators/accounts/vote\";\nimport { NonceAccount } from \"validators/accounts/nonce\";\nimport { SysvarAccount } from \"validators/accounts/sysvar\";\nimport { ConfigAccount } from \"validators/accounts/config\";\nimport { FlaggedAccountsProvider } from \"./flagged-accounts\";\nimport {\n  ProgramDataAccount,\n  ProgramDataAccountInfo,\n  UpgradeableLoaderAccount,\n} from \"validators/accounts/upgradeable-program\";\nimport { RewardsProvider } from \"./rewards\";\nexport { useAccountHistory } from \"./history\";\n\nexport type StakeProgramData = {\n  program: \"stake\";\n  parsed: StakeAccount;\n  activation?: StakeActivationData;\n};\n\nexport type UpgradeableLoaderAccountData = {\n  program: \"bpf-upgradeable-loader\";\n  parsed: UpgradeableLoaderAccount;\n  programData?: ProgramDataAccountInfo;\n};\n\nexport type TokenProgramData = {\n  program: \"spl-token\";\n  parsed: TokenAccount;\n};\n\nexport type VoteProgramData = {\n  program: \"vote\";\n  parsed: VoteAccount;\n};\n\nexport type NonceProgramData = {\n  program: \"nonce\";\n  parsed: NonceAccount;\n};\n\nexport type SysvarProgramData = {\n  program: \"sysvar\";\n  parsed: SysvarAccount;\n};\n\nexport type ConfigProgramData = {\n  program: \"config\";\n  parsed: ConfigAccount;\n};\n\nexport type ProgramData =\n  | UpgradeableLoaderAccountData\n  | StakeProgramData\n  | TokenProgramData\n  | VoteProgramData\n  | NonceProgramData\n  | SysvarProgramData\n  | ConfigProgramData;\n\nexport interface Details {\n  executable: boolean;\n  owner: PublicKey;\n  space: number;\n  data?: ProgramData;\n}\n\nexport interface Account {\n  pubkey: PublicKey;\n  lamports: number;\n  details?: Details;\n}\n\ntype State = Cache.State<Account>;\ntype Dispatch = Cache.Dispatch<Account>;\n\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype AccountsProviderProps = { children: React.ReactNode };\nexport function AccountsProvider({ children }: AccountsProviderProps) {\n  const { url } = useCluster();\n  const [state, dispatch] = Cache.useReducer<Account>(url);\n\n  // Clear accounts cache whenever cluster is changed\n  React.useEffect(() => {\n    dispatch({ type: ActionType.Clear, url });\n  }, [dispatch, url]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        <TokensProvider>\n          <HistoryProvider>\n            <RewardsProvider>\n              <FlaggedAccountsProvider>{children}</FlaggedAccountsProvider>\n            </RewardsProvider>\n          </HistoryProvider>\n        </TokensProvider>\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nasync function fetchAccountInfo(\n  dispatch: Dispatch,\n  pubkey: PublicKey,\n  cluster: Cluster,\n  url: string\n) {\n  dispatch({\n    type: ActionType.Update,\n    key: pubkey.toBase58(),\n    status: Cache.FetchStatus.Fetching,\n    url,\n  });\n\n  let data;\n  let fetchStatus;\n  try {\n    const connection = new Connection(url, \"confirmed\");\n    const result = (await connection.getParsedAccountInfo(pubkey)).value;\n\n    let lamports, details;\n    if (result === null) {\n      lamports = 0;\n    } else {\n      lamports = result.lamports;\n\n      // Only save data in memory if we can decode it\n      let space: number;\n      if (!(\"parsed\" in result.data)) {\n        space = result.data.length;\n      } else {\n        space = result.data.space;\n      }\n\n      let data: ProgramData | undefined;\n      if (\"parsed\" in result.data) {\n        try {\n          const info = create(result.data.parsed, ParsedInfo);\n          switch (result.data.program) {\n            case \"bpf-upgradeable-loader\": {\n              const parsed = create(info, UpgradeableLoaderAccount);\n\n              // Fetch program data to get program upgradeability info\n              let programData: ProgramDataAccountInfo | undefined;\n              if (parsed.type === \"program\") {\n                const result = (\n                  await connection.getParsedAccountInfo(parsed.info.programData)\n                ).value;\n                if (\n                  result &&\n                  \"parsed\" in result.data &&\n                  result.data.program === \"bpf-upgradeable-loader\"\n                ) {\n                  const info = create(result.data.parsed, ParsedInfo);\n                  programData = create(info, ProgramDataAccount).info;\n                } else {\n                  throw new Error(\n                    `invalid program data account for program: ${pubkey.toBase58()}`\n                  );\n                }\n              }\n\n              data = {\n                program: result.data.program,\n                parsed,\n                programData,\n              };\n\n              break;\n            }\n            case \"stake\": {\n              const parsed = create(info, StakeAccount);\n              const isDelegated = parsed.type === \"delegated\";\n              const activation = isDelegated\n                ? await connection.getStakeActivation(pubkey)\n                : undefined;\n\n              data = {\n                program: result.data.program,\n                parsed,\n                activation,\n              };\n              break;\n            }\n            case \"vote\":\n              data = {\n                program: result.data.program,\n                parsed: create(info, VoteAccount),\n              };\n              break;\n            case \"nonce\":\n              data = {\n                program: result.data.program,\n                parsed: create(info, NonceAccount),\n              };\n              break;\n            case \"sysvar\":\n              data = {\n                program: result.data.program,\n                parsed: create(info, SysvarAccount),\n              };\n              break;\n            case \"config\":\n              data = {\n                program: result.data.program,\n                parsed: create(info, ConfigAccount),\n              };\n              break;\n\n            case \"spl-token\":\n              data = {\n                program: result.data.program,\n                parsed: create(info, TokenAccount),\n              };\n              break;\n            default:\n              data = undefined;\n          }\n        } catch (error) {\n          reportError(error, { url, address: pubkey.toBase58() });\n        }\n      }\n\n      details = {\n        space,\n        executable: result.executable,\n        owner: result.owner,\n        data,\n      };\n    }\n    data = { pubkey, lamports, details };\n    fetchStatus = FetchStatus.Fetched;\n  } catch (error) {\n    if (cluster !== Cluster.Custom) {\n      reportError(error, { url });\n    }\n    fetchStatus = FetchStatus.FetchFailed;\n  }\n  dispatch({\n    type: ActionType.Update,\n    status: fetchStatus,\n    data,\n    key: pubkey.toBase58(),\n    url,\n  });\n}\n\nexport function useAccounts() {\n  const context = React.useContext(StateContext);\n  if (!context) {\n    throw new Error(`useAccounts must be used within a AccountsProvider`);\n  }\n  return context.entries;\n}\n\nexport function useAccountInfo(\n  address: string | undefined\n): Cache.CacheEntry<Account> | undefined {\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(`useAccountInfo must be used within a AccountsProvider`);\n  }\n  if (address === undefined) return;\n  return context.entries[address];\n}\n\nexport function useMintAccountInfo(\n  address: string | undefined\n): MintAccountInfo | undefined {\n  const accountInfo = useAccountInfo(address);\n  return React.useMemo(() => {\n    if (address === undefined) return;\n\n    try {\n      const data = accountInfo?.data?.details?.data;\n      if (!data) return;\n      if (data.program !== \"spl-token\" || data.parsed.type !== \"mint\") {\n        return;\n      }\n\n      return create(data.parsed.info, MintAccountInfo);\n    } catch (err) {\n      reportError(err, { address });\n    }\n  }, [address, accountInfo]);\n}\n\nexport function useTokenAccountInfo(\n  address: string | undefined\n): TokenAccountInfo | undefined {\n  const accountInfo = useAccountInfo(address);\n  if (address === undefined) return;\n\n  try {\n    const data = accountInfo?.data?.details?.data;\n    if (!data) return;\n    if (data.program !== \"spl-token\" || data.parsed.type !== \"account\") {\n      return;\n    }\n\n    return create(data.parsed.info, TokenAccountInfo);\n  } catch (err) {\n    reportError(err, { address });\n  }\n}\n\nexport function useFetchAccountInfo() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(\n      `useFetchAccountInfo must be used within a AccountsProvider`\n    );\n  }\n\n  const { cluster, url } = useCluster();\n  return React.useCallback(\n    (pubkey: PublicKey) => {\n      fetchAccountInfo(dispatch, pubkey, cluster, url);\n    },\n    [dispatch, cluster, url]\n  );\n}\n","import React, { ReactNode, useState } from \"react\";\n\ntype CopyState = \"copy\" | \"copied\" | \"errored\";\n\nexport function Copyable({\n  text,\n  children,\n  replaceText,\n}: {\n  text: string;\n  children: ReactNode;\n  replaceText?: boolean;\n}) {\n  const [state, setState] = useState<CopyState>(\"copy\");\n\n  const handleClick = async () => {\n    try {\n      await navigator.clipboard.writeText(text);\n      setState(\"copied\");\n    } catch (err) {\n      setState(\"errored\");\n    }\n    setTimeout(() => setState(\"copy\"), 1000);\n  };\n\n  function CopyIcon() {\n    if (state === \"copy\") {\n      return (\n        <span className=\"fe fe-copy c-pointer\" onClick={handleClick}></span>\n      );\n    } else if (state === \"copied\") {\n      return <span className=\"fe fe-check-circle\"></span>;\n    } else if (state === \"errored\") {\n      return (\n        <span\n          className=\"fe fe-x-circle\"\n          title=\"Please check your browser's copy permissions.\"\n        ></span>\n      );\n    }\n    return null;\n  }\n\n  let message = \"\";\n  let textColor = \"\";\n  if (state === \"copied\") {\n    message = \"Copied\";\n    textColor = \"text-info\";\n  } else if (state === \"errored\") {\n    message = \"Copy Failed\";\n    textColor = \"text-danger\";\n  }\n\n  function PrependCopyIcon() {\n    return (\n      <>\n        <span className=\"font-size-tiny mr-2\">\n          <span className={textColor}>\n            <span className=\"mr-2\">{message}</span>\n            <CopyIcon />\n          </span>\n        </span>\n        {children}\n      </>\n    );\n  }\n\n  function ReplaceWithMessage() {\n    return (\n      <span className=\"d-flex flex-column flex-nowrap\">\n        <span className=\"font-size-tiny\">\n          <span className={textColor}>\n            <CopyIcon />\n            <span className=\"ml-2\">{message}</span>\n          </span>\n        </span>\n        <span className=\"v-hidden\">{children}</span>\n      </span>\n    );\n  }\n\n  if (state === \"copy\") {\n    return <PrependCopyIcon />;\n  } else if (replaceText) {\n    return <ReplaceWithMessage />;\n  }\n\n  return (\n    <>\n      <span className=\"d-none d-lg-inline\">\n        <PrependCopyIcon />\n      </span>\n      <span className=\"d-inline d-lg-none\">\n        <ReplaceWithMessage />\n      </span>\n    </>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { PublicKey } from \"@velas/web3\";\nimport { clusterPath } from \"utils/url\";\nimport { displayAddress } from \"utils/tx\";\nimport { useCluster } from \"providers/cluster\";\nimport { Copyable } from \"./Copyable\";\nimport { useTokenRegistry } from \"providers/mints/token-registry\";\n\ntype Props = {\n  pubkey: PublicKey;\n  alignRight?: boolean;\n  link?: boolean;\n  raw?: boolean;\n  truncate?: boolean;\n  truncateUnknown?: boolean;\n  truncateChars?: number;\n};\n\nexport function Address({\n  pubkey,\n  alignRight,\n  link,\n  raw,\n  truncate,\n  truncateUnknown,\n  truncateChars,\n}: Props) {\n  const address = pubkey.toBase58();\n  const { tokenRegistry } = useTokenRegistry();\n  const { cluster } = useCluster();\n\n  if (\n    truncateUnknown &&\n    address === displayAddress(address, cluster, tokenRegistry)\n  ) {\n    truncate = true;\n  }\n\n  let addressLabel = raw\n    ? address\n    : displayAddress(address, cluster, tokenRegistry);\n\n  if (truncateChars && addressLabel === address) {\n    addressLabel = addressLabel.slice(0, truncateChars) + \"…\";\n  }\n\n  const content = (\n    <Copyable text={address} replaceText={!alignRight}>\n      <span className=\"text-monospace\">\n        {link ? (\n          <Link\n            className={truncate ? \"text-truncate address-truncate\" : \"\"}\n            to={clusterPath(`/address/${address}`)}\n          >\n            {addressLabel}\n          </Link>\n        ) : (\n          <span className={truncate ? \"text-truncate address-truncate\" : \"\"}>\n            {addressLabel}\n          </span>\n        )}\n      </span>\n    </Copyable>\n  );\n\n  return (\n    <>\n      <div\n        className={`d-none d-lg-flex align-items-center ${\n          alignRight ? \"justify-content-end\" : \"\"\n        }`}\n      >\n        {content}\n      </div>\n      <div className=\"d-flex d-lg-none align-items-center\">{content}</div>\n    </>\n  );\n}\n","import React from \"react\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport { SolBalance } from \"utils\";\nimport { displayTimestampUtc } from \"utils/date\";\nimport { Account, useFetchAccountInfo } from \"providers/accounts\";\nimport { Address } from \"components/common/Address\";\nimport {\n  StakeAccountInfo,\n  StakeMeta,\n  StakeAccountType,\n} from \"validators/accounts/stake\";\nimport BN from \"bn.js\";\nimport { StakeActivationData } from \"@velas/web3\";\n\nconst MAX_EPOCH = new BN(2).pow(new BN(64)).sub(new BN(1));\n\nexport function StakeAccountSection({\n  account,\n  stakeAccount,\n  activation,\n  stakeAccountType,\n}: {\n  account: Account;\n  stakeAccount: StakeAccountInfo;\n  stakeAccountType: StakeAccountType;\n  activation?: StakeActivationData;\n}) {\n  const hideDelegation =\n    stakeAccountType !== \"delegated\" ||\n    isFullyInactivated(stakeAccount, activation);\n  return (\n    <>\n      <LockupCard stakeAccount={stakeAccount} />\n      <OverviewCard\n        account={account}\n        stakeAccount={stakeAccount}\n        stakeAccountType={stakeAccountType}\n        activation={activation}\n        hideDelegation={hideDelegation}\n      />\n      {!hideDelegation && (\n        <DelegationCard\n          stakeAccount={stakeAccount}\n          activation={activation}\n          stakeAccountType={stakeAccountType}\n        />\n      )}\n      <AuthoritiesCard meta={stakeAccount.meta} />\n    </>\n  );\n}\n\nfunction LockupCard({ stakeAccount }: { stakeAccount: StakeAccountInfo }) {\n  const unixTimestamp = 1000 * (stakeAccount.meta?.lockup.unixTimestamp || 0);\n  if (Date.now() < unixTimestamp) {\n    const prettyTimestamp = displayTimestampUtc(unixTimestamp);\n    return (\n      <div className=\"alert alert-warning text-center\">\n        <strong>Account is locked!</strong> Lockup expires on {prettyTimestamp}\n      </div>\n    );\n  } else {\n    return null;\n  }\n}\n\nconst TYPE_NAMES = {\n  uninitialized: \"Uninitialized\",\n  initialized: \"Initialized\",\n  delegated: \"Delegated\",\n  rewardsPool: \"RewardsPool\",\n};\n\nfunction displayStatus(\n  stakeAccountType: StakeAccountType,\n  activation?: StakeActivationData\n) {\n  let status = TYPE_NAMES[stakeAccountType];\n  let activationState = \"\";\n  if (stakeAccountType !== \"delegated\") {\n    status = \"Not delegated\";\n  } else {\n    activationState = activation ? `(${activation.state})` : \"\";\n  }\n\n  return [status, activationState].join(\" \");\n}\n\nfunction OverviewCard({\n  account,\n  stakeAccount,\n  stakeAccountType,\n  activation,\n  hideDelegation,\n}: {\n  account: Account;\n  stakeAccount: StakeAccountInfo;\n  stakeAccountType: StakeAccountType;\n  activation?: StakeActivationData;\n  hideDelegation: boolean;\n}) {\n  const refresh = useFetchAccountInfo();\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title mb-0 d-flex align-items-center\">\n          Stake Account\n        </h3>\n        <button\n          className=\"btn btn-white btn-sm\"\n          onClick={() => refresh(account.pubkey)}\n        >\n          <span className=\"fe fe-refresh-cw mr-2\"></span>\n          Refresh\n        </button>\n      </div>\n\n      <TableCardBody>\n        <tr>\n          <td>Address</td>\n          <td className=\"text-lg-right\">\n            <Address pubkey={account.pubkey} alignRight raw />\n          </td>\n        </tr>\n        <tr>\n          <td>Balance (XZO)</td>\n          <td className=\"text-lg-right text-uppercase\">\n            <SolBalance lamports={account.lamports || 0} />\n          </td>\n        </tr>\n        <tr>\n          <td>Rent Reserve (XZO)</td>\n          <td className=\"text-lg-right\">\n            <SolBalance lamports={stakeAccount.meta.rentExemptReserve} />\n          </td>\n        </tr>\n        {hideDelegation && (\n          <tr>\n            <td>Status</td>\n            <td className=\"text-lg-right\">\n              {isFullyInactivated(stakeAccount, activation)\n                ? \"Not delegated\"\n                : displayStatus(stakeAccountType, activation)}\n            </td>\n          </tr>\n        )}\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction DelegationCard({\n  stakeAccount,\n  stakeAccountType,\n  activation,\n}: {\n  stakeAccount: StakeAccountInfo;\n  stakeAccountType: StakeAccountType;\n  activation?: StakeActivationData;\n}) {\n  let voterPubkey, activationEpoch, deactivationEpoch;\n  const delegation = stakeAccount?.stake?.delegation;\n  if (delegation) {\n    voterPubkey = delegation.voter;\n    activationEpoch = delegation.activationEpoch.eq(MAX_EPOCH)\n      ? \"-\"\n      : delegation.activationEpoch.toString();\n    deactivationEpoch = delegation.deactivationEpoch.eq(MAX_EPOCH)\n      ? \"-\"\n      : delegation.deactivationEpoch.toString();\n  }\n  const { stake } = stakeAccount;\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title mb-0 d-flex align-items-center\">\n          Stake Delegation\n        </h3>\n      </div>\n      <TableCardBody>\n        <tr>\n          <td>Status</td>\n          <td className=\"text-lg-right\">\n            {displayStatus(stakeAccountType, activation)}\n          </td>\n        </tr>\n\n        {stake && (\n          <>\n            <tr>\n              <td>Delegated Stake (XZO)</td>\n              <td className=\"text-lg-right\">\n                <SolBalance lamports={stake.delegation.stake} />\n              </td>\n            </tr>\n\n            {activation && (\n              <>\n                <tr>\n                  <td>Active Stake (XZO)</td>\n                  <td className=\"text-lg-right\">\n                    <SolBalance lamports={activation.active} />\n                  </td>\n                </tr>\n\n                <tr>\n                  <td>Inactive Stake (XZO)</td>\n                  <td className=\"text-lg-right\">\n                    <SolBalance lamports={activation.inactive} />\n                  </td>\n                </tr>\n              </>\n            )}\n\n            {voterPubkey && (\n              <tr>\n                <td>Delegated Vote Address</td>\n                <td className=\"text-lg-right\">\n                  <Address pubkey={voterPubkey} alignRight link />\n                </td>\n              </tr>\n            )}\n\n            <tr>\n              <td>Activation Epoch</td>\n              <td className=\"text-lg-right\">{activationEpoch}</td>\n            </tr>\n\n            <tr>\n              <td>Deactivation Epoch</td>\n              <td className=\"text-lg-right\">{deactivationEpoch}</td>\n            </tr>\n          </>\n        )}\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction AuthoritiesCard({ meta }: { meta: StakeMeta }) {\n  const hasLockup = meta.lockup.unixTimestamp > 0;\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title mb-0 d-flex align-items-center\">\n          Authorities\n        </h3>\n      </div>\n      <TableCardBody>\n        <tr>\n          <td>Stake Authority Address</td>\n          <td className=\"text-lg-right\">\n            <Address pubkey={meta.authorized.staker} alignRight link />\n          </td>\n        </tr>\n\n        <tr>\n          <td>Withdraw Authority Address</td>\n          <td className=\"text-lg-right\">\n            <Address pubkey={meta.authorized.withdrawer} alignRight link />\n          </td>\n        </tr>\n\n        {hasLockup && (\n          <tr>\n            <td>Lockup Authority Address</td>\n            <td className=\"text-lg-right\">\n              <Address pubkey={meta.lockup.custodian} alignRight link />\n            </td>\n          </tr>\n        )}\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction isFullyInactivated(\n  stakeAccount: StakeAccountInfo,\n  activation?: StakeActivationData\n): boolean {\n  const { stake } = stakeAccount;\n\n  if (!stake || !activation) {\n    return false;\n  }\n\n  return stake.delegation.stake.toString() === activation.inactive.toString();\n}\n","import React from \"react\";\nimport { Account } from \"providers/accounts\";\nimport { SolBalance } from \"utils\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport { Address } from \"components/common/Address\";\nimport { addressLabel } from \"utils/tx\";\nimport { useCluster } from \"providers/cluster\";\nimport { useTokenRegistry } from \"providers/mints/token-registry\";\n\nexport function UnknownAccountCard({ account }: { account: Account }) {\n  const { details, lamports } = account;\n  const { cluster } = useCluster();\n  const { tokenRegistry } = useTokenRegistry();\n  if (lamports === undefined) return null;\n\n  const label = addressLabel(account.pubkey.toBase58(), cluster, tokenRegistry);\n  return (\n    <div className=\"card\">\n      <div className=\"card-header align-items-center\">\n        <h3 className=\"card-header-title\">Overview</h3>\n      </div>\n\n      <TableCardBody>\n        <tr>\n          <td>Address</td>\n          <td className=\"text-lg-right\">\n            <Address pubkey={account.pubkey} alignRight raw />\n          </td>\n        </tr>\n        {label && (\n          <tr>\n            <td>Address Label</td>\n            <td className=\"text-lg-right\">{label}</td>\n          </tr>\n        )}\n        <tr>\n          <td>Balance (XZO)</td>\n          <td className=\"text-lg-right\">\n            <SolBalance lamports={lamports} />\n          </td>\n        </tr>\n\n        {details?.space !== undefined && (\n          <tr>\n            <td>Data (Bytes)</td>\n            <td className=\"text-lg-right\">{details.space}</td>\n          </tr>\n        )}\n\n        {details && (\n          <tr>\n            <td>Owner</td>\n            <td className=\"text-lg-right\">\n              <Address pubkey={details.owner} alignRight link />\n            </td>\n          </tr>\n        )}\n\n        {details && (\n          <tr>\n            <td>Executable</td>\n            <td className=\"text-lg-right\">\n              {details.executable ? \"Yes\" : \"No\"}\n            </td>\n          </tr>\n        )}\n      </TableCardBody>\n    </div>\n  );\n}\n","import React from \"react\";\n// @ts-ignore\nimport * as CoinGecko from \"coingecko-api\";\n\nconst PRICE_REFRESH = 10000;\n\nconst CoinGeckoClient = new CoinGecko();\n\nexport enum CoingeckoStatus {\n  Success,\n  FetchFailed,\n  Loading,\n}\n\nexport interface CoinInfo {\n  price: number;\n  volume_24: number;\n  market_cap: number;\n  price_change_percentage_24h: number;\n  market_cap_rank: number;\n  last_updated: Date;\n}\n\nexport interface CoinInfoResult {\n  data: {\n    market_data: {\n      current_price: {\n        usd: number;\n      };\n      total_volume: {\n        usd: number;\n      };\n      market_cap: {\n        usd: number;\n      };\n      price_change_percentage_24h: number;\n      market_cap_rank: number;\n    };\n    last_updated: string;\n  };\n}\n\nexport type CoinGeckoResult = {\n  coinInfo?: CoinInfo;\n  status: CoingeckoStatus;\n};\n\nexport function useCoinGecko(coinId?: string): CoinGeckoResult | undefined {\n  const [coinInfo, setCoinInfo] = React.useState<CoinGeckoResult>();\n  React.useEffect(() => {\n    let interval: NodeJS.Timeout | undefined;\n    if (coinId) {\n      const getCoinInfo = (refresh = false) => {\n        if (!refresh) {\n          setCoinInfo({\n            status: CoingeckoStatus.Loading,\n          });\n        }\n        CoinGeckoClient.coins\n          .fetch(coinId)\n          .then((info: CoinInfoResult) => {\n            setCoinInfo({\n              coinInfo: {\n                price: info.data.market_data.current_price.usd,\n                volume_24: info.data.market_data.total_volume.usd,\n                market_cap: info.data.market_data.market_cap.usd,\n                market_cap_rank: info.data.market_data.market_cap_rank,\n                price_change_percentage_24h:\n                  info.data.market_data.price_change_percentage_24h,\n                last_updated: new Date(info.data.last_updated),\n              },\n              status: CoingeckoStatus.Success,\n            });\n          })\n          .catch((error: any) => {\n            setCoinInfo({\n              status: CoingeckoStatus.FetchFailed,\n            });\n          });\n      };\n\n      getCoinInfo();\n      interval = setInterval(() => {\n        getCoinInfo(true);\n      }, PRICE_REFRESH);\n    }\n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n  }, [setCoinInfo, coinId]);\n\n  return coinInfo;\n}\n","import React from \"react\";\n\nexport function LoadingCard({ message }: { message?: string }) {\n  return (\n    <div className=\"card\">\n      <div className=\"card-body text-center\">\n        <span className=\"spinner-grow spinner-grow-sm mr-2\"></span>\n        {message || \"Loading\"}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Account, useFetchAccountInfo } from \"providers/accounts\";\nimport {\n  TokenAccount,\n  MintAccountInfo,\n  TokenAccountInfo,\n  MultisigAccountInfo,\n} from \"validators/accounts/token\";\nimport { create } from \"superstruct\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport { Address } from \"components/common/Address\";\nimport { UnknownAccountCard } from \"./UnknownAccountCard\";\nimport { Cluster, useCluster } from \"providers/cluster\";\nimport { abbreviatedNumber, normalizeTokenAmount } from \"utils\";\nimport { addressLabel } from \"utils/tx\";\nimport { reportError } from \"utils/sentry\";\nimport { useTokenRegistry } from \"providers/mints/token-registry\";\nimport { BigNumber } from \"bignumber.js\";\nimport { Copyable } from \"components/common/Copyable\";\nimport { CoingeckoStatus, useCoinGecko } from \"utils/coingecko\";\nimport { displayTimestampWithoutDate } from \"utils/date\";\nimport { LoadingCard } from \"components/common/LoadingCard\";\n\nconst getEthAddress = (link?: string) => {\n  let address = \"\";\n  if (link) {\n    const extractEth = link.match(/0x[a-fA-F0-9]{40,64}/);\n\n    if (extractEth) {\n      address = extractEth[0];\n    }\n  }\n\n  return address;\n};\n\nexport function TokenAccountSection({\n  account,\n  tokenAccount,\n}: {\n  account: Account;\n  tokenAccount: TokenAccount;\n}) {\n  const { cluster } = useCluster();\n\n  try {\n    switch (tokenAccount.type) {\n      case \"mint\": {\n        const info = create(tokenAccount.info, MintAccountInfo);\n        return <MintAccountCard account={account} info={info} />;\n      }\n      case \"account\": {\n        const info = create(tokenAccount.info, TokenAccountInfo);\n        return <TokenAccountCard account={account} info={info} />;\n      }\n      case \"multisig\": {\n        const info = create(tokenAccount.info, MultisigAccountInfo);\n        return <MultisigAccountCard account={account} info={info} />;\n      }\n    }\n  } catch (err) {\n    if (cluster !== Cluster.Custom) {\n      reportError(err, {\n        address: account.pubkey.toBase58(),\n      });\n    }\n  }\n  return <UnknownAccountCard account={account} />;\n}\n\nfunction MintAccountCard({\n  account,\n  info,\n}: {\n  account: Account;\n  info: MintAccountInfo;\n}) {\n  const { tokenRegistry } = useTokenRegistry();\n  const mintAddress = account.pubkey.toBase58();\n  const fetchInfo = useFetchAccountInfo();\n  const refresh = () => fetchInfo(account.pubkey);\n  const tokenInfo = tokenRegistry.get(mintAddress);\n\n  const bridgeContractAddress = getEthAddress(\n    tokenInfo?.extensions?.bridgeContract\n  );\n  const assetContractAddress = getEthAddress(\n    tokenInfo?.extensions?.assetContract\n  );\n\n  const coinInfo = useCoinGecko(tokenInfo?.extensions?.coingeckoId);\n\n  let tokenPriceInfo;\n  if (coinInfo?.status === CoingeckoStatus.Success) {\n    tokenPriceInfo = coinInfo.coinInfo;\n  }\n\n  return (\n    <>\n      {tokenInfo?.extensions?.coingeckoId &&\n        coinInfo?.status === CoingeckoStatus.Loading && (\n          <LoadingCard message=\"Loading token price data\" />\n        )}\n      {tokenPriceInfo && tokenPriceInfo.price && (\n        <div className=\"row\">\n          <div className=\"col-12 col-lg-4 col-xl\">\n            <div className=\"card\">\n              <div className=\"card-body\">\n                <h4>\n                  Price{\" \"}\n                  <span className=\"ml-2 badge badge-primary rank\">\n                    Rank #{tokenPriceInfo.market_cap_rank}\n                  </span>\n                </h4>\n                <h1 className=\"mb-0\">\n                  ${tokenPriceInfo.price.toFixed(2)}{\" \"}\n                  {tokenPriceInfo.price_change_percentage_24h > 0 && (\n                    <small className=\"change-positive\">\n                      &uarr;{\" \"}\n                      {tokenPriceInfo.price_change_percentage_24h.toFixed(2)}%\n                    </small>\n                  )}\n                  {tokenPriceInfo.price_change_percentage_24h < 0 && (\n                    <small className=\"change-negative\">\n                      &darr;{\" \"}\n                      {tokenPriceInfo.price_change_percentage_24h.toFixed(2)}%\n                    </small>\n                  )}\n                  {tokenPriceInfo.price_change_percentage_24h === 0 && (\n                    <small>0%</small>\n                  )}\n                </h1>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-12 col-lg-4 col-xl\">\n            <div className=\"card\">\n              <div className=\"card-body\">\n                <h4>24 Hour Volume</h4>\n                <h1 className=\"mb-0\">\n                  ${abbreviatedNumber(tokenPriceInfo.volume_24)}\n                </h1>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-12 col-lg-4 col-xl\">\n            <div className=\"card\">\n              <div className=\"card-body\">\n                <h4>Market Cap</h4>\n                <h1 className=\"mb-0\">\n                  ${abbreviatedNumber(tokenPriceInfo.market_cap)}\n                </h1>\n                <p className=\"updated-time text-muted\">\n                  Updated at{\" \"}\n                  {displayTimestampWithoutDate(\n                    tokenPriceInfo.last_updated.getTime()\n                  )}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <h3 className=\"card-header-title mb-0 d-flex align-items-center\">\n            {tokenInfo ? \"Overview\" : \"Token Mint\"}\n          </h3>\n          <button className=\"btn btn-white btn-sm\" onClick={refresh}>\n            <span className=\"fe fe-refresh-cw mr-2\"></span>\n            Refresh\n          </button>\n        </div>\n        <TableCardBody>\n          <tr>\n            <td>Address</td>\n            <td className=\"text-lg-right\">\n              <Address pubkey={account.pubkey} alignRight raw />\n            </td>\n          </tr>\n          <tr>\n            <td>\n              {info.mintAuthority === null ? \"Fixed Supply\" : \"Current Supply\"}\n            </td>\n            <td className=\"text-lg-right\">\n              {normalizeTokenAmount(info.supply, info.decimals).toLocaleString(\n                \"en-US\",\n                {\n                  minimumFractionDigits: info.decimals,\n                }\n              )}\n            </td>\n          </tr>\n          {tokenInfo?.extensions?.website && (\n            <tr>\n              <td>Website</td>\n              <td className=\"text-lg-right\">\n                <a\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\"\n                  href={tokenInfo.extensions.website}\n                >\n                  {tokenInfo.extensions.website}\n                  <span className=\"fe fe-external-link ml-2\"></span>\n                </a>\n              </td>\n            </tr>\n          )}\n          {info.mintAuthority && (\n            <tr>\n              <td>Mint Authority</td>\n              <td className=\"text-lg-right\">\n                <Address pubkey={info.mintAuthority} alignRight link />\n              </td>\n            </tr>\n          )}\n          {info.freezeAuthority && (\n            <tr>\n              <td>Freeze Authority</td>\n              <td className=\"text-lg-right\">\n                <Address pubkey={info.freezeAuthority} alignRight link />\n              </td>\n            </tr>\n          )}\n          <tr>\n            <td>Decimals</td>\n            <td className=\"text-lg-right\">{info.decimals}</td>\n          </tr>\n          {!info.isInitialized && (\n            <tr>\n              <td>Status</td>\n              <td className=\"text-lg-right\">Uninitialized</td>\n            </tr>\n          )}\n          {tokenInfo?.extensions?.bridgeContract && bridgeContractAddress && (\n            <tr>\n              <td>Bridge Contract</td>\n              <td className=\"text-lg-right\">\n                <Copyable text={bridgeContractAddress}>\n                  <a\n                    href={tokenInfo.extensions.bridgeContract}\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    {bridgeContractAddress}\n                  </a>\n                </Copyable>\n              </td>\n            </tr>\n          )}\n          {tokenInfo?.extensions?.assetContract && assetContractAddress && (\n            <tr>\n              <td>Bridged Asset Contract</td>\n              <td className=\"text-lg-right\">\n                <Copyable text={assetContractAddress}>\n                  <a\n                    href={tokenInfo.extensions.bridgeContract}\n                    target=\"_blank\"\n                    rel=\"noreferrer\"\n                  >\n                    {assetContractAddress}\n                  </a>\n                </Copyable>\n              </td>\n            </tr>\n          )}\n        </TableCardBody>\n      </div>\n    </>\n  );\n}\n\nfunction TokenAccountCard({\n  account,\n  info,\n}: {\n  account: Account;\n  info: TokenAccountInfo;\n}) {\n  const refresh = useFetchAccountInfo();\n  const { cluster } = useCluster();\n  const { tokenRegistry } = useTokenRegistry();\n  const label = addressLabel(account.pubkey.toBase58(), cluster, tokenRegistry);\n\n  let unit, balance;\n  if (info.isNative) {\n    unit = \"XZO\";\n    balance = (\n      <>\n        ◎\n        <span className=\"text-monospace\">\n          {new BigNumber(info.tokenAmount.uiAmountString).toFormat(9)}\n        </span>\n      </>\n    );\n  } else {\n    balance = <>{info.tokenAmount.uiAmountString}</>;\n    unit = tokenRegistry.get(info.mint.toBase58())?.symbol || \"tokens\";\n  }\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title mb-0 d-flex align-items-center\">\n          Token Account\n        </h3>\n        <button\n          className=\"btn btn-white btn-sm\"\n          onClick={() => refresh(account.pubkey)}\n        >\n          <span className=\"fe fe-refresh-cw mr-2\"></span>\n          Refresh\n        </button>\n      </div>\n\n      <TableCardBody>\n        <tr>\n          <td>Address</td>\n          <td className=\"text-lg-right\">\n            <Address pubkey={account.pubkey} alignRight raw />\n          </td>\n        </tr>\n        {label && (\n          <tr>\n            <td>Address Label</td>\n            <td className=\"text-lg-right\">{label}</td>\n          </tr>\n        )}\n        <tr>\n          <td>Mint</td>\n          <td className=\"text-lg-right\">\n            <Address pubkey={info.mint} alignRight link />\n          </td>\n        </tr>\n        <tr>\n          <td>Owner</td>\n          <td className=\"text-lg-right\">\n            <Address pubkey={info.owner} alignRight link />\n          </td>\n        </tr>\n        <tr>\n          <td>Token balance ({unit})</td>\n          <td className=\"text-lg-right\">{balance}</td>\n        </tr>\n        {info.state === \"uninitialized\" && (\n          <tr>\n            <td>Status</td>\n            <td className=\"text-lg-right\">Uninitialized</td>\n          </tr>\n        )}\n        {info.rentExemptReserve && (\n          <tr>\n            <td>Rent-exempt reserve (XZO)</td>\n            <td className=\"text-lg-right\">\n              <>\n                ◎\n                <span className=\"text-monospace\">\n                  {new BigNumber(\n                    info.rentExemptReserve.uiAmountString\n                  ).toFormat(9)}\n                </span>\n              </>\n            </td>\n          </tr>\n        )}\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction MultisigAccountCard({\n  account,\n  info,\n}: {\n  account: Account;\n  info: MultisigAccountInfo;\n}) {\n  const refresh = useFetchAccountInfo();\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title mb-0 d-flex align-items-center\">\n          Multisig Account\n        </h3>\n        <button\n          className=\"btn btn-white btn-sm\"\n          onClick={() => refresh(account.pubkey)}\n        >\n          <span className=\"fe fe-refresh-cw mr-2\"></span>\n          Refresh\n        </button>\n      </div>\n\n      <TableCardBody>\n        <tr>\n          <td>Address</td>\n          <td className=\"text-lg-right\">\n            <Address pubkey={account.pubkey} alignRight raw />\n          </td>\n        </tr>\n        <tr>\n          <td>Required Signers</td>\n          <td className=\"text-lg-right\">{info.numRequiredSigners}</td>\n        </tr>\n        <tr>\n          <td>Valid Signers</td>\n          <td className=\"text-lg-right\">{info.numValidSigners}</td>\n        </tr>\n        {info.signers.map((signer) => (\n          <tr key={signer.toString()}>\n            <td>Signer</td>\n            <td className=\"text-lg-right\">\n              <Address pubkey={signer} alignRight link />\n            </td>\n          </tr>\n        ))}\n        {!info.isInitialized && (\n          <tr>\n            <td>Status</td>\n            <td className=\"text-lg-right\">Uninitialized</td>\n          </tr>\n        )}\n      </TableCardBody>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport function ErrorCard({\n  retry,\n  retryText,\n  text,\n  subtext,\n}: {\n  retry?: () => void;\n  retryText?: string;\n  text: string;\n  subtext?: string;\n}) {\n  const buttonText = retryText || \"Try Again\";\n  return (\n    <div className=\"card\">\n      <div className=\"card-body text-center\">\n        {text}\n        {retry && (\n          <>\n            <span\n              className=\"btn btn-white ml-3 d-none d-md-inline\"\n              onClick={retry}\n            >\n              {buttonText}\n            </span>\n            <div className=\"d-block d-md-none mt-4\">\n              <span className=\"btn btn-white w-100\" onClick={retry}>\n                {buttonText}\n              </span>\n            </div>\n            {subtext && (\n              <div className=\"text-muted\">\n                <hr></hr>\n                {subtext}\n              </div>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useRef } from \"react\";\n\n// @ts-ignore\nimport Jazzicon from \"@metamask/jazzicon\";\nimport bs58 from \"bs58\";\nimport { PublicKey } from \"@velas/web3\";\n\nexport function Identicon(props: {\n  address?: string | PublicKey;\n  style?: React.CSSProperties;\n  className?: string;\n}) {\n  const { style, className } = props;\n  const address =\n    typeof props.address === \"string\"\n      ? props.address\n      : props.address?.toBase58();\n  const ref = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (address && ref.current) {\n      ref.current.innerHTML = \"\";\n      ref.current.className = className || \"\";\n      ref.current.appendChild(\n        Jazzicon(\n          style?.width || 16,\n          parseInt(bs58.decode(address).toString(\"hex\").slice(5, 15), 16)\n        )\n      );\n    }\n  }, [address, style, className]);\n\n  return <div className=\"identicon-wrapper\" ref={ref} style={props.style} />;\n}\n","import React from \"react\";\nimport { PublicKey } from \"@velas/web3\";\nimport { FetchStatus } from \"providers/cache\";\nimport {\n  useFetchAccountOwnedTokens,\n  useAccountOwnedTokens,\n  TokenInfoWithPubkey,\n} from \"providers/accounts/tokens\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { LoadingCard } from \"components/common/LoadingCard\";\nimport { Address } from \"components/common/Address\";\nimport { useQuery } from \"utils/url\";\nimport { Link } from \"react-router-dom\";\nimport { Location } from \"history\";\nimport { useTokenRegistry } from \"providers/mints/token-registry\";\nimport { BigNumber } from \"bignumber.js\";\nimport { Identicon } from \"components/common/Identicon\";\n\ntype Display = \"summary\" | \"detail\" | null;\n\nconst SMALL_IDENTICON_WIDTH = 16;\n\nconst useQueryDisplay = (): Display => {\n  const query = useQuery();\n  const filter = query.get(\"display\");\n  if (filter === \"summary\" || filter === \"detail\") {\n    return filter;\n  } else {\n    return null;\n  }\n};\n\nexport function OwnedTokensCard({ pubkey }: { pubkey: PublicKey }) {\n  const address = pubkey.toBase58();\n  const ownedTokens = useAccountOwnedTokens(address);\n  const fetchAccountTokens = useFetchAccountOwnedTokens();\n  const refresh = () => fetchAccountTokens(pubkey);\n  const [showDropdown, setDropdown] = React.useState(false);\n  const display = useQueryDisplay();\n\n  // Fetch owned tokens\n  React.useEffect(() => {\n    if (!ownedTokens) refresh();\n  }, [address]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  if (ownedTokens === undefined) {\n    return null;\n  }\n\n  const { status } = ownedTokens;\n  const tokens = ownedTokens.data?.tokens;\n  const fetching = status === FetchStatus.Fetching;\n  if (fetching && (tokens === undefined || tokens.length === 0)) {\n    return <LoadingCard message=\"Loading token holdings\" />;\n  } else if (tokens === undefined) {\n    return <ErrorCard retry={refresh} text=\"Failed to fetch token holdings\" />;\n  }\n\n  if (tokens.length === 0) {\n    return (\n      <ErrorCard\n        retry={refresh}\n        retryText=\"Try Again\"\n        text={\"No token holdings found\"}\n      />\n    );\n  }\n\n  return (\n    <>\n      {showDropdown && (\n        <div className=\"dropdown-exit\" onClick={() => setDropdown(false)} />\n      )}\n\n      <div className=\"card\">\n        <div className=\"card-header align-items-center\">\n          <h3 className=\"card-header-title\">Token Holdings</h3>\n          <DisplayDropdown\n            display={display}\n            toggle={() => setDropdown((show) => !show)}\n            show={showDropdown}\n          />\n        </div>\n        {display === \"detail\" ? (\n          <HoldingsDetailTable tokens={tokens} />\n        ) : (\n          <HoldingsSummaryTable tokens={tokens} />\n        )}\n      </div>\n    </>\n  );\n}\n\nfunction HoldingsDetailTable({ tokens }: { tokens: TokenInfoWithPubkey[] }) {\n  const detailsList: React.ReactNode[] = [];\n  const { tokenRegistry } = useTokenRegistry();\n  const showLogos = tokens.some(\n    (t) => tokenRegistry.get(t.info.mint.toBase58())?.logoURI !== undefined\n  );\n  tokens.forEach((tokenAccount) => {\n    const address = tokenAccount.pubkey.toBase58();\n    const mintAddress = tokenAccount.info.mint.toBase58();\n    const tokenDetails = tokenRegistry.get(mintAddress);\n    detailsList.push(\n      <tr key={address}>\n        {showLogos && (\n          <td className=\"w-1 p-0 text-center\">\n            {tokenDetails?.logoURI ? (\n              <img\n                src={tokenDetails.logoURI}\n                alt=\"token icon\"\n                className=\"token-icon rounded-circle border border-4 border-gray-dark\"\n              />\n            ) : (\n              <Identicon\n                address={address}\n                className=\"avatar-img identicon-wrapper identicon-wrapper-small\"\n                style={{ width: SMALL_IDENTICON_WIDTH }}\n              />\n            )}\n          </td>\n        )}\n        <td>\n          <Address pubkey={tokenAccount.pubkey} link truncate />\n        </td>\n        <td>\n          <Address pubkey={tokenAccount.info.mint} link truncate />\n        </td>\n        <td>\n          {tokenAccount.info.tokenAmount.uiAmountString}{\" \"}\n          {tokenDetails && tokenDetails.symbol}\n        </td>\n      </tr>\n    );\n  });\n\n  return (\n    <div className=\"table-responsive mb-0\">\n      <table className=\"table table-sm table-nowrap card-table\">\n        <thead>\n          <tr>\n            {showLogos && (\n              <th className=\"text-muted w-1 p-0 text-center\">Logo</th>\n            )}\n            <th className=\"text-muted\">Account Address</th>\n            <th className=\"text-muted\">Mint Address</th>\n            <th className=\"text-muted\">Balance</th>\n          </tr>\n        </thead>\n        <tbody className=\"list\">{detailsList}</tbody>\n      </table>\n    </div>\n  );\n}\n\nfunction HoldingsSummaryTable({ tokens }: { tokens: TokenInfoWithPubkey[] }) {\n  const { tokenRegistry } = useTokenRegistry();\n  const mappedTokens = new Map<string, string>();\n  for (const { info: token } of tokens) {\n    const mintAddress = token.mint.toBase58();\n    const totalByMint = mappedTokens.get(mintAddress);\n\n    let amount = token.tokenAmount.uiAmountString;\n    if (totalByMint !== undefined) {\n      amount = new BigNumber(totalByMint)\n        .plus(token.tokenAmount.uiAmountString)\n        .toString();\n    }\n\n    mappedTokens.set(mintAddress, amount);\n  }\n\n  const detailsList: React.ReactNode[] = [];\n  const showLogos = tokens.some(\n    (t) => tokenRegistry.get(t.info.mint.toBase58())?.logoURI !== undefined\n  );\n  mappedTokens.forEach((totalByMint, mintAddress) => {\n    const tokenDetails = tokenRegistry.get(mintAddress);\n    detailsList.push(\n      <tr key={mintAddress}>\n        {showLogos && (\n          <td className=\"w-1 p-0 text-center\">\n            {tokenDetails?.logoURI ? (\n              <img\n                src={tokenDetails.logoURI}\n                alt=\"token icon\"\n                className=\"token-icon rounded-circle border border-4 border-gray-dark\"\n              />\n            ) : (\n              <Identicon\n                address={mintAddress}\n                className=\"avatar-img identicon-wrapper identicon-wrapper-small\"\n                style={{ width: SMALL_IDENTICON_WIDTH }}\n              />\n            )}\n          </td>\n        )}\n        <td>\n          <Address pubkey={new PublicKey(mintAddress)} link />\n        </td>\n        <td>\n          {totalByMint} {tokenDetails && tokenDetails.symbol}\n        </td>\n      </tr>\n    );\n  });\n\n  return (\n    <div className=\"table-responsive mb-0\">\n      <table className=\"table table-sm table-nowrap card-table\">\n        <thead>\n          <tr>\n            {showLogos && (\n              <th className=\"text-muted w-1 p-0 text-center\">Logo</th>\n            )}\n            <th className=\"text-muted\">Mint Address</th>\n            <th className=\"text-muted\">Total Balance</th>\n          </tr>\n        </thead>\n        <tbody className=\"list\">{detailsList}</tbody>\n      </table>\n    </div>\n  );\n}\n\ntype DropdownProps = {\n  display: Display;\n  toggle: () => void;\n  show: boolean;\n};\n\nconst DisplayDropdown = ({ display, toggle, show }: DropdownProps) => {\n  const buildLocation = (location: Location, display: Display) => {\n    const params = new URLSearchParams(location.search);\n    if (display === null) {\n      params.delete(\"display\");\n    } else {\n      params.set(\"display\", display);\n    }\n    return {\n      ...location,\n      search: params.toString(),\n    };\n  };\n\n  const DISPLAY_OPTIONS: Display[] = [null, \"detail\"];\n  return (\n    <div className=\"dropdown\">\n      <button\n        className=\"btn btn-white btn-sm dropdown-toggle\"\n        type=\"button\"\n        onClick={toggle}\n      >\n        {display === \"detail\" ? \"Detailed\" : \"Summary\"}\n      </button>\n      <div\n        className={`dropdown-menu-right dropdown-menu${show ? \" show\" : \"\"}`}\n      >\n        {DISPLAY_OPTIONS.map((displayOption) => {\n          return (\n            <Link\n              key={displayOption || \"null\"}\n              to={(location) => buildLocation(location, displayOption)}\n              className={`dropdown-item${\n                displayOption === display ? \" active\" : \"\"\n              }`}\n              onClick={toggle}\n            >\n              {displayOption === \"detail\" ? \"Detailed\" : \"Summary\"}\n            </Link>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { TransactionSignature } from \"@velas/web3\";\nimport { clusterPath } from \"utils/url\";\nimport { Copyable } from \"./Copyable\";\n\ntype Props = {\n  signature: TransactionSignature;\n  alignRight?: boolean;\n  link?: boolean;\n  truncate?: boolean;\n  truncateChars?: number;\n};\n\nexport function Signature({\n  signature,\n  alignRight,\n  link,\n  truncate,\n  truncateChars,\n}: Props) {\n  let signatureLabel = signature;\n\n  if (truncateChars) {\n    signatureLabel = signature.slice(0, truncateChars) + \"…\";\n  }\n\n  return (\n    <div\n      className={`d-flex align-items-center ${\n        alignRight ? \"justify-content-end\" : \"\"\n      }`}\n    >\n      <Copyable text={signature} replaceText={!alignRight}>\n        <span className=\"text-monospace\">\n          {link ? (\n            <Link\n              className={truncate ? \"text-truncate signature-truncate\" : \"\"}\n              to={clusterPath(`/tx/${signature}`)}\n            >\n              {signatureLabel}\n            </Link>\n          ) : (\n            signatureLabel\n          )}\n        </span>\n      </Copyable>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { clusterPath } from \"utils/url\";\nimport { Copyable } from \"./Copyable\";\n\ntype Props = {\n  slot: number;\n  link?: boolean;\n};\nexport function Slot({ slot, link }: Props) {\n  return link ? (\n    <Copyable text={slot.toString()}>\n      <span className=\"text-monospace\">\n        <Link to={clusterPath(`/block/${slot}`)}>\n          {slot.toLocaleString(\"en-US\")}\n        </Link>\n      </span>\n    </Copyable>\n  ) : (\n    <span className=\"text-monospace\">{slot.toLocaleString(\"en-US\")}</span>\n  );\n}\n","import React from \"react\";\nimport {\n  Connection,\n  TransactionSignature,\n  ParsedConfirmedTransaction,\n  ConfirmedTransaction,\n} from \"@velas/web3\";\nimport { useCluster, Cluster } from \"../cluster\";\nimport * as Cache from \"providers/cache\";\nimport { ActionType, FetchStatus } from \"providers/cache\";\nimport { reportError } from \"utils/sentry\";\n\nexport interface Details {\n  transaction?: ParsedConfirmedTransaction | null;\n  raw?: ConfirmedTransaction | null;\n}\n\ntype State = Cache.State<Details>;\ntype Dispatch = Cache.Dispatch<Details>;\n\nexport const StateContext = React.createContext<State | undefined>(undefined);\nexport const DispatchContext = React.createContext<Dispatch | undefined>(\n  undefined\n);\n\ntype DetailsProviderProps = { children: React.ReactNode };\nexport function DetailsProvider({ children }: DetailsProviderProps) {\n  const { url } = useCluster();\n  const [state, dispatch] = Cache.useReducer<Details>(url);\n\n  React.useEffect(() => {\n    dispatch({ type: ActionType.Clear, url });\n  }, [dispatch, url]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        {children}\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nasync function fetchDetails(\n  dispatch: Dispatch,\n  signature: TransactionSignature,\n  cluster: Cluster,\n  url: string\n) {\n  dispatch({\n    type: ActionType.Update,\n    status: FetchStatus.Fetching,\n    key: signature,\n    url,\n  });\n\n  let fetchStatus;\n  let transaction;\n  try {\n    transaction = await new Connection(url).getParsedConfirmedTransaction(\n      signature\n    );\n    fetchStatus = FetchStatus.Fetched;\n  } catch (error) {\n    if (cluster !== Cluster.Custom) {\n      reportError(error, { url });\n    }\n    fetchStatus = FetchStatus.FetchFailed;\n  }\n  dispatch({\n    type: ActionType.Update,\n    status: fetchStatus,\n    key: signature,\n    data: { transaction },\n    url,\n  });\n}\n\nexport function useFetchTransactionDetails() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(\n      `useFetchTransactionDetails must be used within a TransactionsProvider`\n    );\n  }\n\n  const { cluster, url } = useCluster();\n  return React.useCallback(\n    (signature: TransactionSignature) => {\n      url && fetchDetails(dispatch, signature, cluster, url);\n    },\n    [dispatch, cluster, url]\n  );\n}\n\nexport function useTransactionDetails(\n  signature: TransactionSignature\n): Cache.CacheEntry<Details> | undefined {\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(\n      `useTransactionDetails must be used within a TransactionsProvider`\n    );\n  }\n\n  return context.entries[signature];\n}\n\nexport type TransactionDetailsCache = {\n  [key: string]: Cache.CacheEntry<Details>;\n};\nexport function useTransactionDetailsCache(): TransactionDetailsCache {\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(\n      `useTransactionDetailsCache must be used within a TransactionsProvider`\n    );\n  }\n\n  return context.entries;\n}\n\nasync function fetchRawTransaction(\n  dispatch: Dispatch,\n  signature: TransactionSignature,\n  cluster: Cluster,\n  url: string\n) {\n  let fetchStatus;\n  let transaction;\n  try {\n    transaction = await new Connection(url).getConfirmedTransaction(signature);\n    fetchStatus = FetchStatus.Fetched;\n    dispatch({\n      type: ActionType.Update,\n      status: fetchStatus,\n      key: signature,\n      data: {\n        raw: transaction,\n      },\n      url,\n    });\n  } catch (error) {\n    if (cluster !== Cluster.Custom) {\n      reportError(error, { url });\n    }\n  }\n}\n\nexport function useFetchRawTransaction() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(\n      `useFetchRawTransaaction must be used within a TransactionsProvider`\n    );\n  }\n\n  const { cluster, url } = useCluster();\n  return React.useCallback(\n    (signature: TransactionSignature) => {\n      url && fetchRawTransaction(dispatch, signature, cluster, url);\n    },\n    [dispatch, cluster, url]\n  );\n}","import { TransactionInstruction } from \"@velas/web3\";\n\nexport const PROGRAM_IDS: string[] = [\n  \"SwaPpA9LAaLfeLi3a68M4DjnLqgtticKg6CnyNwgAC8\", // mainnet / testnet / devnet\n  \"9qvG1zUp8xF1Bi4m6UdRNby1BAAuaDrUxSpv4CmRRMjL\", // mainnet - legacy\n  \"2n2dsFSgmPcZ8jkmBZLGUM2nzuFqcBGQ3JEEj6RJJcEg\", // testnet - legacy\n  \"9tdctNJuFsYZ6VrKfKEuwwbPp4SFdFw3jYBZU8QUtzeX\", // testnet - legacy\n  \"CrRvVBS4Hmj47TPU3cMukurpmCUYUrdHYxTQBxncBGqw\", // testnet - legacy\n  \"BSfTAcBdqmvX5iE2PW88WFNNp2DHhLUaBKk5WrnxVkcJ\", // devnet - legacy\n  \"H1E1G7eD5Rrcy43xvDxXCsjkRggz7MWNMLGJ8YNzJ8PM\", // devnet - legacy\n  \"CMoteLxSPVPoc7Drcggf3QPg3ue8WPpxYyZTg77UGqHo\", // devnet - legacy\n  \"EEuPz4iZA5reBUeZj6x1VzoiHfYeHMppSCnHZasRFhYo\", // devnet - legacy\n  \"5rdpyt5iGfr68qt28hkefcFyF4WtyhTwqKDmHSBG8GZx\", // localnet\n];\n\nconst INSTRUCTION_LOOKUP: { [key: number]: string } = {\n  0: \"Initialize Swap\",\n  1: \"Swap\",\n  2: \"Deposit All Token Types\",\n  3: \"Withdraw All Token Types\",\n  4: \"Deposit Single Token Type Exact Amount In\",\n  5: \"Withdraw Single Token Type Exact Amount Out\",\n};\n\nexport function isTokenSwapInstruction(\n  instruction: TransactionInstruction\n): boolean {\n  return PROGRAM_IDS.includes(instruction.programId.toBase58());\n}\n\nexport function parseTokenSwapInstructionTitle(\n  instruction: TransactionInstruction\n): string {\n  const code = instruction.data[0];\n\n  if (!(code in INSTRUCTION_LOOKUP)) {\n    throw new Error(`Unrecognized Token Swap instruction code: ${code}`);\n  }\n\n  return INSTRUCTION_LOOKUP[code];\n}\n","import { TransactionInstruction } from \"@velas/web3\";\n\nexport const PROGRAM_IDS: string[] = [\n  \"LendZqTs7gn5CTSJU1jWKhKuVpjJGom45nnwPb2AMTi\", // mainnet / testnet / devnet\n];\n\nconst INSTRUCTION_LOOKUP: { [key: number]: string } = {\n  0: \"Initialize Lending Market\",\n  1: \"Initialize Reserve\",\n  2: \"Initialize Obligation\",\n  3: \"Reserve Deposit\",\n  4: \"Reserve Withdraw\",\n  5: \"Borrow\",\n  6: \"Repay Loan\",\n  7: \"Liquidate Loan\",\n  8: \"Accrue Interest\",\n};\n\nexport function isTokenLendingInstruction(\n  instruction: TransactionInstruction\n): boolean {\n  return PROGRAM_IDS.includes(instruction.programId.toBase58());\n}\n\nexport function parseTokenLendingInstructionTitle(\n  instruction: TransactionInstruction\n): string {\n  const code = instruction.data[0];\n\n  if (!(code in INSTRUCTION_LOOKUP)) {\n    throw new Error(`Unrecognized Token Lending instruction code: ${code}`);\n  }\n\n  return INSTRUCTION_LOOKUP[code];\n}\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport { decodeInstruction, MARKETS } from \"@project-serum/serum\";\nimport { PublicKey, TransactionInstruction } from \"@velas/web3\";\nimport BN from \"bn.js\";\nimport { enums, number, optional, type, Infer, create } from \"superstruct\";\nimport { BigNumFromString } from \"validators/bignum\";\nimport { PublicKeyFromString } from \"validators/pubkey\";\n\nconst SERUM_PROGRAM_IDS = [\n  \"4ckmDgGdxQoPDLUkDT3vHgSAkzA3QRdNq5ywwY4sUSJn\",\n  \"9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin\",\n];\n\nexport const SERUM_DECODED_MAX = 6;\n\nexport type Side = Infer<typeof Side>;\nexport const Side = enums([\"buy\", \"sell\"]);\n\nexport type OrderType = Infer<typeof OrderType>;\nexport const OrderType = enums([\"limit\", \"ioc\", \"postOnly\"]);\n\nexport type InitializeMarket = {\n  market: PublicKey;\n  requestQueue: PublicKey;\n  eventQueue: PublicKey;\n  bids: PublicKey;\n  asks: PublicKey;\n  baseVault: PublicKey;\n  quoteVault: PublicKey;\n  baseMint: PublicKey;\n  quoteMint: PublicKey;\n  baseLotSize: BN;\n  quoteLotSize: BN;\n  feeRateBps: number;\n  vaultSignerNonce: BN;\n  quoteDustThreshold: BN;\n  programId: PublicKey;\n};\n\nexport const InitializeMarketDecode = type({\n  baseLotSize: BigNumFromString,\n  quoteLotSize: BigNumFromString,\n  feeRateBps: number(),\n  quoteDustThreshold: BigNumFromString,\n  vaultSignerNonce: BigNumFromString,\n});\n\nexport function decodeInitializeMarket(\n  ix: TransactionInstruction\n): InitializeMarket {\n  const decoded = create(\n    decodeInstruction(ix.data).initializeMarket,\n    InitializeMarketDecode\n  );\n\n  let initializeMarket: InitializeMarket = {\n    market: ix.keys[0].pubkey,\n    requestQueue: ix.keys[1].pubkey,\n    eventQueue: ix.keys[2].pubkey,\n    bids: ix.keys[3].pubkey,\n    asks: ix.keys[4].pubkey,\n    baseVault: ix.keys[5].pubkey,\n    quoteVault: ix.keys[6].pubkey,\n    baseMint: ix.keys[7].pubkey,\n    quoteMint: ix.keys[8].pubkey,\n    programId: ix.programId,\n    baseLotSize: decoded.baseLotSize as BN,\n    quoteLotSize: decoded.quoteLotSize as BN,\n    feeRateBps: decoded.feeRateBps,\n    quoteDustThreshold: decoded.quoteDustThreshold as BN,\n    vaultSignerNonce: decoded.vaultSignerNonce as BN,\n  };\n\n  return initializeMarket;\n}\n\nexport type NewOrder = {\n  market: PublicKey;\n  openOrders: PublicKey;\n  requestQueue: PublicKey;\n  payer: PublicKey;\n  owner: PublicKey;\n  baseVault: PublicKey;\n  quoteVault: PublicKey;\n  programId: PublicKey;\n  feeDiscountPubkey?: PublicKey;\n  side: Side;\n  limitPrice: BN;\n  maxQuantity: BN;\n  orderType: OrderType;\n  clientId: BN;\n};\n\nexport const NewOrderDecode = type({\n  side: Side,\n  limitPrice: BigNumFromString,\n  maxQuantity: BigNumFromString,\n  orderType: OrderType,\n  clientId: BigNumFromString,\n  feeDiscountPubkey: optional(PublicKeyFromString),\n});\n\nexport function decodeNewOrder(ix: TransactionInstruction): NewOrder {\n  const decoded = create(decodeInstruction(ix.data).newOrder, NewOrderDecode);\n\n  let newOrder: NewOrder = {\n    market: ix.keys[0].pubkey,\n    openOrders: ix.keys[1].pubkey,\n    requestQueue: ix.keys[2].pubkey,\n    payer: ix.keys[3].pubkey,\n    owner: ix.keys[4].pubkey,\n    baseVault: ix.keys[5].pubkey,\n    quoteVault: ix.keys[6].pubkey,\n    programId: ix.programId,\n    side: decoded.side as Side,\n    limitPrice: decoded.limitPrice as BN,\n    maxQuantity: decoded.maxQuantity as BN,\n    orderType: decoded.orderType as OrderType,\n    clientId: decoded.clientId as BN,\n  };\n\n  if (decoded.feeDiscountPubkey) {\n    newOrder.feeDiscountPubkey = decoded.feeDiscountPubkey;\n  }\n\n  return newOrder;\n}\n\nexport type MatchOrders = {\n  market: PublicKey;\n  requestQueue: PublicKey;\n  eventQueue: PublicKey;\n  bids: PublicKey;\n  asks: PublicKey;\n  baseVault: PublicKey;\n  quoteVault: PublicKey;\n  limit: number;\n  programId: PublicKey;\n};\n\nexport const MatchOrdersDecode = type({\n  limit: number(),\n});\n\nexport function decodeMatchOrders(ix: TransactionInstruction): MatchOrders {\n  const decoded = create(\n    decodeInstruction(ix.data).matchOrders,\n    MatchOrdersDecode\n  );\n\n  const matchOrders: MatchOrders = {\n    market: ix.keys[0].pubkey,\n    requestQueue: ix.keys[1].pubkey,\n    eventQueue: ix.keys[2].pubkey,\n    bids: ix.keys[3].pubkey,\n    asks: ix.keys[4].pubkey,\n    baseVault: ix.keys[5].pubkey,\n    quoteVault: ix.keys[6].pubkey,\n    programId: ix.programId,\n    limit: decoded.limit,\n  };\n\n  return matchOrders;\n}\n\nexport type ConsumeEvents = {\n  market: PublicKey;\n  eventQueue: PublicKey;\n  openOrdersAccounts: PublicKey[];\n  limit: number;\n  programId: PublicKey;\n};\n\nexport const ConsumeEventsDecode = type({\n  limit: number(),\n});\n\nexport function decodeConsumeEvents(ix: TransactionInstruction): ConsumeEvents {\n  const decoded = create(\n    decodeInstruction(ix.data).consumeEvents,\n    ConsumeEventsDecode\n  );\n\n  const consumeEvents: ConsumeEvents = {\n    openOrdersAccounts: ix.keys.slice(0, -2).map((k) => k.pubkey),\n    market: ix.keys[ix.keys.length - 2].pubkey,\n    eventQueue: ix.keys[ix.keys.length - 3].pubkey,\n    programId: ix.programId,\n    limit: decoded.limit,\n  };\n\n  return consumeEvents;\n}\n\nexport type CancelOrder = {\n  market: PublicKey;\n  openOrders: PublicKey;\n  owner: PublicKey;\n  requestQueue: PublicKey;\n  side: \"buy\" | \"sell\";\n  orderId: BN;\n  openOrdersSlot: number;\n  programId: PublicKey;\n};\n\nexport const CancelOrderDecode = type({\n  side: Side,\n  orderId: BigNumFromString,\n  openOrdersSlot: number(),\n});\n\nexport function decodeCancelOrder(ix: TransactionInstruction): CancelOrder {\n  const decoded = create(\n    decodeInstruction(ix.data).cancelOrder,\n    CancelOrderDecode\n  );\n\n  const cancelOrder: CancelOrder = {\n    market: ix.keys[0].pubkey,\n    openOrders: ix.keys[1].pubkey,\n    requestQueue: ix.keys[2].pubkey,\n    owner: ix.keys[3].pubkey,\n    programId: ix.programId,\n    openOrdersSlot: decoded.openOrdersSlot,\n    orderId: decoded.orderId as BN,\n    side: decoded.side,\n  };\n\n  return cancelOrder;\n}\n\nexport type CancelOrderByClientId = {\n  market: PublicKey;\n  openOrders: PublicKey;\n  owner: PublicKey;\n  requestQueue: PublicKey;\n  clientId: BN;\n  programId: PublicKey;\n};\n\nexport const CancelOrderByClientIdDecode = type({\n  clientId: BigNumFromString,\n});\n\nexport function decodeCancelOrderByClientId(\n  ix: TransactionInstruction\n): CancelOrderByClientId {\n  const decoded = create(\n    decodeInstruction(ix.data).cancelOrderByClientId,\n    CancelOrderByClientIdDecode\n  );\n\n  const cancelOrderByClientId: CancelOrderByClientId = {\n    market: ix.keys[0].pubkey,\n    openOrders: ix.keys[1].pubkey,\n    requestQueue: ix.keys[2].pubkey,\n    owner: ix.keys[3].pubkey,\n    programId: ix.programId,\n    clientId: decoded.clientId as BN,\n  };\n\n  return cancelOrderByClientId;\n}\n\nexport type SettleFunds = {\n  market: PublicKey;\n  openOrders: PublicKey;\n  owner: PublicKey;\n  baseVault: PublicKey;\n  quoteVault: PublicKey;\n  baseWallet: PublicKey;\n  quoteWallet: PublicKey;\n  vaultSigner: PublicKey;\n  programId: PublicKey;\n  referrerQuoteWallet?: PublicKey;\n};\n\nexport function decodeSettleFunds(ix: TransactionInstruction): SettleFunds {\n  let settleFunds: SettleFunds = {\n    market: ix.keys[0].pubkey,\n    openOrders: ix.keys[1].pubkey,\n    owner: ix.keys[2].pubkey,\n    baseVault: ix.keys[3].pubkey,\n    quoteVault: ix.keys[4].pubkey,\n    baseWallet: ix.keys[5].pubkey,\n    quoteWallet: ix.keys[6].pubkey,\n    vaultSigner: ix.keys[7].pubkey,\n    programId: ix.programId,\n  };\n\n  if (ix.keys.length > 9) {\n    settleFunds.referrerQuoteWallet = ix.keys[9].pubkey;\n  }\n\n  return settleFunds;\n}\n\nexport function isSerumInstruction(instruction: TransactionInstruction) {\n  return (\n    SERUM_PROGRAM_IDS.includes(instruction.programId.toBase58()) ||\n    MARKETS.some(\n      (market) =>\n        market.programId && market.programId.equals(instruction.programId)\n    )\n  );\n}\n\nexport function parseSerumInstructionKey(\n  instruction: TransactionInstruction\n): string {\n  const decoded = decodeInstruction(instruction.data);\n  const keys = Object.keys(decoded);\n\n  if (keys.length < 1) {\n    throw new Error(\"Serum instruction key not decoded\");\n  }\n\n  return keys[0];\n}\n\nconst SERUM_CODE_LOOKUP: { [key: number]: string } = {\n  0: \"Initialize Market\",\n  1: \"New Order\",\n  2: \"Match Orders\",\n  3: \"Consume Events\",\n  4: \"Cancel Order\",\n  5: \"Settle Funds\",\n  6: \"Cancel Order By Client Id\",\n  7: \"Disable Market\",\n  8: \"Sweep Fees\",\n  9: \"New Order\",\n  10: \"New Order\",\n  11: \"Cancel Order\",\n  12: \"Cancel Order By Client Id\",\n  13: \"Send Take\",\n  14: \"Close Open Orders\",\n  15: \"Init Open Orders\",\n};\n\nexport function parseSerumInstructionCode(instruction: TransactionInstruction) {\n  return instruction.data.slice(1, 5).readUInt32LE(0);\n}\n\nexport function parseSerumInstructionTitle(\n  instruction: TransactionInstruction\n): string {\n  const code = parseSerumInstructionCode(instruction);\n\n  if (!(code in SERUM_CODE_LOOKUP)) {\n    throw new Error(`Unrecognized Serum instruction code: ${code}`);\n  }\n\n  return SERUM_CODE_LOOKUP[code];\n}\n","/* eslint-disable @typescript-eslint/no-redeclare */\nimport { PublicKey, TransactionInstruction } from \"@velas/web3\";\nimport {\n  enums,\n  number,\n  type,\n  Infer,\n  create,\n  array,\n  string,\n  optional,\n  coerce,\n  any,\n} from \"superstruct\";\nimport {\n  Instruction,\n  decodeInstruction,\n  BONFIDABOT_PROGRAM_ID,\n} from \"@bonfida/bot\";\n\nexport const SERUM_DECODED_MAX = 6;\n\nexport type Side = Infer<typeof Side>;\nexport const Side = enums([0, 1]);\n\nexport type OrderType = Infer<typeof OrderType>;\nexport const OrderType = enums([0, 1, 2]);\n\nconst PublicKeyToString = coerce(string(), any(), (value) => value.toBase58());\n\nexport type InitializeBot = {\n  systemProgramAccount: PublicKey;\n  rentSysvarAccount: PublicKey;\n  splTokenProgramAccount: PublicKey;\n  poolAccount: PublicKey;\n  mintAccount: PublicKey;\n  payerAccount: PublicKey;\n\n  poolSeed: string;\n  maxNumberOfAsset: number | undefined | null;\n  numberOfMarkets: number;\n  programId: PublicKey;\n};\n\nexport const InitializeBotDecode = type({\n  poolSeed: string(),\n  maxNumberOfAsset: optional(number()),\n  numberOfMarkets: number(),\n});\n\nexport const decodeInitializeBot = (\n  ix: TransactionInstruction\n): InitializeBot => {\n  const decoded = create(\n    decodeInstruction(ix.data, Instruction.Init),\n    InitializeBotDecode\n  );\n  const initializeBot: InitializeBot = {\n    systemProgramAccount: ix.keys[0].pubkey,\n    rentSysvarAccount: ix.keys[1].pubkey,\n    splTokenProgramAccount: ix.keys[2].pubkey,\n    poolAccount: ix.keys[3].pubkey,\n    mintAccount: ix.keys[4].pubkey,\n    payerAccount: ix.keys[5].pubkey,\n    poolSeed: decoded.poolSeed,\n    maxNumberOfAsset: decoded.maxNumberOfAsset,\n    numberOfMarkets: decoded.numberOfMarkets,\n    programId: ix.programId,\n  };\n\n  return initializeBot;\n};\n\nexport type CreateBot = {\n  splTokenProgramId: PublicKey;\n  clockSysvarKey: PublicKey;\n  mintKey: PublicKey;\n  poolKey: PublicKey;\n  poolSeed: string;\n  targetPoolTokenKey: PublicKey;\n  serumProgramId: PublicKey;\n  signalProviderKey: PublicKey;\n  depositAmounts: number[] | undefined | null;\n  markets: string[] | undefined | null;\n  feeCollectionPeriod: number;\n  feeRatio: number;\n  programId: PublicKey;\n};\n\nexport const CreateBotDecode = type({\n  poolSeed: string(),\n  feeCollectionPeriod: number(),\n  feeRatio: number(),\n  depositAmounts: array(number()),\n  markets: array(PublicKeyToString),\n});\n\nexport const decodeCreateBot = (ix: TransactionInstruction): CreateBot => {\n  const decoded = create(\n    decodeInstruction(ix.data, Instruction.Create),\n    CreateBotDecode\n  );\n  const createBot: CreateBot = {\n    splTokenProgramId: ix.keys[0].pubkey,\n    clockSysvarKey: ix.keys[1].pubkey,\n    mintKey: ix.keys[4].pubkey,\n    poolKey: ix.keys[6].pubkey,\n    poolSeed: decoded.poolSeed,\n    targetPoolTokenKey: ix.keys[5].pubkey,\n    serumProgramId: ix.keys[2].pubkey,\n    signalProviderKey: ix.keys[3].pubkey,\n    depositAmounts: decoded.depositAmounts,\n    markets: decoded.markets,\n    feeCollectionPeriod: decoded.feeCollectionPeriod,\n    feeRatio: decoded.feeRatio,\n    programId: ix.programId,\n  };\n\n  return createBot;\n};\n\nexport type Deposit = {\n  splTokenProgramId: PublicKey;\n  programId: PublicKey;\n  sigProviderFeeReceiverKey: PublicKey;\n  bonfidaFeeReceiverKey: PublicKey;\n  bonfidaBuyAndBurnKey: PublicKey;\n  mintKey: PublicKey;\n  poolKey: PublicKey;\n  targetPoolTokenKey: PublicKey;\n  poolSeed: string;\n  poolTokenAmount: number;\n};\n\nexport const DepositDecode = type({\n  poolSeed: string(),\n  poolTokenAmount: number(),\n});\n\nexport const decodeDeposit = (ix: TransactionInstruction): Deposit => {\n  const decoded = create(\n    decodeInstruction(ix.data, Instruction.Deposit),\n    DepositDecode\n  );\n\n  const deposit: Deposit = {\n    splTokenProgramId: ix.keys[0].pubkey,\n    programId: ix.programId,\n    sigProviderFeeReceiverKey: ix.keys[3].pubkey,\n    bonfidaFeeReceiverKey: ix.keys[4].pubkey,\n    bonfidaBuyAndBurnKey: ix.keys[5].pubkey,\n    mintKey: ix.keys[1].pubkey,\n    poolKey: ix.keys[6].pubkey,\n    targetPoolTokenKey: ix.keys[2].pubkey,\n    poolSeed: decoded.poolSeed,\n    poolTokenAmount: decoded.poolTokenAmount,\n  };\n\n  return deposit;\n};\n\nexport type CreateOrder = {\n  programId: PublicKey;\n  signalProviderKey: PublicKey;\n  market: PublicKey;\n  payerPoolAssetKey: PublicKey;\n  openOrdersKey: PublicKey;\n  serumRequestQueue: PublicKey;\n  serumEventQueue: PublicKey;\n  serumMarketBids: PublicKey;\n  serumMarketAsks: PublicKey;\n  poolKey: PublicKey;\n  coinVaultKey: PublicKey;\n  pcVaultKey: PublicKey;\n  splTokenProgramId: PublicKey;\n  dexProgramKey: PublicKey;\n  rentProgramId: PublicKey;\n  srmReferrerKey: PublicKey | null | undefined;\n  poolSeed: string;\n  side: Side;\n  limitPrice: number;\n  ratioOfPoolAssetsToTrade: number;\n  orderType: OrderType;\n  clientId: number;\n  coinLotSize: number;\n  pcLotSize: number;\n  targetMint: string;\n};\n\nexport const CreateDecode = type({\n  poolSeed: string(),\n  side: Side,\n  limitPrice: number(),\n  ratioOfPoolAssetsToTrade: number(),\n  orderType: OrderType,\n  clientId: number(),\n  coinLotSize: number(),\n  pcLotSize: number(),\n  targetMint: string(),\n});\n\nexport const decodeCreateOrder = (ix: TransactionInstruction): CreateOrder => {\n  const decoded = create(\n    decodeInstruction(ix.data, Instruction.CreateOrder),\n    CreateDecode\n  );\n\n  const createOrder: CreateOrder = {\n    programId: ix.programId,\n    signalProviderKey: ix.keys[0].pubkey,\n    market: ix.keys[1].pubkey,\n    payerPoolAssetKey: ix.keys[2].pubkey,\n    openOrdersKey: ix.keys[3].pubkey,\n    serumRequestQueue: ix.keys[5].pubkey,\n    serumEventQueue: ix.keys[4].pubkey,\n    serumMarketBids: ix.keys[6].pubkey,\n    serumMarketAsks: ix.keys[7].pubkey,\n    poolKey: ix.keys[8].pubkey,\n    coinVaultKey: ix.keys[9].pubkey,\n    pcVaultKey: ix.keys[10].pubkey,\n    splTokenProgramId: ix.keys[11].pubkey,\n    dexProgramKey: ix.keys[13].pubkey,\n    rentProgramId: ix.keys[12].pubkey,\n    srmReferrerKey: ix.keys[14]?.pubkey,\n    // Miss maxQuantity\n    //\n    poolSeed: decoded.poolSeed,\n    side: decoded.side,\n    limitPrice: decoded.limitPrice,\n    ratioOfPoolAssetsToTrade: decoded.ratioOfPoolAssetsToTrade,\n    orderType: decoded.orderType,\n    clientId: decoded.clientId,\n    coinLotSize: decoded.coinLotSize,\n    pcLotSize: decoded.pcLotSize,\n    targetMint: decoded.targetMint,\n  };\n\n  return createOrder;\n};\n\nexport type CancelOrder = {\n  programId: PublicKey;\n  signalProviderKey: PublicKey;\n  market: PublicKey;\n  openOrdersKey: PublicKey;\n  serumEventQueue: PublicKey;\n  serumMarketBids: PublicKey;\n  serumMarketAsks: PublicKey;\n  poolKey: PublicKey;\n  dexProgramKey: PublicKey;\n  poolSeed: string;\n  side: Side;\n  orderId: number;\n};\n\nexport const CancelOrderDecode = type({\n  poolSeed: string(),\n  side: Side,\n  orderId: number(),\n});\n\nexport const decodeCancelOrder = (ix: TransactionInstruction): CancelOrder => {\n  const decoded = create(\n    decodeInstruction(ix.data, Instruction.CancelOrder),\n    CancelOrderDecode\n  );\n\n  const cancelOrder: CancelOrder = {\n    programId: ix.programId,\n    signalProviderKey: ix.keys[0].pubkey,\n    market: ix.keys[1].pubkey,\n    openOrdersKey: ix.keys[2].pubkey,\n    serumEventQueue: ix.keys[3].pubkey,\n    serumMarketBids: ix.keys[4].pubkey,\n    serumMarketAsks: ix.keys[5].pubkey,\n    poolKey: ix.keys[6].pubkey,\n    dexProgramKey: ix.keys[7].pubkey,\n    //\n    poolSeed: decoded.poolSeed,\n    side: decoded.side,\n    orderId: decoded.orderId,\n  };\n  return cancelOrder;\n};\n\nexport type SettleFunds = {\n  programId: PublicKey;\n  market: PublicKey;\n  openOrdersKey: PublicKey;\n  poolKey: PublicKey;\n  poolMintKey: PublicKey;\n  coinVaultKey: PublicKey;\n  pcVaultKey: PublicKey;\n  coinPoolAssetKey: PublicKey;\n  pcPoolAssetKey: PublicKey;\n  vaultSignerKey: PublicKey;\n  splTokenProgramId: PublicKey;\n  dexProgramKey: PublicKey;\n  srmReferrerKey: PublicKey | null;\n  poolSeed: string;\n};\n\nexport const SettleFundsDecode = type({\n  poolSeed: string(),\n  pcIndex: number(),\n  orderId: optional(number()),\n});\n\nexport const decodeSettleFunds = (ix: TransactionInstruction): SettleFunds => {\n  const decoded = create(\n    decodeInstruction(ix.data, Instruction.SettleFunds),\n    SettleFundsDecode\n  );\n\n  const settleFunds: SettleFunds = {\n    programId: ix.programId,\n    market: ix.keys[0].pubkey,\n    openOrdersKey: ix.keys[1].pubkey,\n    poolKey: ix.keys[2].pubkey,\n    poolMintKey: ix.keys[3].pubkey,\n    coinVaultKey: ix.keys[4].pubkey,\n    pcVaultKey: ix.keys[5].pubkey,\n    coinPoolAssetKey: ix.keys[6].pubkey,\n    pcPoolAssetKey: ix.keys[7].pubkey,\n    vaultSignerKey: ix.keys[8].pubkey,\n    splTokenProgramId: ix.keys[9].pubkey,\n    dexProgramKey: ix.keys[10].pubkey,\n    srmReferrerKey: ix.keys[11]?.pubkey,\n    poolSeed: decoded.poolSeed,\n  };\n  return settleFunds;\n};\n\nexport type Redeem = {\n  splTokenProgramId: PublicKey;\n  programId: PublicKey;\n  mintKey: PublicKey;\n  poolKey: PublicKey;\n  sourcePoolTokenOwnerKey: PublicKey;\n  sourcePoolTokenKey: PublicKey;\n  poolSeed: string;\n  poolTokenAmount: number;\n};\n\nexport const RedeemDecode = type({\n  poolSeed: string(),\n  poolTokenAmount: number(),\n});\n\nexport const decodeRedeem = (ix: TransactionInstruction): Redeem => {\n  const decoded = create(\n    decodeInstruction(ix.data, Instruction.Redeem),\n    RedeemDecode\n  );\n\n  const redeem: Redeem = {\n    programId: ix.programId,\n    splTokenProgramId: ix.keys[0].pubkey,\n    mintKey: ix.keys[2].pubkey,\n    poolKey: ix.keys[5].pubkey,\n    sourcePoolTokenOwnerKey: ix.keys[3].pubkey,\n    sourcePoolTokenKey: ix.keys[4].pubkey,\n    poolSeed: decoded.poolSeed,\n    poolTokenAmount: decoded.poolTokenAmount,\n  };\n\n  return redeem;\n};\n\nexport type CollectFees = {\n  splTokenProgramId: PublicKey;\n  clockSysvarKey: PublicKey;\n  programId: PublicKey;\n  poolKey: PublicKey;\n  mintKey: PublicKey;\n  signalProviderPoolTokenKey: PublicKey;\n  bonfidaFeePoolTokenKey: PublicKey;\n  bonfidaBnBPTKey: PublicKey;\n  poolSeed: string;\n};\n\nexport const CollectFeesDecode = type({\n  poolSeed: string(),\n});\n\nexport const decodeCollectFees = (ix: TransactionInstruction): CollectFees => {\n  const decoded = create(\n    decodeInstruction(ix.data, Instruction.CollectFees),\n    CollectFeesDecode\n  );\n\n  const collectFees: CollectFees = {\n    programId: ix.programId,\n    splTokenProgramId: ix.keys[0].pubkey,\n    clockSysvarKey: ix.keys[1].pubkey,\n    poolKey: ix.keys[2].pubkey,\n    mintKey: ix.keys[3].pubkey,\n    signalProviderPoolTokenKey: ix.keys[4].pubkey,\n    bonfidaFeePoolTokenKey: ix.keys[5].pubkey,\n    bonfidaBnBPTKey: ix.keys[6].pubkey,\n    poolSeed: decoded.poolSeed,\n  };\n\n  return collectFees;\n};\n\nexport const isBonfidaBotInstruction = (\n  instruction: TransactionInstruction\n) => {\n  return instruction.programId.equals(BONFIDABOT_PROGRAM_ID);\n};\n\nexport const INSTRUCTION_LOOKUP: { [key: number]: string } = {\n  0: \"Initialize Bot\",\n  1: \"Create Bot\",\n  2: \"Deposit\",\n  3: \"Create Order\",\n  4: \"Cancel Order\",\n  5: \"Settle Funds\",\n  6: \"Redeem\",\n  7: \"Collect Fees\",\n};\n\nexport const parseBonfidaBotInstructionTitle = (\n  instruction: TransactionInstruction\n): string => {\n  const code = instruction.data[0];\n\n  if (!(code in INSTRUCTION_LOOKUP)) {\n    throw new Error(`Unrecognized Bonfida Bot instruction code: ${code}`);\n  }\n  return INSTRUCTION_LOOKUP[code];\n};\n","import React from \"react\";\nimport {\n  Connection,\n  TransactionSignature,\n  Transaction,\n  Message,\n} from \"@velas/web3\";\nimport { useCluster, Cluster } from \"../cluster\";\nimport * as Cache from \"providers/cache\";\nimport { ActionType, FetchStatus } from \"providers/cache\";\nimport { reportError } from \"utils/sentry\";\n\nexport interface Details {\n  raw?: {\n    transaction: Transaction;\n    message: Message;\n    signatures: string[];\n  } | null;\n}\n\ntype State = Cache.State<Details>;\ntype Dispatch = Cache.Dispatch<Details>;\n\nexport const StateContext = React.createContext<State | undefined>(undefined);\nexport const DispatchContext = React.createContext<Dispatch | undefined>(\n  undefined\n);\n\ntype DetailsProviderProps = { children: React.ReactNode };\nexport function RawDetailsProvider({ children }: DetailsProviderProps) {\n  const { url } = useCluster();\n  const [state, dispatch] = Cache.useReducer<Details>(url);\n\n  React.useEffect(() => {\n    dispatch({ type: ActionType.Clear, url });\n  }, [dispatch, url]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        {children}\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nexport function useRawTransactionDetails(\n  signature: TransactionSignature\n): Cache.CacheEntry<Details> | undefined {\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(\n      `useRawTransactionDetails must be used within a TransactionsProvider`\n    );\n  }\n\n  return context.entries[signature];\n}\n\nasync function fetchRawTransaction(\n  dispatch: Dispatch,\n  signature: TransactionSignature,\n  cluster: Cluster,\n  url: string\n) {\n  let fetchStatus;\n  try {\n    const response = await new Connection(url).getTransaction(signature);\n    fetchStatus = FetchStatus.Fetched;\n\n    let data: Details = { raw: null };\n    if (response !== null) {\n      const { message, signatures } = response.transaction;\n      data = {\n        raw: {\n          message,\n          signatures,\n          transaction: Transaction.populate(message, signatures),\n        },\n      };\n    }\n\n    dispatch({\n      type: ActionType.Update,\n      status: fetchStatus,\n      key: signature,\n      data,\n      url,\n    });\n  } catch (error) {\n    if (cluster !== Cluster.Custom) {\n      reportError(error, { url });\n    }\n  }\n}\n\nexport function useFetchRawTransaction() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(\n      `useFetchRawTransaction must be used within a TransactionsProvider`\n    );\n  }\n\n  const { cluster, url } = useCluster();\n  return React.useCallback(\n    (signature: TransactionSignature) => {\n      url && fetchRawTransaction(dispatch, signature, cluster, url);\n    },\n    [dispatch, cluster, url]\n  );\n}\n","import React from \"react\";\nimport {\n  TransactionSignature,\n  Connection,\n  SignatureResult,\n  TransactionConfirmationStatus,\n} from \"@velas/web3\";\nimport { useCluster, Cluster } from \"../cluster\";\nimport { DetailsProvider } from \"./parsed\";\nimport { RawDetailsProvider } from \"./raw\";\nimport * as Cache from \"providers/cache\";\nimport { ActionType, FetchStatus } from \"providers/cache\";\nimport { reportError } from \"utils/sentry\";\nexport { useTransactionDetails } from \"./parsed\";\n\nexport type Confirmations = number | \"max\";\n\nexport type Timestamp = number | \"unavailable\";\n\nexport interface TransactionStatusInfo {\n  slot: number;\n  result: SignatureResult;\n  timestamp: Timestamp;\n  confirmations: Confirmations;\n  confirmationStatus?: TransactionConfirmationStatus;\n}\n\nexport interface TransactionStatus {\n  signature: TransactionSignature;\n  info: TransactionStatusInfo | null;\n}\n\ntype State = Cache.State<TransactionStatus>;\ntype Dispatch = Cache.Dispatch<TransactionStatus>;\n\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype TransactionsProviderProps = { children: React.ReactNode };\nexport function TransactionsProvider({ children }: TransactionsProviderProps) {\n  const { url } = useCluster();\n  const [state, dispatch] = Cache.useReducer<TransactionStatus>(url);\n\n  // Clear accounts cache whenever cluster is changed\n  React.useEffect(() => {\n    dispatch({ type: ActionType.Clear, url });\n  }, [dispatch, url]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        <RawDetailsProvider>\n          <DetailsProvider>{children}</DetailsProvider>\n        </RawDetailsProvider>\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nexport async function fetchTransactionStatus(\n  dispatch: Dispatch,\n  signature: TransactionSignature,\n  cluster: Cluster,\n  url: string\n) {\n  dispatch({\n    type: ActionType.Update,\n    key: signature,\n    status: FetchStatus.Fetching,\n    url,\n  });\n\n  let fetchStatus;\n  let data;\n  try {\n    const connection = new Connection(url);\n    const { value } = await connection.getSignatureStatus(signature, {\n      searchTransactionHistory: true,\n    });\n\n    let info = null;\n    if (value !== null) {\n      let confirmations: Confirmations;\n      if (typeof value.confirmations === \"number\") {\n        confirmations = value.confirmations;\n      } else {\n        confirmations = \"max\";\n      }\n\n      let blockTime = null;\n      try {\n        blockTime = await connection.getBlockTime(value.slot);\n      } catch (error) {\n        if (cluster === Cluster.MainnetBeta && confirmations === \"max\") {\n          reportError(error, { slot: `${value.slot}` });\n        }\n      }\n      let timestamp: Timestamp = blockTime !== null ? blockTime : \"unavailable\";\n\n      info = {\n        slot: value.slot,\n        timestamp,\n        confirmations,\n        confirmationStatus: value.confirmationStatus,\n        result: { err: value.err },\n      };\n    }\n    data = { signature, info };\n    fetchStatus = FetchStatus.Fetched;\n  } catch (error) {\n    if (cluster !== Cluster.Custom) {\n      reportError(error, { url });\n    }\n    fetchStatus = FetchStatus.FetchFailed;\n  }\n\n  dispatch({\n    type: ActionType.Update,\n    key: signature,\n    status: fetchStatus,\n    data,\n    url,\n  });\n}\n\nexport function useTransactions() {\n  const context = React.useContext(StateContext);\n  if (!context) {\n    throw new Error(\n      `useTransactions must be used within a TransactionsProvider`\n    );\n  }\n  return context;\n}\n\nexport function useTransactionStatus(\n  signature: TransactionSignature | undefined\n): Cache.CacheEntry<TransactionStatus> | undefined {\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(\n      `useTransactionStatus must be used within a TransactionsProvider`\n    );\n  }\n\n  if (signature === undefined) {\n    return undefined;\n  }\n\n  return context.entries[signature];\n}\n\nexport function useFetchTransactionStatus() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(\n      `useFetchTransactionStatus must be used within a TransactionsProvider`\n    );\n  }\n\n  const { cluster, url } = useCluster();\n  return React.useCallback(\n    (signature: TransactionSignature) => {\n      fetchTransactionStatus(dispatch, signature, cluster, url);\n    },\n    [dispatch, cluster, url]\n  );\n}\n","import React, { useState, ReactNode } from \"react\";\n\ntype Props = {\n  text: string;\n  children: ReactNode;\n  bottom?: boolean;\n  right?: boolean;\n};\n\ntype State = \"hide\" | \"show\";\n\nfunction Popover({\n  state,\n  bottom,\n  right,\n  text,\n}: {\n  state: State;\n  bottom?: boolean;\n  right?: boolean;\n  text: string;\n}) {\n  if (state === \"hide\") return null;\n  return (\n    <div\n      className={`popover bs-popover-${bottom ? \"bottom\" : \"top\"}${\n        right ? \" right\" : \"\"\n      } show`}\n    >\n      <div className={`arrow${right ? \" right\" : \"\"}`} />\n      <div className=\"popover-body\">{text}</div>\n    </div>\n  );\n}\n\nexport function InfoTooltip({ bottom, right, text, children }: Props) {\n  const [state, setState] = useState<State>(\"hide\");\n\n  const justify = right ? \"end\" : \"start\";\n  return (\n    <div\n      className=\"popover-container w-100\"\n      onMouseOver={() => setState(\"show\")}\n      onMouseOut={() => setState(\"hide\")}\n    >\n      <div className={`d-flex align-items-center justify-content-${justify}`}>\n        {children}\n        <span className=\"fe fe-help-circle ml-2\"></span>\n      </div>\n      <Popover bottom={bottom} right={right} state={state} text={text} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { BigNumber } from \"bignumber.js\";\nimport { SolBalance } from \"utils\";\n\nexport function BalanceDelta({\n  delta,\n  isSol = false,\n}: {\n  delta: BigNumber;\n  isSol?: boolean;\n}) {\n  let sols;\n\n  if (isSol) {\n    sols = <SolBalance lamports={delta.toNumber()} />;\n  }\n\n  if (delta.gt(0)) {\n    return (\n      <span className=\"badge badge-soft-success\">\n        +{isSol ? sols : delta.toString()}\n      </span>\n    );\n  } else if (delta.lt(0)) {\n    return (\n      <span className=\"badge badge-soft-warning\">\n        {isSol ? <>-{sols}</> : delta.toString()}\n      </span>\n    );\n  }\n\n  return <span className=\"badge badge-soft-secondary\">0</span>;\n}\n","import React from \"react\";\nimport {\n  ParsedMessageAccount,\n  PublicKey,\n  TokenAmount,\n  TokenBalance,\n} from \"@velas/web3\";\nimport { BigNumber } from \"bignumber.js\";\nimport { Address } from \"components/common/Address\";\nimport { BalanceDelta } from \"components/common/BalanceDelta\";\nimport { SignatureProps } from \"pages/TransactionDetailsPage\";\nimport { useTransactionDetails } from \"providers/transactions\";\nimport { useTokenRegistry } from \"providers/mints/token-registry\";\n\nexport type TokenBalanceRow = {\n  account: PublicKey;\n  mint: string;\n  balance: TokenAmount;\n  delta: BigNumber;\n  accountIndex: number;\n};\n\nexport function TokenBalancesCard({ signature }: SignatureProps) {\n  const details = useTransactionDetails(signature);\n  const { tokenRegistry } = useTokenRegistry();\n\n  if (!details) {\n    return null;\n  }\n\n  const preTokenBalances = details.data?.transaction?.meta?.preTokenBalances;\n  const postTokenBalances = details.data?.transaction?.meta?.postTokenBalances;\n\n  const accountKeys =\n    details.data?.transaction?.transaction.message.accountKeys;\n\n  if (!preTokenBalances || !postTokenBalances || !accountKeys) {\n    return null;\n  }\n\n  const rows = generateTokenBalanceRows(\n    preTokenBalances,\n    postTokenBalances,\n    accountKeys\n  );\n\n  if (rows.length < 1) {\n    return null;\n  }\n\n  const accountRows = rows.map(({ account, delta, balance, mint }) => {\n    const key = account.toBase58() + mint;\n    const units = tokenRegistry.get(mint)?.symbol || \"tokens\";\n\n    return (\n      <tr key={key}>\n        <td>\n          <Address pubkey={account} link />\n        </td>\n        <td>\n          <Address pubkey={new PublicKey(mint)} link />\n        </td>\n        <td>\n          <BalanceDelta delta={delta} />\n        </td>\n        <td>\n          {balance.uiAmountString} {units}\n        </td>\n      </tr>\n    );\n  });\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title\">Token Balances</h3>\n      </div>\n      <div className=\"table-responsive mb-0\">\n        <table className=\"table table-sm table-nowrap card-table\">\n          <thead>\n            <tr>\n              <th className=\"text-muted\">Address</th>\n              <th className=\"text-muted\">Token</th>\n              <th className=\"text-muted\">Change</th>\n              <th className=\"text-muted\">Post Balance</th>\n            </tr>\n          </thead>\n          <tbody className=\"list\">{accountRows}</tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nexport function generateTokenBalanceRows(\n  preTokenBalances: TokenBalance[],\n  postTokenBalances: TokenBalance[],\n  accounts: ParsedMessageAccount[]\n): TokenBalanceRow[] {\n  let preBalanceMap: { [index: number]: TokenBalance } = {};\n\n  preTokenBalances.forEach(\n    (balance) => (preBalanceMap[balance.accountIndex] = balance)\n  );\n\n  let rows: TokenBalanceRow[] = [];\n\n  postTokenBalances.forEach(({ uiTokenAmount, accountIndex, mint }) => {\n    const preBalance = preBalanceMap[accountIndex];\n    const account = accounts[accountIndex].pubkey;\n\n    if (!uiTokenAmount.uiAmountString) {\n      // uiAmount deprecation\n      return;\n    }\n\n    // case where mint changes\n    if (preBalance && preBalance.mint !== mint) {\n      if (!preBalance.uiTokenAmount.uiAmountString) {\n        // uiAmount deprecation\n        return;\n      }\n\n      rows.push({\n        account: accounts[accountIndex].pubkey,\n        accountIndex,\n        balance: {\n          decimals: preBalance.uiTokenAmount.decimals,\n          amount: \"0\",\n          uiAmount: 0,\n        },\n        delta: new BigNumber(-preBalance.uiTokenAmount.uiAmountString),\n        mint: preBalance.mint,\n      });\n\n      rows.push({\n        account: accounts[accountIndex].pubkey,\n        accountIndex,\n        balance: uiTokenAmount,\n        delta: new BigNumber(uiTokenAmount.uiAmountString),\n        mint: mint,\n      });\n      return;\n    }\n\n    let delta;\n\n    if (preBalance) {\n      if (!preBalance.uiTokenAmount.uiAmountString) {\n        // uiAmount deprecation\n        return;\n      }\n\n      delta = new BigNumber(uiTokenAmount.uiAmountString).minus(\n        preBalance.uiTokenAmount.uiAmountString\n      );\n    } else {\n      delta = new BigNumber(uiTokenAmount.uiAmountString);\n    }\n\n    rows.push({\n      account,\n      mint,\n      balance: uiTokenAmount,\n      delta,\n      accountIndex,\n    });\n  });\n\n  return rows.sort((a, b) => a.accountIndex - b.accountIndex);\n}\n","import React from \"react\";\nimport { TransactionInstruction } from \"@velas/web3\";\nimport { Address } from \"components/common/Address\";\n\nexport function RawDetails({ ix }: { ix: TransactionInstruction }) {\n  const data = ix.data.toString(\"hex\");\n  return (\n    <>\n      {ix.keys.map(({ pubkey, isSigner, isWritable }, keyIndex) => (\n        <tr key={keyIndex}>\n          <td>\n            <div className=\"mr-2 d-md-inline\">Account #{keyIndex + 1}</div>\n            {!isWritable && (\n              <span className=\"badge badge-soft-info mr-1\">Readonly</span>\n            )}\n            {isSigner && (\n              <span className=\"badge badge-soft-info mr-1\">Signer</span>\n            )}\n          </td>\n          <td className=\"text-lg-right\">\n            <Address pubkey={pubkey} alignRight link />\n          </td>\n        </tr>\n      ))}\n\n      <tr>\n        <td>\n          Instruction Data <span className=\"text-muted\">(Hex)</span>\n        </td>\n        <td className=\"text-lg-right\">\n          <pre className=\"d-inline-block text-left mb-0 data-wrap\">{data}</pre>\n        </td>\n      </tr>\n    </>\n  );\n}\n","import React from \"react\";\nimport { ParsedInstruction } from \"@velas/web3\";\n\nexport function RawParsedDetails({\n  ix,\n  children,\n}: {\n  ix: ParsedInstruction;\n  children?: React.ReactNode;\n}) {\n  return (\n    <>\n      {children}\n\n      <tr>\n        <td>\n          Instruction Data <span className=\"text-muted\">(JSON)</span>\n        </td>\n        <td className=\"text-lg-right\">\n          <pre className=\"d-inline-block text-left json-wrap\">\n            {JSON.stringify(ix.parsed, null, 2)}\n          </pre>\n        </td>\n      </tr>\n    </>\n  );\n}\n","import React, { useContext } from \"react\";\nimport {\n  TransactionInstruction,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@velas/web3\";\nimport { RawDetails } from \"./RawDetails\";\nimport { RawParsedDetails } from \"./RawParsedDetails\";\nimport { SignatureContext } from \"../../pages/TransactionDetailsPage\";\nimport {\n  useFetchRawTransaction,\n  useRawTransactionDetails,\n} from \"providers/transactions/raw\";\nimport { Address } from \"components/common/Address\";\n\ntype InstructionProps = {\n  title: string;\n  children?: React.ReactNode;\n  result: SignatureResult;\n  index: number;\n  ix: TransactionInstruction | ParsedInstruction;\n  defaultRaw?: boolean;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n};\n\nexport function InstructionCard({\n  title,\n  children,\n  result,\n  index,\n  ix,\n  defaultRaw,\n  innerCards,\n  childIndex,\n}: InstructionProps) {\n  const [resultClass] = ixResult(result, index);\n  const [showRaw, setShowRaw] = React.useState(defaultRaw || false);\n  const signature = useContext(SignatureContext);\n  const rawDetails = useRawTransactionDetails(signature);\n\n  let raw: TransactionInstruction | undefined = undefined;\n  if (rawDetails && childIndex === undefined) {\n    raw = rawDetails?.data?.raw?.transaction.instructions[index];\n  }\n\n  const fetchRaw = useFetchRawTransaction();\n  const fetchRawTrigger = () => fetchRaw(signature);\n\n  const rawClickHandler = () => {\n    if (!defaultRaw && !showRaw && !raw) {\n      fetchRawTrigger();\n    }\n\n    return setShowRaw((r) => !r);\n  };\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title mb-0 d-flex align-items-center\">\n          <span className={`badge badge-soft-${resultClass} mr-2`}>\n            #{index + 1}\n            {childIndex !== undefined ? `.${childIndex + 1}` : \"\"}\n          </span>\n          {title}\n        </h3>\n\n        <button\n          disabled={defaultRaw}\n          className={`btn btn-sm d-flex ${\n            showRaw ? \"btn-black active\" : \"btn-white\"\n          }`}\n          onClick={rawClickHandler}\n        >\n          <span className=\"fe fe-code mr-1\"></span>\n          Raw\n        </button>\n      </div>\n      <div className=\"table-responsive mb-0\">\n        <table className=\"table table-sm table-nowrap card-table\">\n          <tbody className=\"list\">\n            {showRaw ? (\n              <>\n                <tr>\n                  <td>Program</td>\n                  <td className=\"text-lg-right\">\n                    <Address pubkey={ix.programId} alignRight link />\n                  </td>\n                </tr>\n                {\"parsed\" in ix ? (\n                  <RawParsedDetails ix={ix}>\n                    {raw ? <RawDetails ix={raw} /> : null}\n                  </RawParsedDetails>\n                ) : (\n                  <RawDetails ix={ix} />\n                )}\n              </>\n            ) : (\n              children\n            )}\n            {innerCards && innerCards.length > 0 && (\n              <tr>\n                <td colSpan={2}>\n                  Inner Instructions\n                  <div className=\"inner-cards\">{innerCards}</div>\n                </td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nfunction ixResult(result: SignatureResult, index: number) {\n  if (result.err) {\n    const err = result.err as any;\n    const ixError = err[\"InstructionError\"];\n    if (ixError && Array.isArray(ixError)) {\n      const [errorIndex, error] = ixError;\n      if (Number.isInteger(errorIndex) && errorIndex === index) {\n        return [\"warning\", `Error: ${JSON.stringify(error)}`];\n      }\n    }\n    return [\"dark\"];\n  }\n  return [\"success\"];\n}\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport { enums, number, type, string, Infer } from \"superstruct\";\nimport { PublicKeyFromString } from \"validators/pubkey\";\n\nexport type WriteInfo = Infer<typeof WriteInfo>;\nexport const WriteInfo = type({\n  account: PublicKeyFromString,\n  bytes: string(),\n  offset: number(),\n});\n\nexport type FinalizeInfo = Infer<typeof FinalizeInfo>;\nexport const FinalizeInfo = type({\n  account: PublicKeyFromString,\n});\n\nexport type BpfLoaderInstructionType = Infer<typeof BpfLoaderInstructionType>;\nexport const BpfLoaderInstructionType = enums([\"write\", \"finalize\"]);\n","import React from \"react\";\nimport {\n  TransactionInstruction,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@velas/web3\";\nimport { InstructionCard } from \"./InstructionCard\";\n\nexport function UnknownDetailsCard({\n  ix,\n  index,\n  result,\n  innerCards,\n  childIndex,\n}: {\n  ix: TransactionInstruction | ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Unknown\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n      defaultRaw\n    />\n  );\n}\n","import React from \"react\";\nimport {\n  SignatureResult,\n  ParsedInstruction,\n  ParsedTransaction,\n  BPF_LOADER_PROGRAM_ID,\n} from \"@velas/web3\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { create } from \"superstruct\";\nimport { ParsedInfo } from \"validators\";\nimport { WriteInfo, FinalizeInfo } from \"./types\";\nimport { reportError } from \"utils/sentry\";\nimport { UnknownDetailsCard } from \"../UnknownDetailsCard\";\nimport { Address } from \"components/common/Address\";\nimport { wrap } from \"utils\";\n\ntype DetailsProps = {\n  tx: ParsedTransaction;\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n};\n\nexport function BpfLoaderDetailsCard(props: DetailsProps) {\n  try {\n    const parsed = create(props.ix.parsed, ParsedInfo);\n\n    switch (parsed.type) {\n      case \"write\": {\n        const info = create(parsed.info, WriteInfo);\n        return <BpfLoaderWriteDetailsCard info={info} {...props} />;\n      }\n      case \"finalize\": {\n        const info = create(parsed.info, FinalizeInfo);\n        return <BpfLoaderFinalizeDetailsCard info={info} {...props} />;\n      }\n      default:\n        return <UnknownDetailsCard {...props} />;\n    }\n  } catch (error) {\n    reportError(error, {\n      signature: props.tx.signatures[0],\n    });\n    return <UnknownDetailsCard {...props} />;\n  }\n}\n\ntype Props<T> = {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: T;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n};\n\nexport function BpfLoaderWriteDetailsCard(props: Props<WriteInfo>) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n  const bytes = wrap(info.bytes, 50);\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"BPF Loader 2: Write\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={BPF_LOADER_PROGRAM_ID} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Account</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.account} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>\n          Bytes <span className=\"text-muted\">(Base 64)</span>\n        </td>\n        <td className=\"text-lg-right\">\n          <pre className=\"d-inline-block text-left mb-0\">{bytes}</pre>\n        </td>\n      </tr>\n\n      <tr>\n        <td>Offset</td>\n        <td className=\"text-lg-right\">{info.offset}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n\nexport function BpfLoaderFinalizeDetailsCard(props: Props<FinalizeInfo>) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"BPF Loader 2: Finalize\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={BPF_LOADER_PROGRAM_ID} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Account</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.account} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { ParsedInstruction, SignatureResult } from \"@velas/web3\";\nimport { InstructionCard } from \"./InstructionCard\";\nimport { wrap } from \"utils\";\nimport { Address } from \"components/common/Address\";\n\nexport function MemoDetailsCard({\n  ix,\n  index,\n  result,\n  innerCards,\n  childIndex,\n}: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const data = wrap(ix.parsed, 50);\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Memo\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={ix.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Data (UTF-8)</td>\n        <td className=\"text-lg-right\">\n          <pre className=\"d-inline-block text-left mb-0\">{data}</pre>\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@velas/web3\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { NewOrder } from \"./types\";\n\nexport function NewOrderDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: NewOrder;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Serum: New Order\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Market</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.market} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Open Orders</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.openOrders} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Request Queue</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.requestQueue} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Payer</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.payer} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Owner</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.owner} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Base Vault</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.baseVault} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Quote Vault</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.quoteVault} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Side</td>\n        <td className=\"text-lg-right\">{info.side}</td>\n      </tr>\n\n      <tr>\n        <td>Order Type</td>\n        <td className=\"text-lg-right\">{info.orderType}</td>\n      </tr>\n\n      <tr>\n        <td>Limit Price</td>\n        <td className=\"text-lg-right\">{info.limitPrice.toString(10)}</td>\n      </tr>\n\n      <tr>\n        <td>Max Quantity</td>\n        <td className=\"text-lg-right\">{info.maxQuantity.toString(10)}</td>\n      </tr>\n\n      <tr>\n        <td>Client Id</td>\n        <td className=\"text-lg-right\">{info.clientId.toString(10)}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@velas/web3\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { MatchOrders } from \"./types\";\n\nexport function MatchOrdersDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: MatchOrders;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Serum: Match Orders\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Market</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.market} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Request Queue</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.requestQueue} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Event Queue</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.eventQueue} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Bids</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.bids} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Asks</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.asks} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Base Vault</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.baseVault} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Quote Vault</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.quoteVault} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Limit</td>\n        <td className=\"text-lg-right\">{info.limit}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@velas/web3\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { InitializeMarket } from \"./types\";\n\nexport function InitializeMarketDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: InitializeMarket;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Serum: Initialize Market\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Market</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.market} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Request Queue</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.requestQueue} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Event Queue</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.eventQueue} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Bids</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.bids} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Asks</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.asks} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Base Vault</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.baseVault} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Quote Vault</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.quoteVault} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Base Mint</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.baseMint} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Quote Mint</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.quoteMint} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Base Lot Size</td>\n        <td className=\"text-lg-right\">{info.baseLotSize.toString(10)}</td>\n      </tr>\n\n      <tr>\n        <td>Quote Lot Size</td>\n        <td className=\"text-lg-right\">{info.quoteLotSize.toString(10)}</td>\n      </tr>\n\n      <tr>\n        <td>Fee Rate Bps</td>\n        <td className=\"text-lg-right\">{info.feeRateBps}</td>\n      </tr>\n\n      <tr>\n        <td>Quote Dust Threshold</td>\n        <td className=\"text-lg-right\">\n          {info.quoteDustThreshold.toString(10)}\n        </td>\n      </tr>\n\n      <tr>\n        <td>Vault Signer Nonce</td>\n        <td className=\"text-lg-right\">{info.vaultSignerNonce.toString(10)}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@velas/web3\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { ConsumeEvents } from \"./types\";\n\nexport function ConsumeEventsDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: ConsumeEvents;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Serum: Consume Events\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Market</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.market} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Event Queue</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.eventQueue} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Open Orders Accounts</td>\n        <td className=\"text-lg-right\">\n          {info.openOrdersAccounts.map((account, index) => {\n            return <Address pubkey={account} key={index} alignRight link />;\n          })}\n        </td>\n      </tr>\n\n      <tr>\n        <td>Limit</td>\n        <td className=\"text-lg-right\">{info.limit}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@velas/web3\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { CancelOrder } from \"./types\";\n\nexport function CancelOrderDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: CancelOrder;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Serum: Cancel Order\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Market</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.market} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Open Orders</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.openOrders} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Request Queue</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.requestQueue} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Owner</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.owner} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Side</td>\n        <td className=\"text-lg-right\">{info.side}</td>\n      </tr>\n\n      <tr>\n        <td>Open Orders Slot</td>\n        <td className=\"text-lg-right\">{info.openOrdersSlot}</td>\n      </tr>\n\n      <tr>\n        <td>Order Id</td>\n        <td className=\"text-lg-right\">{info.orderId.toString(10)}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@velas/web3\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { CancelOrderByClientId } from \"./types\";\n\nexport function CancelOrderByClientIdDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: CancelOrderByClientId;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Serum: Cancel Order By Client Id\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Market</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.market} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Open Orders</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.openOrders} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Request Queue</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.requestQueue} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Owner</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.owner} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Client Id</td>\n        <td className=\"text-lg-right\">{info.clientId.toString(10)}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@velas/web3\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { SettleFunds } from \"./types\";\n\nexport function SettleFundsDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: SettleFunds;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Serum: Settle Funds\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Market</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.market} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Open Orders</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.openOrders} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Owner</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.owner} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Base Vault</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.baseVault} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Quote Vault</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.quoteVault} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Base Wallet</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.baseWallet} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Quote Wallet</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.quoteWallet} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Vault Signer</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.vaultSigner} alignRight link />\n        </td>\n      </tr>\n\n      {info.referrerQuoteWallet && (\n        <tr>\n          <td>Referrer Quote Wallet</td>\n          <td className=\"text-lg-right\">\n            <Address pubkey={info.referrerQuoteWallet} alignRight link />\n          </td>\n        </tr>\n      )}\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { TransactionInstruction, SignatureResult } from \"@velas/web3\";\nimport { InstructionCard } from \"./InstructionCard\";\nimport { useCluster } from \"providers/cluster\";\nimport { reportError } from \"utils/sentry\";\nimport {\n  decodeCancelOrder,\n  decodeCancelOrderByClientId,\n  decodeConsumeEvents,\n  decodeInitializeMarket,\n  decodeMatchOrders,\n  decodeNewOrder,\n  decodeSettleFunds,\n  parseSerumInstructionCode,\n  parseSerumInstructionKey,\n  parseSerumInstructionTitle,\n  SERUM_DECODED_MAX,\n} from \"./serum/types\";\nimport { NewOrderDetailsCard } from \"./serum/NewOrderDetailsCard\";\nimport { MatchOrdersDetailsCard } from \"./serum/MatchOrdersDetailsCard\";\nimport { InitializeMarketDetailsCard } from \"./serum/InitializeMarketDetailsCard\";\nimport { ConsumeEventsDetailsCard } from \"./serum/ConsumeEventsDetails\";\nimport { CancelOrderDetailsCard } from \"./serum/CancelOrderDetails\";\nimport { CancelOrderByClientIdDetailsCard } from \"./serum/CancelOrderByClientIdDetails\";\nimport { SettleFundsDetailsCard } from \"./serum/SettleFundsDetailsCard\";\n\nexport function SerumDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  signature: string;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, signature, innerCards, childIndex } = props;\n\n  const { url } = useCluster();\n\n  let title;\n  try {\n    title = parseSerumInstructionTitle(ix);\n    const code = parseSerumInstructionCode(ix);\n\n    if (code <= SERUM_DECODED_MAX) {\n      switch (parseSerumInstructionKey(ix)) {\n        case \"initializeMarket\":\n          return (\n            <InitializeMarketDetailsCard\n              info={decodeInitializeMarket(ix)}\n              {...props}\n            />\n          );\n        case \"newOrder\":\n          return <NewOrderDetailsCard info={decodeNewOrder(ix)} {...props} />;\n        case \"matchOrders\":\n          return (\n            <MatchOrdersDetailsCard info={decodeMatchOrders(ix)} {...props} />\n          );\n        case \"consumeEvents\":\n          return (\n            <ConsumeEventsDetailsCard\n              info={decodeConsumeEvents(ix)}\n              {...props}\n            />\n          );\n        case \"cancelOrder\":\n          return (\n            <CancelOrderDetailsCard info={decodeCancelOrder(ix)} {...props} />\n          );\n        case \"cancelOrderByClientId\":\n          return (\n            <CancelOrderByClientIdDetailsCard\n              info={decodeCancelOrderByClientId(ix)}\n              {...props}\n            />\n          );\n        case \"settleFunds\":\n          return (\n            <SettleFundsDetailsCard info={decodeSettleFunds(ix)} {...props} />\n          );\n      }\n    }\n  } catch (error) {\n    reportError(error, {\n      url: url,\n      signature: signature,\n    });\n  }\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title={`Serum: ${title || \"Unknown\"}`}\n      innerCards={innerCards}\n      childIndex={childIndex}\n      defaultRaw\n    />\n  );\n}\n","import React from \"react\";\nimport {\n  SignatureResult,\n  StakeProgram,\n  SystemProgram,\n  ParsedInstruction,\n} from \"@velas/web3\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { InitializeInfo } from \"./types\";\nimport { displayTimestampUtc } from \"utils/date\";\n\nexport function InitializeDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: InitializeInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Stake Initialize\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={StakeProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Stake Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.stakeAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Stake Authority Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.authorized.staker} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Withdraw Authority Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.authorized.withdrawer} alignRight link />\n        </td>\n      </tr>\n\n      {info.lockup.epoch > 0 && (\n        <tr>\n          <td>Lockup Expiry Epoch</td>\n          <td className=\"text-lg-right\">{info.lockup.epoch}</td>\n        </tr>\n      )}\n\n      {info.lockup.unixTimestamp > 0 && (\n        <tr>\n          <td>Lockup Expiry Timestamp</td>\n          <td className=\"text-lg-right text-monospace\">\n            {displayTimestampUtc(info.lockup.unixTimestamp * 1000)}\n          </td>\n        </tr>\n      )}\n\n      {!info.lockup.custodian.equals(SystemProgram.programId) && (\n        <tr>\n          <td>Lockup Custodian Address</td>\n          <td className=\"text-lg-right\">\n            <Address pubkey={info.lockup.custodian} alignRight link />\n          </td>\n        </tr>\n      )}\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SignatureResult,\n  StakeProgram,\n  ParsedInstruction,\n} from \"@velas/web3\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { DelegateInfo } from \"./types\";\n\nexport function DelegateDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: DelegateInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Delegate Stake\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={StakeProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Stake Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.stakeAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Delegated Vote Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.voteAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Authority Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.stakeAuthority} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SignatureResult,\n  StakeProgram,\n  ParsedInstruction,\n} from \"@velas/web3\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { AuthorizeInfo } from \"./types\";\n\nexport function AuthorizeDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: AuthorizeInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Stake Authorize\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={StakeProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Stake Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.stakeAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Old Authority Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.authority} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>New Authority Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.newAuthority} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Authority Type</td>\n        <td className=\"text-lg-right\">{info.authorityType}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SignatureResult,\n  StakeProgram,\n  ParsedInstruction,\n} from \"@velas/web3\";\nimport { SolBalance } from \"utils\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { SplitInfo } from \"./types\";\n\nexport function SplitDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: SplitInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Split Stake\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={StakeProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Stake Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.stakeAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Authority Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.stakeAuthority} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>New Stake Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.newSplitAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Split Amount (XZO)</td>\n        <td className=\"text-lg-right\">\n          <SolBalance lamports={info.lamports} />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SignatureResult,\n  StakeProgram,\n  ParsedInstruction,\n} from \"@velas/web3\";\nimport { SolBalance } from \"utils\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { WithdrawInfo } from \"./types\";\n\nexport function WithdrawDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: WithdrawInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Withdraw Stake\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={StakeProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Stake Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.stakeAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Authority Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.withdrawAuthority} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>To Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.destination} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Withdraw Amount (XZO)</td>\n        <td className=\"text-lg-right\">\n          <SolBalance lamports={info.lamports} />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SignatureResult,\n  StakeProgram,\n  ParsedInstruction,\n} from \"@velas/web3\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { DeactivateInfo } from \"./types\";\n\nexport function DeactivateDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: DeactivateInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Deactivate Stake\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={StakeProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Stake Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.stakeAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Authority Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.stakeAuthority} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport { enums, number, type, string, Infer } from \"superstruct\";\nimport { PublicKeyFromString } from \"validators/pubkey\";\n\nexport type InitializeInfo = Infer<typeof InitializeInfo>;\nexport const InitializeInfo = type({\n  stakeAccount: PublicKeyFromString,\n  authorized: type({\n    staker: PublicKeyFromString,\n    withdrawer: PublicKeyFromString,\n  }),\n  lockup: type({\n    unixTimestamp: number(),\n    epoch: number(),\n    custodian: PublicKeyFromString,\n  }),\n});\n\nexport type DelegateInfo = Infer<typeof DelegateInfo>;\nexport const DelegateInfo = type({\n  stakeAccount: PublicKeyFromString,\n  voteAccount: PublicKeyFromString,\n  stakeAuthority: PublicKeyFromString,\n});\n\nexport type AuthorizeInfo = Infer<typeof AuthorizeInfo>;\nexport const AuthorizeInfo = type({\n  authorityType: string(),\n  stakeAccount: PublicKeyFromString,\n  authority: PublicKeyFromString,\n  newAuthority: PublicKeyFromString,\n});\n\nexport type SplitInfo = Infer<typeof SplitInfo>;\nexport const SplitInfo = type({\n  stakeAccount: PublicKeyFromString,\n  stakeAuthority: PublicKeyFromString,\n  newSplitAccount: PublicKeyFromString,\n  lamports: number(),\n});\n\nexport type WithdrawInfo = Infer<typeof WithdrawInfo>;\nexport const WithdrawInfo = type({\n  stakeAccount: PublicKeyFromString,\n  withdrawAuthority: PublicKeyFromString,\n  destination: PublicKeyFromString,\n  lamports: number(),\n});\n\nexport type DeactivateInfo = Infer<typeof DeactivateInfo>;\nexport const DeactivateInfo = type({\n  stakeAccount: PublicKeyFromString,\n  stakeAuthority: PublicKeyFromString,\n});\n\nexport type MergeInfo = Infer<typeof MergeInfo>;\nexport const MergeInfo = type({\n  source: PublicKeyFromString,\n  destination: PublicKeyFromString,\n  stakeAuthority: PublicKeyFromString,\n  stakeHistorySysvar: PublicKeyFromString,\n  clockSysvar: PublicKeyFromString,\n});\n\nexport type StakeInstructionType = Infer<typeof StakeInstructionType>;\nexport const StakeInstructionType = enums([\n  \"initialize\",\n  \"delegate\",\n  \"authorize\",\n  \"split\",\n  \"withdraw\",\n  \"deactivate\",\n  \"merge\",\n]);\n","import React from \"react\";\nimport {\n  SignatureResult,\n  StakeProgram,\n  ParsedInstruction,\n} from \"@velas/web3\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { MergeInfo } from \"./types\";\n\nexport function MergeDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: MergeInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Stake Merge\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={StakeProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Stake Source</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.source} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Stake Destination</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.destination} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Authority Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.stakeAuthority} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Clock Sysvar</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.clockSysvar} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Stake History Sysvar</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.stakeHistorySysvar} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SignatureResult,\n  ParsedTransaction,\n  ParsedInstruction,\n} from \"@velas/web3\";\n\nimport { UnknownDetailsCard } from \"../UnknownDetailsCard\";\nimport { InitializeDetailsCard } from \"./InitializeDetailsCard\";\nimport { DelegateDetailsCard } from \"./DelegateDetailsCard\";\nimport { AuthorizeDetailsCard } from \"./AuthorizeDetailsCard\";\nimport { SplitDetailsCard } from \"./SplitDetailsCard\";\nimport { WithdrawDetailsCard } from \"./WithdrawDetailsCard\";\nimport { DeactivateDetailsCard } from \"./DeactivateDetailsCard\";\nimport { ParsedInfo } from \"validators\";\nimport { reportError } from \"utils/sentry\";\nimport { create } from \"superstruct\";\nimport {\n  AuthorizeInfo,\n  DeactivateInfo,\n  DelegateInfo,\n  InitializeInfo,\n  MergeInfo,\n  SplitInfo,\n  WithdrawInfo,\n} from \"./types\";\nimport { MergeDetailsCard } from \"./MergeDetailsCard\";\n\ntype DetailsProps = {\n  tx: ParsedTransaction;\n  ix: ParsedInstruction;\n  result: SignatureResult;\n  index: number;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n};\n\nexport function StakeDetailsCard(props: DetailsProps) {\n  try {\n    const parsed = create(props.ix.parsed, ParsedInfo);\n\n    switch (parsed.type) {\n      case \"initialize\": {\n        const info = create(parsed.info, InitializeInfo);\n        return <InitializeDetailsCard info={info} {...props} />;\n      }\n      case \"delegate\": {\n        const info = create(parsed.info, DelegateInfo);\n        return <DelegateDetailsCard info={info} {...props} />;\n      }\n      case \"authorize\": {\n        const info = create(parsed.info, AuthorizeInfo);\n        return <AuthorizeDetailsCard info={info} {...props} />;\n      }\n      case \"split\": {\n        const info = create(parsed.info, SplitInfo);\n        return <SplitDetailsCard info={info} {...props} />;\n      }\n      case \"withdraw\": {\n        const info = create(parsed.info, WithdrawInfo);\n        return <WithdrawDetailsCard info={info} {...props} />;\n      }\n      case \"deactivate\": {\n        const info = create(parsed.info, DeactivateInfo);\n        return <DeactivateDetailsCard info={info} {...props} />;\n      }\n      case \"merge\": {\n        const info = create(parsed.info, MergeInfo);\n        return <MergeDetailsCard info={info} {...props} />;\n      }\n      default:\n        return <UnknownDetailsCard {...props} />;\n    }\n  } catch (error) {\n    reportError(error, {\n      signature: props.tx.signatures[0],\n    });\n    return <UnknownDetailsCard {...props} />;\n  }\n}\n","import React from \"react\";\nimport {\n  SystemProgram,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@velas/web3\";\nimport { SolBalance } from \"utils\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { TransferInfo } from \"./types\";\n\nexport function TransferDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: TransferInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Transfer\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={SystemProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>From Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.source} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>To Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.destination} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Transfer Amount (XZO)</td>\n        <td className=\"text-lg-right\">\n          <SolBalance lamports={info.lamports} />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SystemProgram,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@velas/web3\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { AllocateInfo } from \"./types\";\n\nexport function AllocateDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: AllocateInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Allocate Account\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={SystemProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Account Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.account} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Allocated Space (Bytes)</td>\n        <td className=\"text-lg-right\">{info.space}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SystemProgram,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@velas/web3\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Copyable } from \"components/common/Copyable\";\nimport { Address } from \"components/common/Address\";\nimport { AllocateWithSeedInfo } from \"./types\";\n\nexport function AllocateWithSeedDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: AllocateWithSeedInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Allocate Account w/ Seed\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={SystemProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Account Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.account} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Base Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.base} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Seed</td>\n        <td className=\"text-lg-right\">\n          <Copyable text={info.seed}>\n            <code>{info.seed}</code>\n          </Copyable>\n        </td>\n      </tr>\n\n      <tr>\n        <td>Allocated Space (Bytes)</td>\n        <td className=\"text-lg-right\">{info.space}</td>\n      </tr>\n\n      <tr>\n        <td>Assigned Owner</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.owner} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SystemProgram,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@velas/web3\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { AssignInfo } from \"./types\";\n\nexport function AssignDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: AssignInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Assign Account\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={SystemProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Account Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.account} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Assigned Owner</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.owner} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SystemProgram,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@velas/web3\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Copyable } from \"components/common/Copyable\";\nimport { Address } from \"components/common/Address\";\nimport { AssignWithSeedInfo } from \"./types\";\n\nexport function AssignWithSeedDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: AssignWithSeedInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Assign Account w/ Seed\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={SystemProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Account Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.account} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Base Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.base} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Seed</td>\n        <td className=\"text-lg-right\">\n          <Copyable text={info.seed}>\n            <code>{info.seed}</code>\n          </Copyable>\n        </td>\n      </tr>\n\n      <tr>\n        <td>Assigned Owner</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.owner} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SystemProgram,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@velas/web3\";\nimport { SolBalance } from \"utils\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { CreateAccountInfo } from \"./types\";\n\nexport function CreateDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: CreateAccountInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Create Account\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={SystemProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>From Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.source} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>New Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.newAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Transfer Amount (XZO)</td>\n        <td className=\"text-lg-right\">\n          <SolBalance lamports={info.lamports} />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Allocated Space (Bytes)</td>\n        <td className=\"text-lg-right\">{info.space}</td>\n      </tr>\n\n      <tr>\n        <td>Assigned Owner</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.owner} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SystemProgram,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@velas/web3\";\nimport { SolBalance } from \"utils\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Copyable } from \"components/common/Copyable\";\nimport { Address } from \"components/common/Address\";\nimport { CreateAccountWithSeedInfo } from \"./types\";\n\nexport function CreateWithSeedDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: CreateAccountWithSeedInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Create Account w/ Seed\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={SystemProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>From Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.source} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>New Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.newAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Base Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.base} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Seed</td>\n        <td className=\"text-lg-right\">\n          <Copyable text={info.seed}>\n            <code>{info.seed}</code>\n          </Copyable>\n        </td>\n      </tr>\n\n      <tr>\n        <td>Transfer Amount (XZO)</td>\n        <td className=\"text-lg-right\">\n          <SolBalance lamports={info.lamports} />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Allocated Space (Bytes)</td>\n        <td className=\"text-lg-right\">{info.space}</td>\n      </tr>\n\n      <tr>\n        <td>Assigned Owner</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.owner} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SystemProgram,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@velas/web3\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { InitializeNonceInfo } from \"./types\";\n\nexport function NonceInitializeDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: InitializeNonceInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Initialize Nonce\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={SystemProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Nonce Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.nonceAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Authority Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.nonceAuthority} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SystemProgram,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@velas/web3\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { AdvanceNonceInfo } from \"./types\";\n\nexport function NonceAdvanceDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: AdvanceNonceInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Advance Nonce\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={SystemProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Nonce Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.nonceAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Authority Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.nonceAuthority} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SystemProgram,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@velas/web3\";\nimport { SolBalance } from \"utils\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { WithdrawNonceInfo } from \"./types\";\n\nexport function NonceWithdrawDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: WithdrawNonceInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Withdraw Nonce\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={SystemProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Nonce Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.nonceAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Authority Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.nonceAuthority} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>To Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.destination} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Withdraw Amount (XZO)</td>\n        <td className=\"text-lg-right\">\n          <SolBalance lamports={info.lamports} />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SystemProgram,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@velas/web3\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { AuthorizeNonceInfo } from \"./types\";\n\nexport function NonceAuthorizeDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: AuthorizeNonceInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Authorize Nonce\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={SystemProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Nonce Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.nonceAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Old Authority Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.nonceAuthority} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>New Authority Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.newAuthorized} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SystemProgram,\n  SignatureResult,\n  ParsedInstruction,\n} from \"@velas/web3\";\nimport { SolBalance } from \"utils\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Copyable } from \"components/common/Copyable\";\nimport { Address } from \"components/common/Address\";\nimport { TransferWithSeedInfo } from \"./types\";\n\nexport function TransferWithSeedDetailsCard(props: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  info: TransferWithSeedInfo;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Transfer w/ Seed\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={SystemProgram.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>From Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.source} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Destination Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.destination} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Base Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.sourceBase} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Transfer Amount (XZO)</td>\n        <td className=\"text-lg-right\">\n          <SolBalance lamports={info.lamports} />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Seed</td>\n        <td className=\"text-lg-right\">\n          <Copyable text={info.sourceSeed}>\n            <code>{info.sourceSeed}</code>\n          </Copyable>\n        </td>\n      </tr>\n\n      <tr>\n        <td>Source Owner</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.sourceOwner} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport { enums, number, type, string, Infer } from \"superstruct\";\nimport { PublicKeyFromString } from \"validators/pubkey\";\n\nexport type CreateAccountInfo = Infer<typeof CreateAccountInfo>;\nexport const CreateAccountInfo = type({\n  source: PublicKeyFromString,\n  newAccount: PublicKeyFromString,\n  lamports: number(),\n  space: number(),\n  owner: PublicKeyFromString,\n});\n\nexport type AssignInfo = Infer<typeof AssignInfo>;\nexport const AssignInfo = type({\n  account: PublicKeyFromString,\n  owner: PublicKeyFromString,\n});\n\nexport type TransferInfo = Infer<typeof TransferInfo>;\nexport const TransferInfo = type({\n  source: PublicKeyFromString,\n  destination: PublicKeyFromString,\n  lamports: number(),\n});\n\nexport type CreateAccountWithSeedInfo = Infer<typeof CreateAccountWithSeedInfo>;\nexport const CreateAccountWithSeedInfo = type({\n  source: PublicKeyFromString,\n  newAccount: PublicKeyFromString,\n  base: PublicKeyFromString,\n  seed: string(),\n  lamports: number(),\n  space: number(),\n  owner: PublicKeyFromString,\n});\n\nexport type AdvanceNonceInfo = Infer<typeof AdvanceNonceInfo>;\nexport const AdvanceNonceInfo = type({\n  nonceAccount: PublicKeyFromString,\n  nonceAuthority: PublicKeyFromString,\n});\n\nexport type WithdrawNonceInfo = Infer<typeof WithdrawNonceInfo>;\nexport const WithdrawNonceInfo = type({\n  nonceAccount: PublicKeyFromString,\n  destination: PublicKeyFromString,\n  nonceAuthority: PublicKeyFromString,\n  lamports: number(),\n});\n\nexport type InitializeNonceInfo = Infer<typeof InitializeNonceInfo>;\nexport const InitializeNonceInfo = type({\n  nonceAccount: PublicKeyFromString,\n  nonceAuthority: PublicKeyFromString,\n});\n\nexport type AuthorizeNonceInfo = Infer<typeof AuthorizeNonceInfo>;\nexport const AuthorizeNonceInfo = type({\n  nonceAccount: PublicKeyFromString,\n  nonceAuthority: PublicKeyFromString,\n  newAuthorized: PublicKeyFromString,\n});\n\nexport type AllocateInfo = Infer<typeof AllocateInfo>;\nexport const AllocateInfo = type({\n  account: PublicKeyFromString,\n  space: number(),\n});\n\nexport type AllocateWithSeedInfo = Infer<typeof AllocateWithSeedInfo>;\nexport const AllocateWithSeedInfo = type({\n  account: PublicKeyFromString,\n  base: PublicKeyFromString,\n  seed: string(),\n  space: number(),\n  owner: PublicKeyFromString,\n});\n\nexport type AssignWithSeedInfo = Infer<typeof AssignWithSeedInfo>;\nexport const AssignWithSeedInfo = type({\n  account: PublicKeyFromString,\n  base: PublicKeyFromString,\n  seed: string(),\n  owner: PublicKeyFromString,\n});\n\nexport type TransferWithSeedInfo = Infer<typeof TransferWithSeedInfo>;\nexport const TransferWithSeedInfo = type({\n  source: PublicKeyFromString,\n  sourceBase: PublicKeyFromString,\n  destination: PublicKeyFromString,\n  lamports: number(),\n  sourceSeed: string(),\n  sourceOwner: PublicKeyFromString,\n});\n\nexport type SystemInstructionType = Infer<typeof SystemInstructionType>;\nexport const SystemInstructionType = enums([\n  \"createAccount\",\n  \"createAccountWithSeed\",\n  \"allocate\",\n  \"allocateWithSeed\",\n  \"assign\",\n  \"assignWithSeed\",\n  \"transfer\",\n  \"advanceNonce\",\n  \"withdrawNonce\",\n  \"authorizeNonce\",\n  \"initializeNonce\",\n  \"transferWithSeed\",\n]);\n","import React from \"react\";\nimport {\n  SignatureResult,\n  ParsedInstruction,\n  ParsedTransaction,\n} from \"@velas/web3\";\n\nimport { UnknownDetailsCard } from \"../UnknownDetailsCard\";\nimport { TransferDetailsCard } from \"./TransferDetailsCard\";\nimport { AllocateDetailsCard } from \"./AllocateDetailsCard\";\nimport { AllocateWithSeedDetailsCard } from \"./AllocateWithSeedDetailsCard\";\nimport { AssignDetailsCard } from \"./AssignDetailsCard\";\nimport { AssignWithSeedDetailsCard } from \"./AssignWithSeedDetailsCard\";\nimport { CreateDetailsCard } from \"./CreateDetailsCard\";\nimport { CreateWithSeedDetailsCard } from \"./CreateWithSeedDetailsCard\";\nimport { NonceInitializeDetailsCard } from \"./NonceInitializeDetailsCard\";\nimport { NonceAdvanceDetailsCard } from \"./NonceAdvanceDetailsCard\";\nimport { NonceWithdrawDetailsCard } from \"./NonceWithdrawDetailsCard\";\nimport { NonceAuthorizeDetailsCard } from \"./NonceAuthorizeDetailsCard\";\nimport { TransferWithSeedDetailsCard } from \"./TransferWithSeedDetailsCard\";\nimport { ParsedInfo } from \"validators\";\nimport { create } from \"superstruct\";\nimport { reportError } from \"utils/sentry\";\nimport {\n  CreateAccountInfo,\n  CreateAccountWithSeedInfo,\n  AllocateInfo,\n  AllocateWithSeedInfo,\n  AssignInfo,\n  AssignWithSeedInfo,\n  TransferInfo,\n  AdvanceNonceInfo,\n  AuthorizeNonceInfo,\n  InitializeNonceInfo,\n  WithdrawNonceInfo,\n  TransferWithSeedInfo,\n} from \"./types\";\n\ntype DetailsProps = {\n  tx: ParsedTransaction;\n  ix: ParsedInstruction;\n  result: SignatureResult;\n  index: number;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n};\n\nexport function SystemDetailsCard(props: DetailsProps) {\n  try {\n    const parsed = create(props.ix.parsed, ParsedInfo);\n    switch (parsed.type) {\n      case \"createAccount\": {\n        const info = create(parsed.info, CreateAccountInfo);\n        return <CreateDetailsCard info={info} {...props} />;\n      }\n      case \"createAccountWithSeed\": {\n        const info = create(parsed.info, CreateAccountWithSeedInfo);\n        return <CreateWithSeedDetailsCard info={info} {...props} />;\n      }\n      case \"allocate\": {\n        const info = create(parsed.info, AllocateInfo);\n        return <AllocateDetailsCard info={info} {...props} />;\n      }\n      case \"allocateWithSeed\": {\n        const info = create(parsed.info, AllocateWithSeedInfo);\n        return <AllocateWithSeedDetailsCard info={info} {...props} />;\n      }\n      case \"assign\": {\n        const info = create(parsed.info, AssignInfo);\n        return <AssignDetailsCard info={info} {...props} />;\n      }\n      case \"assignWithSeed\": {\n        const info = create(parsed.info, AssignWithSeedInfo);\n        return <AssignWithSeedDetailsCard info={info} {...props} />;\n      }\n      case \"transfer\": {\n        const info = create(parsed.info, TransferInfo);\n        return <TransferDetailsCard info={info} {...props} />;\n      }\n      case \"advanceNonce\": {\n        const info = create(parsed.info, AdvanceNonceInfo);\n        return <NonceAdvanceDetailsCard info={info} {...props} />;\n      }\n      case \"withdrawNonce\": {\n        const info = create(parsed.info, WithdrawNonceInfo);\n        return <NonceWithdrawDetailsCard info={info} {...props} />;\n      }\n      case \"authorizeNonce\": {\n        const info = create(parsed.info, AuthorizeNonceInfo);\n        return <NonceAuthorizeDetailsCard info={info} {...props} />;\n      }\n      case \"initializeNonce\": {\n        const info = create(parsed.info, InitializeNonceInfo);\n        return <NonceInitializeDetailsCard info={info} {...props} />;\n      }\n      case \"transferWithSeed\": {\n        const info = create(parsed.info, TransferWithSeedInfo);\n        return <TransferWithSeedDetailsCard info={info} {...props} />;\n      }\n      default:\n        return <UnknownDetailsCard {...props} />;\n    }\n  } catch (error) {\n    reportError(error, {\n      signature: props.tx.signatures[0],\n    });\n    return <UnknownDetailsCard {...props} />;\n  }\n}\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport {\n  enums,\n  type,\n  Infer,\n  number,\n  string,\n  optional,\n  array,\n  nullable,\n  union,\n} from \"superstruct\";\nimport { PublicKeyFromString } from \"validators/pubkey\";\n\nexport type TokenAmountUi = Infer<typeof TokenAmountUi>;\nexport const TokenAmountUi = type({\n  amount: string(),\n  decimals: number(),\n  uiAmountString: string(),\n});\n\nconst InitializeMint = type({\n  mint: PublicKeyFromString,\n  decimals: number(),\n  mintAuthority: PublicKeyFromString,\n  rentSysvar: PublicKeyFromString,\n  freezeAuthority: optional(PublicKeyFromString),\n});\n\nconst InitializeAccount = type({\n  account: PublicKeyFromString,\n  mint: PublicKeyFromString,\n  owner: PublicKeyFromString,\n  rentSysvar: PublicKeyFromString,\n});\n\nconst InitializeMultisig = type({\n  multisig: PublicKeyFromString,\n  rentSysvar: PublicKeyFromString,\n  signers: array(PublicKeyFromString),\n  m: number(),\n});\n\nexport type Transfer = Infer<typeof Transfer>;\nexport const Transfer = type({\n  source: PublicKeyFromString,\n  destination: PublicKeyFromString,\n  amount: union([string(), number()]),\n  authority: optional(PublicKeyFromString),\n  multisigAuthority: optional(PublicKeyFromString),\n  signers: optional(array(PublicKeyFromString)),\n});\n\nconst Approve = type({\n  source: PublicKeyFromString,\n  delegate: PublicKeyFromString,\n  amount: union([string(), number()]),\n  owner: optional(PublicKeyFromString),\n  multisigOwner: optional(PublicKeyFromString),\n  signers: optional(array(PublicKeyFromString)),\n});\n\nconst Revoke = type({\n  source: PublicKeyFromString,\n  owner: optional(PublicKeyFromString),\n  multisigOwner: optional(PublicKeyFromString),\n  signers: optional(array(PublicKeyFromString)),\n});\n\nconst AuthorityType = enums([\n  \"mintTokens\",\n  \"freezeAccount\",\n  \"accountOwner\",\n  \"closeAccount\",\n]);\n\nconst SetAuthority = type({\n  mint: optional(PublicKeyFromString),\n  account: optional(PublicKeyFromString),\n  authorityType: AuthorityType,\n  newAuthority: nullable(PublicKeyFromString),\n  authority: optional(PublicKeyFromString),\n  multisigAuthority: optional(PublicKeyFromString),\n  signers: optional(array(PublicKeyFromString)),\n});\n\nconst MintTo = type({\n  mint: PublicKeyFromString,\n  account: PublicKeyFromString,\n  amount: union([string(), number()]),\n  mintAuthority: optional(PublicKeyFromString),\n  multisigMintAuthority: optional(PublicKeyFromString),\n  signers: optional(array(PublicKeyFromString)),\n});\n\nconst Burn = type({\n  account: PublicKeyFromString,\n  mint: PublicKeyFromString,\n  amount: union([string(), number()]),\n  authority: optional(PublicKeyFromString),\n  multisigAuthority: optional(PublicKeyFromString),\n  signers: optional(array(PublicKeyFromString)),\n});\n\nconst CloseAccount = type({\n  account: PublicKeyFromString,\n  destination: PublicKeyFromString,\n  owner: optional(PublicKeyFromString),\n  multisigOwner: optional(PublicKeyFromString),\n  signers: optional(array(PublicKeyFromString)),\n});\n\nconst FreezeAccount = type({\n  account: PublicKeyFromString,\n  mint: PublicKeyFromString,\n  freezeAuthority: optional(PublicKeyFromString),\n  multisigFreezeAuthority: optional(PublicKeyFromString),\n  signers: optional(array(PublicKeyFromString)),\n});\n\nconst ThawAccount = type({\n  account: PublicKeyFromString,\n  mint: PublicKeyFromString,\n  freezeAuthority: optional(PublicKeyFromString),\n  multisigFreezeAuthority: optional(PublicKeyFromString),\n  signers: optional(array(PublicKeyFromString)),\n});\n\nexport type TransferChecked = Infer<typeof TransferChecked>;\nexport const TransferChecked = type({\n  source: PublicKeyFromString,\n  mint: PublicKeyFromString,\n  destination: PublicKeyFromString,\n  authority: optional(PublicKeyFromString),\n  multisigAuthority: optional(PublicKeyFromString),\n  signers: optional(array(PublicKeyFromString)),\n  tokenAmount: TokenAmountUi,\n});\n\nconst ApproveChecked = type({\n  source: PublicKeyFromString,\n  mint: PublicKeyFromString,\n  delegate: PublicKeyFromString,\n  owner: optional(PublicKeyFromString),\n  multisigOwner: optional(PublicKeyFromString),\n  signers: optional(array(PublicKeyFromString)),\n  tokenAmount: TokenAmountUi,\n});\n\nconst MintToChecked = type({\n  account: PublicKeyFromString,\n  mint: PublicKeyFromString,\n  mintAuthority: optional(PublicKeyFromString),\n  multisigMintAuthority: optional(PublicKeyFromString),\n  signers: optional(array(PublicKeyFromString)),\n  tokenAmount: TokenAmountUi,\n});\n\nconst BurnChecked = type({\n  account: PublicKeyFromString,\n  mint: PublicKeyFromString,\n  authority: optional(PublicKeyFromString),\n  multisigAuthority: optional(PublicKeyFromString),\n  signers: optional(array(PublicKeyFromString)),\n  tokenAmount: TokenAmountUi,\n});\n\nexport type TokenInstructionType = Infer<typeof TokenInstructionType>;\nexport const TokenInstructionType = enums([\n  \"initializeMint\",\n  \"initializeAccount\",\n  \"initializeMultisig\",\n  \"transfer\",\n  \"approve\",\n  \"revoke\",\n  \"setAuthority\",\n  \"mintTo\",\n  \"burn\",\n  \"closeAccount\",\n  \"freezeAccount\",\n  \"thawAccount\",\n  \"transfer2\",\n  \"approve2\",\n  \"mintTo2\",\n  \"burn2\",\n  \"transferChecked\",\n  \"approveChecked\",\n  \"mintToChecked\",\n  \"burnChecked\",\n]);\n\nexport const IX_STRUCTS = {\n  initializeMint: InitializeMint,\n  initializeAccount: InitializeAccount,\n  initializeMultisig: InitializeMultisig,\n  transfer: Transfer,\n  approve: Approve,\n  revoke: Revoke,\n  setAuthority: SetAuthority,\n  mintTo: MintTo,\n  burn: Burn,\n  closeAccount: CloseAccount,\n  freezeAccount: FreezeAccount,\n  thawAccount: ThawAccount,\n  transfer2: TransferChecked,\n  approve2: ApproveChecked,\n  mintTo2: MintToChecked,\n  burn2: BurnChecked,\n  transferChecked: TransferChecked,\n  approveChecked: ApproveChecked,\n  mintToChecked: MintToChecked,\n  burnChecked: BurnChecked,\n};\n\nexport const IX_TITLES = {\n  initializeMint: \"Initialize Mint\",\n  initializeAccount: \"Initialize Account\",\n  initializeMultisig: \"Initialize Multisig\",\n  transfer: \"Transfer\",\n  approve: \"Approve\",\n  revoke: \"Revoke\",\n  setAuthority: \"Set Authority\",\n  mintTo: \"Mint To\",\n  burn: \"Burn\",\n  closeAccount: \"Close Account\",\n  freezeAccount: \"Freeze Account\",\n  thawAccount: \"Thaw Account\",\n  transfer2: \"Transfer (Checked)\",\n  approve2: \"Approve (Checked)\",\n  mintTo2: \"Mint To (Checked)\",\n  burn2: \"Burn (Checked)\",\n  transferChecked: \"Transfer (Checked)\",\n  approveChecked: \"Approve (Checked)\",\n  mintToChecked: \"Mint To (Checked)\",\n  burnChecked: \"Burn (Checked)\",\n};\n","import React from \"react\";\nimport { create } from \"superstruct\";\nimport {\n  SignatureResult,\n  ParsedTransaction,\n  PublicKey,\n  ParsedInstruction,\n} from \"@velas/web3\";\n\nimport { UnknownDetailsCard } from \"../UnknownDetailsCard\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport {\n  IX_STRUCTS,\n  TokenInstructionType,\n  IX_TITLES,\n  TokenAmountUi,\n} from \"./types\";\nimport { ParsedInfo } from \"validators\";\nimport {\n  useTokenAccountInfo,\n  useMintAccountInfo,\n  useFetchAccountInfo,\n} from \"providers/accounts\";\nimport { normalizeTokenAmount } from \"utils\";\nimport { reportError } from \"utils/sentry\";\nimport { useTokenRegistry } from \"providers/mints/token-registry\";\n\ntype DetailsProps = {\n  tx: ParsedTransaction;\n  ix: ParsedInstruction;\n  result: SignatureResult;\n  index: number;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n};\n\nexport function TokenDetailsCard(props: DetailsProps) {\n  try {\n    const parsed = create(props.ix.parsed, ParsedInfo);\n    const { type: rawType, info } = parsed;\n    const type = create(rawType, TokenInstructionType);\n    const title = `Token: ${IX_TITLES[type]}`;\n    const created = create(info, IX_STRUCTS[type] as any);\n    return <TokenInstruction title={title} info={created} {...props} />;\n  } catch (err) {\n    reportError(err, {\n      signature: props.tx.signatures[0],\n    });\n    return <UnknownDetailsCard {...props} />;\n  }\n}\n\ntype InfoProps = {\n  ix: ParsedInstruction;\n  info: any;\n  result: SignatureResult;\n  index: number;\n  title: string;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n};\n\nfunction TokenInstruction(props: InfoProps) {\n  const { mintAddress: infoMintAddress, tokenAddress } = React.useMemo(() => {\n    let mintAddress: string | undefined;\n    let tokenAddress: string | undefined;\n\n    // No sense fetching accounts if we don't need to convert an amount\n    if (!(\"amount\" in props.info)) return {};\n\n    if (\"mint\" in props.info && props.info.mint instanceof PublicKey) {\n      mintAddress = props.info.mint.toBase58();\n    } else if (\n      \"account\" in props.info &&\n      props.info.account instanceof PublicKey\n    ) {\n      tokenAddress = props.info.account.toBase58();\n    } else if (\n      \"source\" in props.info &&\n      props.info.source instanceof PublicKey\n    ) {\n      tokenAddress = props.info.source.toBase58();\n    }\n    return {\n      mintAddress,\n      tokenAddress,\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const tokenInfo = useTokenAccountInfo(tokenAddress);\n  const mintAddress = infoMintAddress || tokenInfo?.mint.toBase58();\n  const mintInfo = useMintAccountInfo(mintAddress);\n  const { tokenRegistry } = useTokenRegistry();\n  const fetchAccountInfo = useFetchAccountInfo();\n\n  React.useEffect(() => {\n    if (tokenAddress && !tokenInfo) {\n      fetchAccountInfo(new PublicKey(tokenAddress));\n    }\n  }, [fetchAccountInfo, tokenAddress]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  React.useEffect(() => {\n    if (mintAddress && !mintInfo) {\n      fetchAccountInfo(new PublicKey(mintAddress));\n    }\n  }, [fetchAccountInfo, mintAddress]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const attributes: JSX.Element[] = [];\n  let decimals = mintInfo?.decimals;\n  let tokenSymbol = \"\";\n\n  if (\"tokenAmount\" in props.info) {\n    decimals = props.info.tokenAmount.decimals;\n  }\n\n  if (mintAddress) {\n    const tokenDetails = tokenRegistry.get(mintAddress);\n\n    if (tokenDetails) {\n      tokenSymbol = tokenDetails.symbol;\n    }\n\n    attributes.push(\n      <tr key={mintAddress}>\n        <td>Token</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={new PublicKey(mintAddress)} alignRight link />\n        </td>\n      </tr>\n    );\n  }\n\n  for (let key in props.info) {\n    let value = props.info[key];\n    if (value === undefined) continue;\n\n    // Flatten lists of public keys\n    if (Array.isArray(value) && value.every((v) => v instanceof PublicKey)) {\n      for (let i = 0; i < value.length; i++) {\n        let publicKey = value[i];\n        let label = `${key.charAt(0).toUpperCase() + key.slice(1)} - #${i + 1}`;\n\n        attributes.push(\n          <tr key={key + i}>\n            <td>{label}</td>\n            <td className=\"text-lg-right\">\n              <Address pubkey={publicKey} alignRight link />\n            </td>\n          </tr>\n        );\n      }\n      continue;\n    }\n\n    if (key === \"tokenAmount\") {\n      key = \"amount\";\n      value = (value as TokenAmountUi).amount;\n    }\n\n    let tag;\n    let labelSuffix = \"\";\n    if (value instanceof PublicKey) {\n      tag = <Address pubkey={value} alignRight link />;\n    } else if (key === \"amount\") {\n      let amount;\n      if (decimals === undefined) {\n        labelSuffix = \" (raw)\";\n        amount = new Intl.NumberFormat(\"en-US\").format(value);\n      } else {\n        amount = new Intl.NumberFormat(\"en-US\", {\n          minimumFractionDigits: decimals,\n          maximumFractionDigits: decimals,\n        }).format(normalizeTokenAmount(value, decimals));\n      }\n      tag = (\n        <>\n          {amount} {tokenSymbol}\n        </>\n      );\n    } else {\n      tag = <>{value}</>;\n    }\n\n    let label = key.charAt(0).toUpperCase() + key.slice(1) + labelSuffix;\n\n    attributes.push(\n      <tr key={key}>\n        <td>{label}</td>\n        <td className=\"text-lg-right\">{tag}</td>\n      </tr>\n    );\n  }\n\n  return (\n    <InstructionCard\n      ix={props.ix}\n      index={props.index}\n      result={props.result}\n      title={props.title}\n      innerCards={props.innerCards}\n      childIndex={props.childIndex}\n    >\n      {attributes}\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { TransactionInstruction, SignatureResult } from \"@velas/web3\";\nimport { InstructionCard } from \"./InstructionCard\";\nimport { useCluster } from \"providers/cluster\";\nimport { reportError } from \"utils/sentry\";\nimport { parseTokenLendingInstructionTitle } from \"./token-lending/types\";\n\nexport function TokenLendingDetailsCard({\n  ix,\n  index,\n  result,\n  signature,\n  innerCards,\n  childIndex,\n}: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  signature: string;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { url } = useCluster();\n\n  let title;\n  try {\n    title = parseTokenLendingInstructionTitle(ix);\n  } catch (error) {\n    reportError(error, {\n      url: url,\n      signature: signature,\n    });\n  }\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title={`Token Lending: ${title || \"Unknown\"}`}\n      innerCards={innerCards}\n      childIndex={childIndex}\n      defaultRaw\n    />\n  );\n}\n","import React from \"react\";\nimport { TransactionInstruction, SignatureResult } from \"@velas/web3\";\nimport { InstructionCard } from \"./InstructionCard\";\nimport { useCluster } from \"providers/cluster\";\nimport { reportError } from \"utils/sentry\";\nimport { parseTokenSwapInstructionTitle } from \"./token-swap/types\";\n\nexport function TokenSwapDetailsCard({\n  ix,\n  index,\n  result,\n  signature,\n  innerCards,\n  childIndex,\n}: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  signature: string;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { url } = useCluster();\n\n  let title;\n  try {\n    title = parseTokenSwapInstructionTitle(ix);\n  } catch (error) {\n    reportError(error, {\n      url: url,\n      signature: signature,\n    });\n  }\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title={`Token Swap: ${title || \"Unknown\"}`}\n      innerCards={innerCards}\n      childIndex={childIndex}\n      defaultRaw\n    />\n  );\n}\n","import { TransactionInstruction } from \"@velas/web3\";\n\nexport const PROGRAM_IDS: string[] = [\n  \"WormT3McKhFJ2RkiGpdw9GKvNCrB2aB54gb2uV9MfQC\", // mainnet / testnet / devnet\n];\n\nconst INSTRUCTION_LOOKUP: { [key: number]: string } = {\n  0: \"Initialize Bridge\",\n  1: \"Transfer Assets Out\",\n  2: \"Post VAA\",\n  3: \"Evict Transfer Proposal\",\n  4: \"Evict Claimed VAA\",\n  5: \"Poke Proposal\",\n  6: \"Verify Signatures\",\n  7: \"Create Wrapped Asset\",\n};\n\nexport function isWormholeInstruction(\n  instruction: TransactionInstruction\n): boolean {\n  return PROGRAM_IDS.includes(instruction.programId.toBase58());\n}\n\nexport function parsWormholeInstructionTitle(\n  instruction: TransactionInstruction\n): string {\n  const code = instruction.data[0];\n\n  if (!(code in INSTRUCTION_LOOKUP)) {\n    throw new Error(`Unrecognized Wormhole instruction code: ${code}`);\n  }\n\n  return INSTRUCTION_LOOKUP[code];\n}\n","import React from \"react\";\nimport { TransactionInstruction, SignatureResult } from \"@velas/web3\";\nimport { InstructionCard } from \"./InstructionCard\";\nimport { useCluster } from \"providers/cluster\";\nimport { reportError } from \"utils/sentry\";\nimport { parsWormholeInstructionTitle } from \"./wormhole/types\";\n\nexport function WormholeDetailsCard({\n  ix,\n  index,\n  result,\n  signature,\n  innerCards,\n  childIndex,\n}: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  signature: string;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { url } = useCluster();\n\n  let title;\n  try {\n    title = parsWormholeInstructionTitle(ix);\n  } catch (error) {\n    reportError(error, {\n      url: url,\n      signature: signature,\n    });\n  }\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title={`Wormhole: ${title || \"Unknown\"}`}\n      innerCards={innerCards}\n      childIndex={childIndex}\n      defaultRaw\n    />\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@velas/web3\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { CancelOrder } from \"./types\";\n\nexport function CancelOrderDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: CancelOrder;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Serum: Cancel Order\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Market</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.market} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Signal Provider Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.signalProviderKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Open Orders</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.openOrdersKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Serum Event Queue</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.serumEventQueue} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Serum Bids</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.serumMarketBids} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Serum Asks</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.serumMarketAsks} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Bot Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.poolKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Serum Program ID</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.dexProgramKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Pool Seed</td>\n        <td className=\"text-lg-right\">{info.poolSeed}</td>\n      </tr>\n\n      <tr>\n        <td>Side</td>\n        <td className=\"text-lg-right\">{info.side}</td>\n      </tr>\n\n      <tr>\n        <td>Order Id</td>\n        <td className=\"text-lg-right\">{info.orderId.toString(10)}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@velas/web3\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { CollectFees } from \"./types\";\n\nexport function CollectFeesDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: CollectFees;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Bonfida Bot: Collect Fees\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Signal Provider</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.signalProviderPoolTokenKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Insurance Fund</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.bonfidaFeePoolTokenKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Buy and Burn</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.bonfidaBnBPTKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Pool Seed</td>\n        <td className=\"text-lg-right\">{info.poolSeed}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@velas/web3\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { CreateBot } from \"./types\";\n\nexport function CreateBotDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: CreateBot;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Bonfida Bot: Create Bot\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Bot Token Mint</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.mintKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Bot Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.poolKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Target Pool Token Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.targetPoolTokenKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Serum Program ID</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.serumProgramId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Signal Provider Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.signalProviderKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Pool Seed</td>\n        <td className=\"text-lg-right\">{info.poolSeed}</td>\n      </tr>\n\n      <tr>\n        <td>Fee Ratio</td>\n        <td className=\"text-lg-right\">{info.feeRatio}</td>\n      </tr>\n\n      <tr>\n        <td>Fee Collection Period</td>\n        <td className=\"text-lg-right\">{info.feeCollectionPeriod}</td>\n      </tr>\n\n      <tr>\n        <td>Serum Markets</td>\n        <td className=\"text-lg-right\">{info.markets}</td>\n      </tr>\n\n      <tr>\n        <td>Deposit Amounts</td>\n        <td className=\"text-lg-right\">{info.depositAmounts}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@velas/web3\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { Deposit } from \"./types\";\n\nexport function DepositDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: Deposit;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Bonfida Bot: Deposit\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Signal Provider Fee Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.sigProviderFeeReceiverKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Insurance Funds</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.bonfidaFeeReceiverKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Buy and Burn</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.bonfidaBuyAndBurnKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Bot Token Mint</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.mintKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Bot Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.poolKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Target Pool Token Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.targetPoolTokenKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Pool Seed</td>\n        <td className=\"text-lg-right\">{info.poolSeed}</td>\n      </tr>\n\n      <tr>\n        <td>Pool Token Amount</td>\n        <td className=\"text-lg-right\">{info.poolTokenAmount.toString()}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@velas/web3\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { InitializeBot } from \"./types\";\n\nexport function InitializeBotDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: InitializeBot;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Bonfida Bot: Initialize Bot\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Pool Account</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.poolAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Mint Account</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.mintAccount} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Pool Seed</td>\n        <td className=\"text-lg-right\">{info.poolSeed}</td>\n      </tr>\n\n      <tr>\n        <td>Max Number of Assets</td>\n        <td className=\"text-lg-right\">{info.maxNumberOfAsset}</td>\n      </tr>\n\n      <tr>\n        <td>Number of Markets</td>\n        <td className=\"text-lg-right\">{info.numberOfMarkets}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@velas/web3\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { Redeem } from \"./types\";\n\nexport function RedeemDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: Redeem;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Bonfida Bot: Redeem\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Bot Token Mint</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.mintKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Bot Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.poolKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Source Bot Token Owner</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.sourcePoolTokenKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Source Bot Token Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.sourcePoolTokenKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Pool Seed</td>\n        <td className=\"text-lg-right\">{info.poolSeed}</td>\n      </tr>\n\n      <tr>\n        <td>Pool Token Amount</td>\n        <td className=\"text-lg-right\">{info.poolTokenAmount}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { SignatureResult, TransactionInstruction } from \"@velas/web3\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { SettleFunds } from \"./types\";\n\nexport function SettleFundsDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: SettleFunds;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Bonfida Bot: Settle Funds\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Market</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.market} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Open Orders</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.openOrdersKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Bot Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.poolKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Bot Token Mint</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.poolMintKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Coin Vault</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.coinVaultKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Pc Vault</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.pcVaultKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Bot's Coin Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.coinPoolAssetKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Bot's Pc Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.pcPoolAssetKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Vault Signer</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.vaultSignerKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Serum Program ID</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.dexProgramKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Pool Seed</td>\n        <td className=\"text-lg-right\">{info.poolSeed}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport {\n  SignatureResult,\n  TransactionInstruction,\n  PublicKey,\n} from \"@velas/web3\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { CreateOrder } from \"./types\";\n\nexport function CreateOrderDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: CreateOrder;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n  console.log(\"Test\");\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Bonfida Bot: Create Order\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Signal Provider Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.signalProviderKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Market</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.market} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Payer Bot Asset Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.payerPoolAssetKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Open Order</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.openOrdersKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Serum Request Queue</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.serumRequestQueue} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Serum Event Queue</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.serumEventQueue} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Serum Bids</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.serumMarketBids} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Serum Asks</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.serumMarketAsks} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Bot Address</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.poolKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Coin Vault</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.coinVaultKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Pc Vault</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.pcVaultKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Serum Program ID</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={info.dexProgramKey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Bot Token Mint</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={new PublicKey(info.targetMint)} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Pool Seed</td>\n        <td className=\"text-lg-right\">{info.poolSeed}</td>\n      </tr>\n\n      <tr>\n        <td>Side</td>\n        <td className=\"text-lg-right\">{info.side}</td>\n      </tr>\n\n      <tr>\n        <td>Limit Price</td>\n        <td className=\"text-lg-right\">{info.limitPrice}</td>\n      </tr>\n\n      <tr>\n        <td>Ratio to Trade</td>\n        <td className=\"text-lg-right\">{info.ratioOfPoolAssetsToTrade}</td>\n      </tr>\n\n      <tr>\n        <td>Order Type</td>\n        <td className=\"text-lg-right\">{info.orderType}</td>\n      </tr>\n\n      <tr>\n        <td>Coin Lot Size</td>\n        <td className=\"text-lg-right\">{info.coinLotSize.toString()}</td>\n      </tr>\n\n      <tr>\n        <td>Pc Lot Size</td>\n        <td className=\"text-lg-right\">{info.pcLotSize.toString()}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { TransactionInstruction, SignatureResult } from \"@velas/web3\";\nimport { InstructionCard } from \"./InstructionCard\";\nimport { useCluster } from \"providers/cluster\";\nimport { reportError } from \"utils/sentry\";\nimport {\n  decodeCancelOrder,\n  decodeInitializeBot,\n  decodeCreateBot,\n  decodeDeposit,\n  decodeCreateOrder,\n  decodeSettleFunds,\n  decodeRedeem,\n  decodeCollectFees,\n  parseBonfidaBotInstructionTitle,\n} from \"./bonfida-bot/types\";\nimport { CancelOrderDetailsCard } from \"./bonfida-bot/CancelOrderDetails\";\nimport { CollectFeesDetailsCard } from \"./bonfida-bot/CollectFeesDetails\";\nimport { CreateBotDetailsCard } from \"./bonfida-bot/CreateBotDetails\";\nimport { DepositDetailsCard } from \"./bonfida-bot/DepositDetails\";\nimport { InitializeBotDetailsCard } from \"./bonfida-bot/InitializeBotDetails\";\nimport { RedeemDetailsCard } from \"./bonfida-bot/RedeemDetails\";\nimport { SettleFundsDetailsCard } from \"./bonfida-bot/SettleFundsDetails\";\nimport { CreateOrderDetailsCard } from \"./bonfida-bot/CreateOrderDetails\";\n\nexport function BonfidaBotDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  signature: string;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, signature, innerCards, childIndex } = props;\n\n  const { url } = useCluster();\n\n  let title;\n  try {\n    title = parseBonfidaBotInstructionTitle(ix);\n\n    switch (title) {\n      case \"Initialize Bot\":\n        return (\n          <InitializeBotDetailsCard info={decodeInitializeBot(ix)} {...props} />\n        );\n      case \"Create Bot\":\n        return <CreateBotDetailsCard info={decodeCreateBot(ix)} {...props} />;\n      case \"Deposit\":\n        return <DepositDetailsCard info={decodeDeposit(ix)} {...props} />;\n      case \"Create Order\":\n        return (\n          <CreateOrderDetailsCard info={decodeCreateOrder(ix)} {...props} />\n        );\n      case \"Cancel Order\":\n        return (\n          <CancelOrderDetailsCard info={decodeCancelOrder(ix)} {...props} />\n        );\n      case \"Settle Funds\":\n        return (\n          <SettleFundsDetailsCard info={decodeSettleFunds(ix)} {...props} />\n        );\n      case \"settleFunds\":\n        return (\n          <SettleFundsDetailsCard info={decodeSettleFunds(ix)} {...props} />\n        );\n      case \"Redeem\":\n        return <RedeemDetailsCard info={decodeRedeem(ix)} {...props} />;\n      case \"Collect Fees\":\n        return (\n          <CollectFeesDetailsCard info={decodeCollectFees(ix)} {...props} />\n        );\n    }\n  } catch (error) {\n    reportError(error, {\n      url: url,\n      signature: signature,\n    });\n  }\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title={`Bonfida Bot: ${title || \"Unknown\"}`}\n      innerCards={innerCards}\n      childIndex={childIndex}\n      defaultRaw\n    />\n  );\n}\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport { enums, nullable, number, type, string, Infer } from \"superstruct\";\nimport { PublicKeyFromString } from \"validators/pubkey\";\n\nexport type WriteInfo = Infer<typeof WriteInfo>;\nexport const WriteInfo = type({\n  account: PublicKeyFromString,\n  authority: PublicKeyFromString,\n  bytes: string(),\n  offset: number(),\n});\n\nexport type InitializeBufferInfo = Infer<typeof InitializeBufferInfo>;\nexport const InitializeBufferInfo = type({\n  account: PublicKeyFromString,\n  authority: PublicKeyFromString,\n});\n\nexport type UpgradeInfo = Infer<typeof UpgradeInfo>;\nexport const UpgradeInfo = type({\n  programDataAccount: PublicKeyFromString,\n  programAccount: PublicKeyFromString,\n  bufferAccount: PublicKeyFromString,\n  spillAccount: PublicKeyFromString,\n  authority: PublicKeyFromString,\n  rentSysvar: PublicKeyFromString,\n  clockSysvar: PublicKeyFromString,\n});\n\nexport type SetAuthorityInfo = Infer<typeof SetAuthorityInfo>;\nexport const SetAuthorityInfo = type({\n  account: PublicKeyFromString,\n  authority: PublicKeyFromString,\n  newAuthority: nullable(PublicKeyFromString),\n});\n\nexport type DeployWithMaxDataLenInfo = Infer<typeof DeployWithMaxDataLenInfo>;\nexport const DeployWithMaxDataLenInfo = type({\n  programDataAccount: PublicKeyFromString,\n  programAccount: PublicKeyFromString,\n  payerAccount: PublicKeyFromString,\n  bufferAccount: PublicKeyFromString,\n  authority: PublicKeyFromString,\n  rentSysvar: PublicKeyFromString,\n  clockSysvar: PublicKeyFromString,\n  systemProgram: PublicKeyFromString,\n  maxDataLen: number(),\n});\n\nexport type UpgradeableBpfLoaderInstructionType = Infer<\n  typeof UpgradeableBpfLoaderInstructionType\n>;\nexport const UpgradeableBpfLoaderInstructionType = enums([\n  \"initializeBuffer\",\n  \"deployWithMaxDataLen\",\n  \"setAuthority\",\n  \"write\",\n  \"finalize\",\n]);\n","import React from \"react\";\nimport {\n  ParsedTransaction,\n  ParsedInstruction,\n  SignatureResult,\n  PublicKey,\n} from \"@velas/web3\";\nimport { Address } from \"components/common/Address\";\nimport { create, Struct } from \"superstruct\";\nimport { camelToTitleCase } from \"utils\";\nimport { reportError } from \"utils/sentry\";\nimport { ParsedInfo } from \"validators\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { UnknownDetailsCard } from \"../UnknownDetailsCard\";\nimport {\n  DeployWithMaxDataLenInfo,\n  InitializeBufferInfo,\n  SetAuthorityInfo,\n  UpgradeInfo,\n  WriteInfo,\n} from \"./types\";\n\ntype DetailsProps = {\n  tx: ParsedTransaction;\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n};\n\nexport function BpfUpgradeableLoaderDetailsCard(props: DetailsProps) {\n  try {\n    const parsed = create(props.ix.parsed, ParsedInfo);\n    switch (parsed.type) {\n      case \"write\": {\n        return renderDetails<WriteInfo>(props, parsed, WriteInfo);\n      }\n      case \"upgrade\": {\n        return renderDetails<UpgradeInfo>(props, parsed, UpgradeInfo);\n      }\n      case \"setAuthority\": {\n        return renderDetails<SetAuthorityInfo>(props, parsed, SetAuthorityInfo);\n      }\n      case \"deployWithMaxDataLen\": {\n        return renderDetails<DeployWithMaxDataLenInfo>(\n          props,\n          parsed,\n          DeployWithMaxDataLenInfo\n        );\n      }\n      case \"initializeBuffer\": {\n        return renderDetails<InitializeBufferInfo>(\n          props,\n          parsed,\n          InitializeBufferInfo\n        );\n      }\n      default:\n        return <UnknownDetailsCard {...props} />;\n    }\n  } catch (error) {\n    reportError(error, {\n      signature: props.tx.signatures[0],\n    });\n    return <UnknownDetailsCard {...props} />;\n  }\n}\n\nfunction renderDetails<T>(\n  props: DetailsProps,\n  parsed: ParsedInfo,\n  struct: Struct<T>\n) {\n  const info = create(parsed.info, struct);\n\n  const attributes: JSX.Element[] = [];\n  for (let [key, value] of Object.entries(info)) {\n    if (value instanceof PublicKey) {\n      value = <Address pubkey={value} alignRight link />;\n    } else if (key === \"bytes\") {\n      value = (\n        <pre className=\"d-inline-block text-left mb-0 data-wrap\">{value}</pre>\n      );\n    }\n\n    attributes.push(\n      <tr key={key}>\n        <td>\n          {camelToTitleCase(key)}{\" \"}\n          {key === \"bytes\" && <span className=\"text-muted\">(Base 64)</span>}\n        </td>\n        <td className=\"text-lg-right\">{value}</td>\n      </tr>\n    );\n  }\n\n  return (\n    <InstructionCard\n      {...props}\n      title={`BPF Upgradeable Loader: ${camelToTitleCase(parsed.type)}`}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={props.ix.programId} alignRight link />\n        </td>\n      </tr>\n      {attributes}\n    </InstructionCard>\n  );\n}\n","/* eslint-disable @typescript-eslint/no-redeclare */\n\nimport {\n  array,\n  nullable,\n  number,\n  optional,\n  type,\n  string,\n  Infer,\n} from \"superstruct\";\nimport { PublicKeyFromString } from \"validators/pubkey\";\n\nexport type InitializeInfo = Infer<typeof InitializeInfo>;\nexport const InitializeInfo = type({\n  voteAccount: PublicKeyFromString,\n  rentSysvar: PublicKeyFromString,\n  clockSysvar: PublicKeyFromString,\n  node: PublicKeyFromString,\n  authorizedVoter: PublicKeyFromString,\n  authorizedWithdrawer: PublicKeyFromString,\n  commission: number(),\n});\n\nexport type AuthorizeInfo = Infer<typeof AuthorizeInfo>;\nexport const AuthorizeInfo = type({\n  voteAccount: PublicKeyFromString,\n  clockSysvar: PublicKeyFromString,\n  authority: PublicKeyFromString,\n  newAuthority: PublicKeyFromString,\n  authorityType: number(),\n});\n\nexport type VoteInfo = Infer<typeof VoteInfo>;\nexport const VoteInfo = type({\n  clockSysvar: PublicKeyFromString,\n  slotHashesSysvar: PublicKeyFromString,\n  voteAccount: PublicKeyFromString,\n  voteAuthority: PublicKeyFromString,\n  vote: type({\n    hash: string(),\n    slots: array(number()),\n    timestamp: optional(nullable(number())),\n  }),\n});\n\nexport type WithdrawInfo = Infer<typeof WithdrawInfo>;\nexport const WithdrawInfo = type({\n  voteAccount: PublicKeyFromString,\n  destination: PublicKeyFromString,\n  withdrawAuthority: PublicKeyFromString,\n  lamports: number(),\n});\n\nexport type UpdateValidatorInfo = Infer<typeof UpdateValidatorInfo>;\nexport const UpdateValidatorInfo = type({\n  voteAccount: PublicKeyFromString,\n  newValidatorIdentity: PublicKeyFromString,\n  withdrawAuthority: PublicKeyFromString,\n});\n\nexport type UpdateCommissionInfo = Infer<typeof UpdateCommissionInfo>;\nexport const UpdateCommissionInfo = type({\n  voteAccount: PublicKeyFromString,\n  withdrawAuthority: PublicKeyFromString,\n  commission: number(),\n});\n\nexport type VoteSwitchInfo = Infer<typeof VoteSwitchInfo>;\nexport const VoteSwitchInfo = type({\n  voteAccount: PublicKeyFromString,\n  slotHashesSysvar: PublicKeyFromString,\n  clockSysvar: PublicKeyFromString,\n  voteAuthority: PublicKeyFromString,\n  vote: type({\n    hash: string(),\n    slots: array(number()),\n    timestamp: number(),\n  }),\n  hash: string(),\n});\n","import React from \"react\";\nimport { PublicKey } from \"@velas/web3\";\nimport { create, Struct } from \"superstruct\";\nimport { ParsedInfo } from \"validators\";\nimport {\n  UpdateCommissionInfo,\n  UpdateValidatorInfo,\n  VoteInfo,\n  VoteSwitchInfo,\n  WithdrawInfo,\n  AuthorizeInfo,\n} from \"./types\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { Address } from \"components/common/Address\";\nimport { displayTimestamp } from \"utils/date\";\nimport { UnknownDetailsCard } from \"../UnknownDetailsCard\";\nimport { InstructionDetailsProps } from \"components/transaction/InstructionsSection\";\nimport { camelToTitleCase } from \"utils\";\nimport { useCluster } from \"providers/cluster\";\nimport { reportError } from \"utils/sentry\";\n\nexport function VoteDetailsCard(props: InstructionDetailsProps) {\n  const { url } = useCluster();\n\n  try {\n    const parsed = create(props.ix.parsed, ParsedInfo);\n\n    switch (parsed.type) {\n      case \"vote\":\n        return renderDetails<VoteInfo>(props, parsed, VoteInfo);\n      case \"authorize\":\n        return renderDetails<AuthorizeInfo>(props, parsed, AuthorizeInfo);\n      case \"withdraw\":\n        return renderDetails<WithdrawInfo>(props, parsed, WithdrawInfo);\n      case \"updateValidator\":\n        return renderDetails<UpdateValidatorInfo>(\n          props,\n          parsed,\n          UpdateValidatorInfo\n        );\n      case \"updateCommission\":\n        return renderDetails<UpdateCommissionInfo>(\n          props,\n          parsed,\n          UpdateCommissionInfo\n        );\n      case \"voteSwitch\":\n        return renderDetails<VoteSwitchInfo>(props, parsed, VoteSwitchInfo);\n    }\n  } catch (error) {\n    reportError(error, {\n      url,\n    });\n  }\n\n  return <UnknownDetailsCard {...props} />;\n}\n\nfunction renderDetails<T>(\n  props: InstructionDetailsProps,\n  parsed: ParsedInfo,\n  struct: Struct<T>\n) {\n  const info = create(parsed.info, struct);\n  const attributes: JSX.Element[] = [];\n\n  for (let [key, value] of Object.entries(info)) {\n    if (value instanceof PublicKey) {\n      value = <Address pubkey={value} alignRight link />;\n    }\n\n    if (key === \"vote\") {\n      attributes.push(\n        <tr key=\"vote-hash\">\n          <td>Vote Hash</td>\n          <td className=\"text-lg-right\">\n            <pre className=\"d-inline-block text-left mb-0\">{value.hash}</pre>\n          </td>\n        </tr>\n      );\n\n      if (value.timestamp) {\n        attributes.push(\n          <tr key=\"timestamp\">\n            <td>Timestamp</td>\n            <td className=\"text-lg-right text-monospace\">\n              {displayTimestamp(value.timestamp * 1000)}\n            </td>\n          </tr>\n        );\n      }\n\n      attributes.push(\n        <tr key=\"vote-slots\">\n          <td>Slots</td>\n          <td className=\"text-lg-right text-monospace\">\n            <pre className=\"d-inline-block text-left mb-0\">\n              {value.slots.join(\"\\n\")}\n            </pre>\n          </td>\n        </tr>\n      );\n    } else {\n      attributes.push(\n        <tr key={key}>\n          <td>{camelToTitleCase(key)} </td>\n          <td className=\"text-lg-right\">{value}</td>\n        </tr>\n      );\n    }\n  }\n\n  return (\n    <InstructionCard\n      {...props}\n      title={`Vote: ${camelToTitleCase(parsed.type)}`}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={props.ix.programId} alignRight link />\n        </td>\n      </tr>\n      {attributes}\n    </InstructionCard>\n  );\n}\n","import React from \"react\";\nimport { ParsedInstruction, PublicKey, SignatureResult } from \"@velas/web3\";\nimport { InstructionCard } from \"./InstructionCard\";\nimport { Address } from \"components/common/Address\";\n\nexport function AssociatedTokenDetailsCard({\n  ix,\n  index,\n  result,\n  innerCards,\n  childIndex,\n}: {\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const info = ix.parsed.info;\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Associated Token Program: Create\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Program</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={ix.programId} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Account</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={new PublicKey(info.account)} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Mint</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={new PublicKey(info.mint)} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Wallet</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={new PublicKey(info.wallet)} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import {\n  Config,\n  GroupConfig,\n  MangoInstructionLayout,\n  PerpMarket,\n  PerpMarketConfig,\n  PerpMarketLayout,\n  SpotMarketConfig,\n} from \"@blockworks-foundation/mango-client\";\nimport { Market } from \"@project-serum/serum\";\nimport {\n  AccountInfo,\n  AccountMeta,\n  Connection,\n  PublicKey,\n  TransactionInstruction,\n} from \"@velas/web3\";\n\n// note: mainnet.1 suffices since its a superset of mainnet.0\nconst mangoGroups = Config.ids().groups.filter(\n  (group) => group.name !== \"mainnet.0\"\n);\n\n// caching of account info's by public keys\nlet accountInfoCache: Record<string, Promise<AccountInfo<Buffer> | null>> = {};\nfunction getAccountInfo(\n  clusterUrl: string,\n  publicKey: PublicKey\n): Promise<AccountInfo<Buffer> | null> {\n  if (publicKey.toBase58() in accountInfoCache) {\n    return accountInfoCache[publicKey.toBase58()];\n  }\n  const connection = new Connection(clusterUrl);\n  const accountInfoPromise = connection.getAccountInfo(publicKey);\n  accountInfoCache[publicKey.toBase58()] = accountInfoPromise;\n  return accountInfoPromise;\n}\n\nfunction findGroupConfig(programId: PublicKey): GroupConfig | undefined {\n  const filtered = mangoGroups.filter((group) =>\n    group.mangoProgramId.equals(programId)\n  );\n  if (filtered.length) {\n    return filtered[0];\n  }\n}\n\nexport const isMangoInstruction = (instruction: TransactionInstruction) => {\n  return mangoGroups\n    .map((group) => group.mangoProgramId.toBase58())\n    .includes(instruction.programId.toBase58());\n};\n\nexport const INSTRUCTION_LOOKUP: { [key: number]: string } = {\n  0: \"InitMangoGroup\",\n  1: \"InitMangoAccount\",\n  2: \"Deposit\",\n  3: \"Withdraw\",\n  4: \"AddSpotMarket\",\n  5: \"AddToBasket\",\n  6: \"Borrow\",\n  7: \"CachePrices\",\n  8: \"CacheRootBanks\",\n  9: \"PlaceSpotOrder\",\n  10: \"AddOracle\",\n  11: \"AddPerpMarket\",\n  12: \"PlacePerpOrder\",\n  13: \"CancelPerpOrderByClientId\",\n  14: \"CancelPerpOrder\",\n  15: \"ConsumeEvents\",\n  16: \"CachePerpMarkets\",\n  17: \"UpdateFunding\",\n  18: \"SetOracle\",\n  19: \"SettleFunds\",\n  20: \"CancelSpotOrder\",\n  21: \"UpdateRootBank\",\n  22: \"SettlePnl\",\n  23: \"SettleBorrow\",\n  24: \"ForceCancelSpotOrders\",\n  25: \"ForceCancelPerpOrders\",\n  26: \"LiquidateTokenAndToken\",\n  27: \"LiquidateTokenAndPerp\",\n  28: \"LiquidatePerpMarket\",\n  29: \"SettleFees\",\n  30: \"ResolvePerpBankruptcy\",\n  31: \"ResolveTokenBankruptcy\",\n  32: \"InitSpotOpenOrders\",\n  33: \"RedeemMngo\",\n  34: \"AddMangoAccountInfo\",\n  35: \"DepositMsrm\",\n  36: \"WithdrawMsrm\",\n  37: \"ChangePerpMarketParams\",\n};\n\nexport const parseMangoInstructionTitle = (\n  instruction: TransactionInstruction\n): string => {\n  const code = instruction.data[0];\n\n  if (!(code in INSTRUCTION_LOOKUP)) {\n    throw new Error(`Unrecognized Mango instruction code: ${code}`);\n  }\n  return INSTRUCTION_LOOKUP[code];\n};\n\nexport type Deposit = {\n  quantity: number;\n};\n\nexport const decodeDeposit = (ix: TransactionInstruction): Deposit => {\n  const decoded = MangoInstructionLayout.decode(ix.data);\n  const deposit: Deposit = {\n    quantity: decoded.Deposit.quantity.toNumber(),\n  };\n  return deposit;\n};\n\nexport type AddToBasket = {\n  marketIndex: number;\n};\n\nexport const decodeAddToBasket = (ix: TransactionInstruction): AddToBasket => {\n  const decoded = MangoInstructionLayout.decode(ix.data);\n  const addToBasket: AddToBasket = {\n    marketIndex: decoded.AddToBasket.marketIndex.toNumber(),\n  };\n  return addToBasket;\n};\n\nexport type Withdraw = {\n  quantity: number;\n  allowBorrow: String;\n};\n\nexport const decodeWithdraw = (ix: TransactionInstruction): Withdraw => {\n  const decoded = MangoInstructionLayout.decode(ix.data);\n  const withdraw: Withdraw = {\n    quantity: decoded.Withdraw.quantity.toNumber(),\n    allowBorrow: decoded.Withdraw.allowBorrow.toString(),\n  };\n  return withdraw;\n};\n\nexport type PlaceSpotOrder = {\n  side: String;\n  limitPrice: number;\n  maxBaseQuantity: number;\n  maxQuoteQuantity: number;\n  selfTradeBehavior: String;\n  orderType: String;\n  clientId: String;\n  limit: String;\n};\n\nexport const decodePlaceSpotOrder = (\n  ix: TransactionInstruction\n): PlaceSpotOrder => {\n  const decoded = MangoInstructionLayout.decode(ix.data);\n  const placeSpotOrder: PlaceSpotOrder = {\n    side: decoded.PlaceSpotOrder.side.toString(),\n    limitPrice: decoded.PlaceSpotOrder.limitPrice.toNumber(),\n    maxBaseQuantity: decoded.PlaceSpotOrder.maxBaseQuantity.toNumber(),\n    maxQuoteQuantity: decoded.PlaceSpotOrder.maxQuoteQuantity.toNumber(),\n    selfTradeBehavior: decoded.PlaceSpotOrder.selfTradeBehavior,\n    orderType: decoded.PlaceSpotOrder.orderType.toString(),\n    clientId: decoded.PlaceSpotOrder.clientId.toString(),\n    limit: decoded.PlaceSpotOrder.limit.toString(),\n  };\n\n  return placeSpotOrder;\n};\n\nexport type CancelSpotOrder = {\n  orderId: String;\n  side: String;\n};\n\nexport const decodeCancelSpotOrder = (\n  ix: TransactionInstruction\n): CancelSpotOrder => {\n  const decoded = MangoInstructionLayout.decode(ix.data);\n  const cancelSpotOrder: CancelSpotOrder = {\n    orderId: decoded.CancelSpotOrder.orderId.toString(),\n    side: decoded.CancelSpotOrder.side.toString(),\n  };\n  return cancelSpotOrder;\n};\n\nexport type PlacePerpOrder = {\n  price: number;\n  quantity: number;\n  clientOrderId: String;\n  side: String;\n  orderType: String;\n};\nexport const decodePlacePerpOrder = (\n  ix: TransactionInstruction\n): PlacePerpOrder => {\n  const decoded = MangoInstructionLayout.decode(ix.data);\n  const placePerpOrder: PlacePerpOrder = {\n    price: decoded.PlacePerpOrder.price.toNumber(),\n    quantity: decoded.PlacePerpOrder.quantity.toNumber(),\n    clientOrderId: decoded.PlacePerpOrder.clientOrderId.toString(),\n    side: decoded.PlacePerpOrder.side.toString(),\n    orderType: decoded.PlacePerpOrder.orderType.toString(),\n  };\n\n  return placePerpOrder;\n};\n\nexport type CancelPerpOrder = {\n  orderId: String;\n  invalidIdOk: String;\n};\n\nexport const decodeCancelPerpOrder = (\n  ix: TransactionInstruction\n): CancelPerpOrder => {\n  const decoded = MangoInstructionLayout.decode(ix.data);\n  const cancelPerpOrder: CancelPerpOrder = {\n    orderId: decoded.CancelPerpOrder.orderId.toString(),\n    invalidIdOk: decoded.CancelPerpOrder.invalidIdOk.toString(),\n  };\n  return cancelPerpOrder;\n};\n\nexport type ChangePerpMarketParams = {\n  maintLeverageOption: Boolean;\n  maintLeverage: number;\n  initLeverageOption: Boolean;\n  initLeverage: number;\n  liquidationFeeOption: Boolean;\n  liquidationFee: number;\n  makerFeeOption: Boolean;\n  makerFee: number;\n  takerFeeOption: Boolean;\n  takerFee: number;\n  rateOption: Boolean;\n  rate: number;\n  maxDepthBpsOption: Boolean;\n  maxDepthBps: number;\n  targetPeriodLengthOption: Boolean;\n  targetPeriodLength: number;\n  mngoPerPeriodOption: Boolean;\n  mngoPerPeriod: number;\n};\n\nexport const decodeChangePerpMarketParams = (\n  ix: TransactionInstruction\n): ChangePerpMarketParams => {\n  const decoded = MangoInstructionLayout.decode(ix.data);\n  const changePerpMarketParams: ChangePerpMarketParams = {\n    maintLeverageOption: decoded.ChangePerpMarketParams.maintLeverageOption,\n    maintLeverage: decoded.ChangePerpMarketParams.maintLeverage.toString(),\n    initLeverageOption: decoded.ChangePerpMarketParams.initLeverageOption,\n    initLeverage: decoded.ChangePerpMarketParams.initLeverage.toString(),\n    liquidationFeeOption: decoded.ChangePerpMarketParams.liquidationFeeOption,\n    liquidationFee: decoded.ChangePerpMarketParams.liquidationFee.toString(),\n    makerFeeOption: decoded.ChangePerpMarketParams.makerFeeOption,\n    makerFee: decoded.ChangePerpMarketParams.makerFee.toString(),\n    takerFeeOption: decoded.ChangePerpMarketParams.takerFeeOption,\n    takerFee: decoded.ChangePerpMarketParams.takerFee.toString(),\n    rateOption: decoded.ChangePerpMarketParams.rateOption,\n    rate: decoded.ChangePerpMarketParams.rate.toString(),\n    maxDepthBpsOption: decoded.ChangePerpMarketParams.maxDepthBpsOption,\n    maxDepthBps: decoded.ChangePerpMarketParams.maxDepthBps.toString(),\n    targetPeriodLengthOption:\n      decoded.ChangePerpMarketParams.targetPeriodLengthOption,\n    targetPeriodLength:\n      decoded.ChangePerpMarketParams.targetPeriodLength.toString(),\n    mngoPerPeriodOption: decoded.ChangePerpMarketParams.mngoPerPeriodOption,\n    mngoPerPeriod: decoded.ChangePerpMarketParams.mngoPerPeriod.toString(),\n  };\n  return changePerpMarketParams;\n};\n\nexport type AddSpotMarket = {\n  marketIndex: number;\n  maintLeverage: number;\n  initLeverage: number;\n  liquidationFee: number;\n  optimalUtil: number;\n  optimalRate: number;\n  maxRate: number;\n};\n\nexport const decodeAddSpotMarket = (\n  ix: TransactionInstruction\n): AddSpotMarket => {\n  const decoded = MangoInstructionLayout.decode(ix.data);\n  const addSpotMarket: AddSpotMarket = {\n    marketIndex: decoded.AddSpotMarket.marketIndex.toNumber(),\n    maintLeverage: decoded.AddSpotMarket.maintLeverage.toNumber(),\n    initLeverage: decoded.AddSpotMarket.initLeverage.toNumber(),\n    liquidationFee: decoded.AddSpotMarket.liquidationFee.toNumber(),\n    optimalUtil: decoded.AddSpotMarket.optimalUtil.toNumber(),\n    optimalRate: decoded.AddSpotMarket.optimalRate.toNumber(),\n    maxRate: decoded.AddSpotMarket.maxRate.toNumber(),\n  };\n  return addSpotMarket;\n};\n\nexport type AddPerpMarket = {\n  marketIndex: number;\n  maintLeverage: number;\n  initLeverage: number;\n  liquidationFee: number;\n  makerFee: number;\n  takerFee: number;\n  baseLotSize: number;\n  quoteLotSize: number;\n  rate: number;\n  maxDepthBps: number;\n  targetPeriodLength: number;\n  mngoPerPeriod: number;\n};\n\nexport const decodeAddPerpMarket = (\n  ix: TransactionInstruction\n): AddPerpMarket => {\n  const decoded = MangoInstructionLayout.decode(ix.data);\n  const addPerpMarket: AddPerpMarket = {\n    marketIndex: decoded.AddPerpMarket.marketIndex.toNumber(),\n    maintLeverage: decoded.AddPerpMarket.maintLeverage.toNumber(),\n    initLeverage: decoded.AddPerpMarket.initLeverage.toNumber(),\n    liquidationFee: decoded.AddPerpMarket.liquidationFee.toNumber(),\n    makerFee: decoded.AddPerpMarket.makerFee.toNumber(),\n    takerFee: decoded.AddPerpMarket.takerFee.toNumber(),\n    baseLotSize: decoded.AddPerpMarket.baseLotSize.toNumber(),\n    quoteLotSize: decoded.AddPerpMarket.quoteLotSize.toNumber(),\n    rate: decoded.AddPerpMarket.rate.toNumber(),\n    maxDepthBps: decoded.AddPerpMarket.maxDepthBps.toNumber(),\n    targetPeriodLength: decoded.AddPerpMarket.targetPeriodLength.toNumber(),\n    mngoPerPeriod: decoded.AddPerpMarket.mngoPerPeriod.toNumber(),\n  };\n  return addPerpMarket;\n};\n\nexport type OrderLotDetails = {\n  price: number;\n  size: number;\n};\n\n////\n\nexport function logAllKeys(keys: AccountMeta[]) {\n  keys.map((key) => console.log(key.pubkey.toBase58()));\n}\n\nexport function getSpotMarketFromInstruction(\n  ix: TransactionInstruction,\n  spotMarket: AccountMeta\n): SpotMarketConfig | undefined {\n  const groupConfig = findGroupConfig(ix.programId);\n  if (groupConfig === undefined) {\n    return;\n  }\n  const spotMarketConfigs = groupConfig.spotMarkets.filter((mangoSpotMarket) =>\n    spotMarket.pubkey.equals(mangoSpotMarket.publicKey)\n  );\n  if (spotMarketConfigs.length) {\n    return spotMarketConfigs[0];\n  }\n}\n\nexport async function getSpotMarketFromSpotMarketConfig(\n  programId: PublicKey,\n  clusterUrl: string,\n  mangoSpotMarketConfig: SpotMarketConfig\n): Promise<Market | undefined> {\n  const connection = new Connection(clusterUrl);\n  const groupConfig = findGroupConfig(programId);\n  if (groupConfig === undefined) {\n    return;\n  }\n  return await Market.load(\n    connection,\n    mangoSpotMarketConfig.publicKey,\n    undefined,\n    groupConfig.serumProgramId\n  );\n}\n\nexport function getPerpMarketFromInstruction(\n  ix: TransactionInstruction,\n  perpMarket: AccountMeta\n): PerpMarketConfig | undefined {\n  const groupConfig = findGroupConfig(ix.programId);\n  if (groupConfig === undefined) {\n    return;\n  }\n  const perpMarketConfigs = groupConfig.perpMarkets.filter((mangoPerpMarket) =>\n    perpMarket.pubkey.equals(mangoPerpMarket.publicKey)\n  );\n  if (perpMarketConfigs.length) {\n    return perpMarketConfigs[0];\n  }\n}\n\nexport async function getPerpMarketFromPerpMarketConfig(\n  clusterUrl: string,\n  mangoPerpMarketConfig: PerpMarketConfig\n): Promise<PerpMarket> {\n  const acc = await getAccountInfo(clusterUrl, mangoPerpMarketConfig.publicKey);\n  const decoded = PerpMarketLayout.decode(acc?.data);\n\n  return new PerpMarket(\n    mangoPerpMarketConfig.publicKey,\n    mangoPerpMarketConfig.baseDecimals,\n    mangoPerpMarketConfig.quoteDecimals,\n    decoded\n  );\n}\n\nexport function spotMarketFromIndex(\n  ix: TransactionInstruction,\n  marketIndex: number\n): String | undefined {\n  const groupConfig = findGroupConfig(ix.programId);\n  if (groupConfig === undefined) {\n    return;\n  }\n  const spotMarketConfigs = groupConfig.spotMarkets.filter(\n    (spotMarketConfig) => spotMarketConfig.marketIndex === marketIndex\n  );\n  if (!spotMarketConfigs.length) {\n    return \"UNKNOWN\";\n  }\n  return spotMarketConfigs[0].name;\n}\n","import { SignatureResult, TransactionInstruction } from \"@velas/web3\";\nimport { InstructionCard } from \"../InstructionCard\";\n\nexport function AddOracleDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Mango: AddOracle\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    ></InstructionCard>\n  );\n}\n","import { SignatureResult, TransactionInstruction } from \"@velas/web3\";\nimport moment from \"moment\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { AddPerpMarket } from \"./types\";\n\nexport function AddPerpMarketDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: AddPerpMarket;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Mango: AddPerpMarket\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Market index</td>\n        <td className=\"text-lg-right\">{info.marketIndex}</td>\n      </tr>\n      <tr>\n        <td>Maintenance leverage</td>\n        <td className=\"text-lg-right\">{info.maintLeverage}</td>\n      </tr>\n      <tr>\n        <td>Initial leverage</td>\n        <td className=\"text-lg-right\">{info.initLeverage}</td>\n      </tr>\n      <tr>\n        <td>Liquidation fee</td>\n        <td className=\"text-lg-right\">{info.liquidationFee}</td>\n      </tr>\n      <tr>\n        <td>Maker fee</td>\n        <td className=\"text-lg-right\">{info.makerFee}</td>\n      </tr>\n      <tr>\n        <td>Taker fee</td>\n        <td className=\"text-lg-right\">{info.takerFee}</td>\n      </tr>\n      <tr>\n        <td>Base lot size</td>\n        <td className=\"text-lg-right\">{info.baseLotSize}</td>\n      </tr>\n      <tr>\n        <td>Quote lot size</td>\n        <td className=\"text-lg-right\">{info.quoteLotSize}</td>\n      </tr>\n      <tr>\n        <td>Rate</td>\n        <td className=\"text-lg-right\">{info.rate}</td>\n      </tr>\n      <tr>\n        <td>Max depth bps</td>\n        <td className=\"text-lg-right\">{info.maxDepthBps}</td>\n      </tr>\n      <tr>\n        <td>\n          MNGO per{\" \"}\n          {moment.duration(info.targetPeriodLength, \"seconds\").humanize()}\n        </td>\n        <td className=\"text-lg-right\">\n          {info.mngoPerPeriod} {}\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import { SignatureResult, TransactionInstruction } from \"@velas/web3\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { AddSpotMarket, spotMarketFromIndex } from \"./types\";\n\nexport function AddSpotMarketDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: AddSpotMarket;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Mango: AddSpotMarket\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      {spotMarketFromIndex(ix, info.marketIndex) !== \"UNKNOWN\" && (\n        <tr>\n          <td>Market</td>\n          <td className=\"text-lg-right\">\n            {spotMarketFromIndex(ix, info.marketIndex)}\n          </td>\n        </tr>\n      )}\n      <tr>\n        <td>Market index</td>\n        <td className=\"text-lg-right\">{info.marketIndex}</td>\n      </tr>\n      <tr>\n        <td>Maint leverage</td>\n        <td className=\"text-lg-right\">{info.maintLeverage}</td>\n      </tr>\n      <tr>\n        <td>Init leverage</td>\n        <td className=\"text-lg-right\">{info.initLeverage}</td>\n      </tr>\n      <tr>\n        <td>Liquidation fee</td>\n        <td className=\"text-lg-right\">{info.liquidationFee}</td>\n      </tr>\n      <tr>\n        <td>Optimal util</td>\n        <td className=\"text-lg-right\">{info.optimalUtil}</td>\n      </tr>\n      <tr>\n        <td>Optimal rate</td>\n        <td className=\"text-lg-right\">{info.optimalRate}</td>\n      </tr>\n      <tr>\n        <td>Max rate</td>\n        <td className=\"text-lg-right\">{info.maxRate}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import { SignatureResult, TransactionInstruction } from \"@velas/web3\";\nimport { Address } from \"components/common/Address\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { CancelPerpOrder, getPerpMarketFromInstruction } from \"./types\";\n\nexport function CancelPerpOrderDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: CancelPerpOrder;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n  const mangoAccount = ix.keys[1];\n  const perpMarketAccountMeta = ix.keys[3];\n  const mangoPerpMarketConfig = getPerpMarketFromInstruction(\n    ix,\n    perpMarketAccountMeta\n  );\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Mango: CancelPerpOrder\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Mango account</td>\n        <td>\n          <Address pubkey={mangoAccount.pubkey} alignRight link />\n        </td>\n      </tr>\n\n      {mangoPerpMarketConfig !== undefined && (\n        <tr>\n          <td>Perp market</td>\n          <td className=\"text-lg-right\">{mangoPerpMarketConfig.name}</td>\n        </tr>\n      )}\n\n      <tr>\n        <td>Perp market address</td>\n        <td>\n          <Address pubkey={perpMarketAccountMeta.pubkey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Order Id</td>\n        <td className=\"text-lg-right\">{info.orderId}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import { SignatureResult, TransactionInstruction } from \"@velas/web3\";\nimport { Address } from \"components/common/Address\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { CancelSpotOrder, getSpotMarketFromInstruction } from \"./types\";\n\nexport function CancelSpotOrderDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: CancelSpotOrder;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n  const mangoAccount = ix.keys[2];\n  const spotMarketAccountMeta = ix.keys[4];\n  const mangoSpotMarketConfig = getSpotMarketFromInstruction(\n    ix,\n    spotMarketAccountMeta\n  );\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Mango: CancelSpotOrder\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Mango account</td>\n        <td>\n          <Address pubkey={mangoAccount.pubkey} alignRight link />\n        </td>\n      </tr>\n\n      {mangoSpotMarketConfig !== undefined && (\n        <tr>\n          <td>Spot market</td>\n          <td className=\"text-lg-right\">{mangoSpotMarketConfig.name}</td>\n        </tr>\n      )}\n\n      <tr>\n        <td>Spot market address</td>\n        <td>\n          <Address pubkey={spotMarketAccountMeta.pubkey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Order Id</td>\n        <td className=\"text-lg-right\">{info.orderId}</td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import { SignatureResult, TransactionInstruction } from \"@velas/web3\";\nimport moment from \"moment\";\nimport { useCluster } from \"providers/cluster\";\nimport { useEffect, useState } from \"react\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport {\n  ChangePerpMarketParams,\n  getPerpMarketFromInstruction,\n  getPerpMarketFromPerpMarketConfig,\n} from \"./types\";\n\nexport function ChangePerpMarketParamsDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: ChangePerpMarketParams;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n\n  const perpMarketAccountMeta = ix.keys[1];\n  const mangoPerpMarketConfig = getPerpMarketFromInstruction(\n    ix,\n    perpMarketAccountMeta\n  );\n\n  const cluster = useCluster();\n  const [targetPeriodLength, setTargetPeriodLength] = useState<number | null>(\n    null\n  );\n  useEffect(() => {\n    async function getTargetPeriodLength() {\n      if (mangoPerpMarketConfig === undefined) {\n        return;\n      }\n      const mangoPerpMarket = await getPerpMarketFromPerpMarketConfig(\n        cluster.url,\n        mangoPerpMarketConfig\n      );\n\n      setTargetPeriodLength(\n        mangoPerpMarket.liquidityMiningInfo.targetPeriodLength.toNumber()\n      );\n    }\n\n    getTargetPeriodLength();\n  }, [cluster.url, mangoPerpMarketConfig]);\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Mango: ChangePerpMarketParams\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      {info.initLeverageOption && (\n        <tr>\n          <td>Init leverage</td>\n          <td className=\"text-lg-right\">{info.initLeverage}</td>\n        </tr>\n      )}\n      {info.liquidationFeeOption && (\n        <tr>\n          <td>Liquidation fee</td>\n          <td className=\"text-lg-right\">{info.liquidationFee}</td>\n        </tr>\n      )}\n      {info.maintLeverageOption && (\n        <tr>\n          <td>Maint leverage</td>\n          <td className=\"text-lg-right\">{info.maintLeverage}</td>\n        </tr>\n      )}\n      {info.makerFeeOption && (\n        <tr>\n          <td>Maker fee</td>\n          <td className=\"text-lg-right\">{info.makerFee}</td>\n        </tr>\n      )}\n      {info.mngoPerPeriodOption && (\n        <tr>\n          <td>\n            MNGO per{\" \"}\n            {targetPeriodLength !== null &&\n              moment.duration(targetPeriodLength, \"seconds\").humanize()}\n          </td>\n          <td className=\"text-lg-right\">\n            {info.mngoPerPeriod} {}\n          </td>\n        </tr>\n      )}\n\n      {info.maxDepthBpsOption && (\n        <tr>\n          <td>Max depth bps</td>\n          <td className=\"text-lg-right\">{info.maxDepthBps}</td>\n        </tr>\n      )}\n      {info.rateOption && (\n        <tr>\n          <td>Rate</td>\n          <td className=\"text-lg-right\">{info.rate}</td>\n        </tr>\n      )}\n      {info.takerFeeOption && (\n        <tr>\n          <td>Taker fee</td>\n          <td className=\"text-lg-right\">{info.takerFee}</td>\n        </tr>\n      )}\n      {info.targetPeriodLengthOption && (\n        <tr>\n          <td>Target period length</td>\n          <td className=\"text-lg-right\">{info.targetPeriodLength}</td>\n        </tr>\n      )}\n    </InstructionCard>\n  );\n}\n","import { SignatureResult, TransactionInstruction } from \"@velas/web3\";\nimport { Address } from \"components/common/Address\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { getPerpMarketFromInstruction } from \"./types\";\n\nexport function ConsumeEventsDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, innerCards, childIndex } = props;\n\n  const perpMarketAccountMeta = ix.keys[2];\n  const mangoPerpMarketConfig = getPerpMarketFromInstruction(\n    ix,\n    perpMarketAccountMeta\n  );\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title={\"Mango: ConsumeEvents\"}\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      {mangoPerpMarketConfig !== undefined && (\n        <tr>\n          <td>Perp market</td>\n          <td className=\"text-lg-right\">{mangoPerpMarketConfig.name}</td>\n        </tr>\n      )}\n\n      <tr>\n        <td>Perp market address</td>\n        <td>\n          <Address pubkey={perpMarketAccountMeta.pubkey} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import { SignatureResult, TransactionInstruction } from \"@velas/web3\";\nimport { Address } from \"components/common/Address\";\nimport { InstructionCard } from \"../InstructionCard\";\n\nexport function GenericMngoAccountDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  mangoAccountKeyLocation: number;\n  title: String;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const {\n    ix,\n    index,\n    result,\n    mangoAccountKeyLocation,\n    title,\n    innerCards,\n    childIndex,\n  } = props;\n  const mangoAccount = ix.keys[mangoAccountKeyLocation];\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title={\"Mango: \" + title}\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Mango account</td>\n        <td>\n          <Address pubkey={mangoAccount.pubkey} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import { SignatureResult, TransactionInstruction } from \"@velas/web3\";\nimport { Address } from \"components/common/Address\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { getPerpMarketFromInstruction } from \"./types\";\n\nexport function GenericPerpMngoDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  mangoAccountKeyLocation: number;\n  perpMarketKeyLocation: number;\n  title: String;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const {\n    ix,\n    index,\n    result,\n    mangoAccountKeyLocation,\n    perpMarketKeyLocation,\n    title,\n    innerCards,\n    childIndex,\n  } = props;\n  const mangoAccount = ix.keys[mangoAccountKeyLocation];\n  const perpMarketAccountMeta = ix.keys[perpMarketKeyLocation];\n  const mangoPerpMarketConfig = getPerpMarketFromInstruction(\n    ix,\n    perpMarketAccountMeta\n  );\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title={\"Mango: \" + title}\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Mango account</td>\n        <td>\n          <Address pubkey={mangoAccount.pubkey} alignRight link />\n        </td>\n      </tr>\n\n      {mangoPerpMarketConfig !== undefined && (\n        <tr>\n          <td>Perp market</td>\n          <td className=\"text-lg-right\">{mangoPerpMarketConfig.name}</td>\n        </tr>\n      )}\n\n      <tr>\n        <td>Perp market address</td>\n        <td>\n          <Address pubkey={perpMarketAccountMeta.pubkey} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import { SignatureResult, TransactionInstruction } from \"@velas/web3\";\nimport { Address } from \"components/common/Address\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport { getSpotMarketFromInstruction } from \"./types\";\n\nexport function GenericSpotMngoDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  accountKeyLocation: number;\n  spotMarketkeyLocation: number;\n  title: String;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const {\n    ix,\n    index,\n    result,\n    accountKeyLocation,\n    spotMarketkeyLocation,\n    title,\n    innerCards,\n    childIndex,\n  } = props;\n  const mangoAccount = ix.keys[accountKeyLocation];\n  const spotMarketAccountMeta = ix.keys[spotMarketkeyLocation];\n  const mangoSpotMarketConfig = getSpotMarketFromInstruction(\n    ix,\n    spotMarketAccountMeta\n  );\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title={\"Mango: \" + title}\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Mango account</td>\n        <td>\n          <Address pubkey={mangoAccount.pubkey} alignRight link />\n        </td>\n      </tr>\n\n      {mangoSpotMarketConfig !== undefined && (\n        <tr>\n          <td>Spot market</td>\n          <td className=\"text-lg-right\">{mangoSpotMarketConfig.name}</td>\n        </tr>\n      )}\n\n      <tr>\n        <td>Spot market address</td>\n        <td>\n          <Address pubkey={spotMarketAccountMeta.pubkey} alignRight link />\n        </td>\n      </tr>\n    </InstructionCard>\n  );\n}\n","import { SignatureResult, TransactionInstruction } from \"@velas/web3\";\nimport BN from \"bn.js\";\nimport { Address } from \"components/common/Address\";\nimport { useCluster } from \"providers/cluster\";\nimport { useEffect, useState } from \"react\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport {\n  getPerpMarketFromInstruction,\n  getPerpMarketFromPerpMarketConfig,\n  OrderLotDetails,\n  PlacePerpOrder,\n} from \"./types\";\n\nexport function PlacePerpOrderDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: PlacePerpOrder;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n  const mangoAccount = ix.keys[1];\n  const perpMarketAccountMeta = ix.keys[4];\n  const mangoPerpMarketConfig = getPerpMarketFromInstruction(\n    ix,\n    perpMarketAccountMeta\n  );\n\n  const cluster = useCluster();\n  const [orderLotDetails, setOrderLotDetails] =\n    useState<OrderLotDetails | null>(null);\n  useEffect(() => {\n    async function getOrderLotDetails() {\n      if (mangoPerpMarketConfig === undefined) {\n        return;\n      }\n      const mangoPerpMarket = await getPerpMarketFromPerpMarketConfig(\n        cluster.url,\n        mangoPerpMarketConfig\n      );\n      const maxBaseQuantity = mangoPerpMarket.baseLotsToNumber(\n        new BN(info.quantity.toString())\n      );\n      const limitPrice = mangoPerpMarket.priceLotsToNumber(\n        new BN(info.price.toString())\n      );\n      setOrderLotDetails({\n        price: limitPrice,\n        size: maxBaseQuantity,\n      } as OrderLotDetails);\n    }\n    getOrderLotDetails();\n  }, [cluster.url, info.quantity, info.price, mangoPerpMarketConfig]);\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Mango: PlacePerpOrder\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Mango account</td>\n        <td>\n          {\" \"}\n          <Address pubkey={mangoAccount.pubkey} alignRight link />\n        </td>\n      </tr>\n\n      {mangoPerpMarketConfig !== undefined && (\n        <tr>\n          <td>Perp market</td>\n          <td className=\"text-lg-right\">{mangoPerpMarketConfig.name}</td>\n        </tr>\n      )}\n\n      <tr>\n        <td>Perp market address</td>\n        <td>\n          <Address pubkey={perpMarketAccountMeta.pubkey} alignRight link />\n        </td>\n      </tr>\n\n      {info.clientOrderId !== \"0\" && (\n        <tr>\n          <td>Client order Id</td>\n          <td className=\"text-lg-right\">{info.clientOrderId}</td>\n        </tr>\n      )}\n\n      <tr>\n        <td>Order type</td>\n        <td className=\"text-lg-right\">{info.orderType}</td>\n      </tr>\n      <tr>\n        <td>side</td>\n        <td className=\"text-lg-right\">{info.side}</td>\n      </tr>\n\n      {orderLotDetails !== null && (\n        <tr>\n          <td>price</td>\n          <td className=\"text-lg-right\">{orderLotDetails?.price} USDC</td>\n        </tr>\n      )}\n\n      {orderLotDetails !== null && (\n        <tr>\n          <td>quantity</td>\n          <td className=\"text-lg-right\">{orderLotDetails?.size}</td>\n        </tr>\n      )}\n    </InstructionCard>\n  );\n}\n","import { SignatureResult, TransactionInstruction } from \"@velas/web3\";\nimport BN from \"bn.js\";\nimport { Address } from \"components/common/Address\";\nimport { useCluster } from \"providers/cluster\";\nimport { useEffect, useState } from \"react\";\nimport { InstructionCard } from \"../InstructionCard\";\nimport {\n  getSpotMarketFromInstruction,\n  getSpotMarketFromSpotMarketConfig,\n  OrderLotDetails,\n  PlaceSpotOrder,\n} from \"./types\";\n\nexport function PlaceSpotOrderDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  info: PlaceSpotOrder;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, info, innerCards, childIndex } = props;\n  const mangoAccount = ix.keys[1];\n  const spotMarketAccountMeta = ix.keys[5];\n  const mangoSpotMarketConfig = getSpotMarketFromInstruction(\n    ix,\n    spotMarketAccountMeta\n  );\n\n  const cluster = useCluster();\n  const [orderLotDetails, setOrderLotDetails] =\n    useState<OrderLotDetails | null>(null);\n  useEffect(() => {\n    async function getOrderLotDetails() {\n      if (mangoSpotMarketConfig === undefined) {\n        return;\n      }\n      const mangoSpotMarket = await getSpotMarketFromSpotMarketConfig(\n        ix.programId,\n        cluster.url,\n        mangoSpotMarketConfig\n      );\n      if (mangoSpotMarket === undefined) {\n        return;\n      }\n      const maxBaseQuantity = mangoSpotMarket.baseSizeLotsToNumber(\n        new BN(info.maxBaseQuantity.toString())\n      );\n      const limitPrice = mangoSpotMarket.priceLotsToNumber(\n        new BN(info.limitPrice.toString())\n      );\n      setOrderLotDetails({\n        price: limitPrice,\n        size: maxBaseQuantity,\n      } as OrderLotDetails);\n    }\n    getOrderLotDetails();\n  }, [\n    cluster.url,\n    info.maxBaseQuantity,\n    info.limitPrice,\n    ix.programId,\n    mangoSpotMarketConfig,\n  ]);\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title=\"Mango: PlaceSpotOrder\"\n      innerCards={innerCards}\n      childIndex={childIndex}\n    >\n      <tr>\n        <td>Mango account</td>\n        <td>\n          {\" \"}\n          <Address pubkey={mangoAccount.pubkey} alignRight link />\n        </td>\n      </tr>\n\n      {mangoSpotMarketConfig !== undefined && (\n        <tr>\n          <td>Spot market</td>\n          <td className=\"text-lg-right\">{mangoSpotMarketConfig.name}</td>\n        </tr>\n      )}\n\n      <tr>\n        <td>Spot market address</td>\n        <td>\n          <Address pubkey={spotMarketAccountMeta.pubkey} alignRight link />\n        </td>\n      </tr>\n\n      <tr>\n        <td>Order type</td>\n        <td className=\"text-lg-right\">{info.orderType}</td>\n      </tr>\n\n      {info.clientId !== \"0\" && (\n        <tr>\n          <td>Client Id</td>\n          <td className=\"text-lg-right\">{info.clientId}</td>\n        </tr>\n      )}\n\n      <tr>\n        <td>Side</td>\n        <td className=\"text-lg-right\">{info.side}</td>\n      </tr>\n\n      {orderLotDetails !== null && (\n        <tr>\n          <td>Limit price</td>\n          {/* todo fix price */}\n          <td className=\"text-lg-right\">{orderLotDetails?.price} USDC</td>\n        </tr>\n      )}\n\n      {orderLotDetails !== null && (\n        <tr>\n          <td>Size</td>\n          <td className=\"text-lg-right\">{orderLotDetails?.size}</td>\n        </tr>\n      )}\n    </InstructionCard>\n  );\n}\n","import { SignatureResult, TransactionInstruction } from \"@velas/web3\";\nimport { useCluster } from \"providers/cluster\";\nimport { reportError } from \"utils/sentry\";\nimport { InstructionCard } from \"./InstructionCard\";\nimport { AddOracleDetailsCard } from \"./mango/AddOracleDetailsCard\";\nimport { AddPerpMarketDetailsCard } from \"./mango/AddPerpMarketDetailsCard\";\nimport { AddSpotMarketDetailsCard } from \"./mango/AddSpotMarketDetailsCard\";\nimport { CancelPerpOrderDetailsCard } from \"./mango/CancelPerpOrderDetailsCard\";\nimport { CancelSpotOrderDetailsCard } from \"./mango/CancelSpotOrderDetailsCard\";\nimport { ChangePerpMarketParamsDetailsCard } from \"./mango/ChangePerpMarketParamsDetailsCard\";\nimport { ConsumeEventsDetailsCard } from \"./mango/ConsumeEventsDetailsCard\";\nimport { GenericMngoAccountDetailsCard } from \"./mango/GenericMngoAccountDetailsCard\";\nimport { GenericPerpMngoDetailsCard } from \"./mango/GenericPerpMngoDetailsCard\";\nimport { GenericSpotMngoDetailsCard } from \"./mango/GenericSpotMngoDetailsCard\";\nimport { PlacePerpOrderDetailsCard } from \"./mango/PlacePerpOrderDetailsCard\";\nimport { PlaceSpotOrderDetailsCard } from \"./mango/PlaceSpotOrderDetailsCard\";\nimport {\n  decodeAddPerpMarket,\n  decodeAddSpotMarket,\n  decodeCancelPerpOrder,\n  decodeCancelSpotOrder,\n  decodeChangePerpMarketParams,\n  decodePlacePerpOrder,\n  decodePlaceSpotOrder,\n  parseMangoInstructionTitle,\n} from \"./mango/types\";\n\nexport function MangoDetailsCard(props: {\n  ix: TransactionInstruction;\n  index: number;\n  result: SignatureResult;\n  signature: string;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const { ix, index, result, signature, innerCards, childIndex } = props;\n\n  const { url } = useCluster();\n\n  let title;\n  try {\n    title = parseMangoInstructionTitle(ix);\n\n    switch (title) {\n      case \"InitMangoAccount\":\n        return (\n          <GenericMngoAccountDetailsCard\n            mangoAccountKeyLocation={1}\n            title={title}\n            {...props}\n          />\n        );\n      case \"Deposit\":\n        return (\n          <GenericMngoAccountDetailsCard\n            mangoAccountKeyLocation={1}\n            title={title}\n            {...props}\n          />\n        );\n      case \"Withdraw\":\n        return (\n          <GenericMngoAccountDetailsCard\n            mangoAccountKeyLocation={1}\n            title={title}\n            {...props}\n          />\n        );\n      case \"InitSpotOpenOrders\":\n        return (\n          <GenericMngoAccountDetailsCard\n            mangoAccountKeyLocation={1}\n            title={title}\n            {...props}\n          />\n        );\n      case \"PlaceSpotOrder\":\n        return (\n          <PlaceSpotOrderDetailsCard\n            info={decodePlaceSpotOrder(ix)}\n            {...props}\n          />\n        );\n      case \"CancelSpotOrder\":\n        return (\n          <CancelSpotOrderDetailsCard\n            info={decodeCancelSpotOrder(ix)}\n            {...props}\n          />\n        );\n      case \"AddPerpMarket\":\n        return (\n          <AddPerpMarketDetailsCard info={decodeAddPerpMarket(ix)} {...props} />\n        );\n      case \"PlacePerpOrder\":\n        return (\n          <PlacePerpOrderDetailsCard\n            info={decodePlacePerpOrder(ix)}\n            {...props}\n          />\n        );\n      case \"ConsumeEvents\":\n        return <ConsumeEventsDetailsCard {...props} />;\n      case \"CancelPerpOrder\":\n        return (\n          <CancelPerpOrderDetailsCard\n            info={decodeCancelPerpOrder(ix)}\n            {...props}\n          />\n        );\n      case \"SettleFunds\":\n        return (\n          <GenericSpotMngoDetailsCard\n            accountKeyLocation={2}\n            spotMarketkeyLocation={5}\n            title={title}\n            {...props}\n          />\n        );\n      case \"RedeemMngo\":\n        return (\n          <GenericPerpMngoDetailsCard\n            mangoAccountKeyLocation={3}\n            perpMarketKeyLocation={4}\n            title={title}\n            {...props}\n          />\n        );\n      case \"ChangePerpMarketParams\":\n        return (\n          <ChangePerpMarketParamsDetailsCard\n            info={decodeChangePerpMarketParams(ix)}\n            {...props}\n          />\n        );\n      case \"AddOracle\":\n        return <AddOracleDetailsCard {...props} />;\n      case \"AddSpotMarket\":\n        return (\n          <AddSpotMarketDetailsCard info={decodeAddSpotMarket(ix)} {...props} />\n        );\n    }\n  } catch (error) {\n    reportError(error, {\n      url: url,\n      signature: signature,\n    });\n  }\n\n  return (\n    <InstructionCard\n      ix={ix}\n      index={index}\n      result={result}\n      title={`Mango: ${title || \"Unknown\"}`}\n      innerCards={innerCards}\n      childIndex={childIndex}\n      defaultRaw\n    />\n  );\n}\n","import React from \"react\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport {\n  ParsedInnerInstruction,\n  ParsedInstruction,\n  ParsedTransaction,\n  PartiallyDecodedInstruction,\n  PublicKey,\n  SignatureResult,\n  TransactionSignature,\n} from \"@velas/web3\";\nimport { BpfLoaderDetailsCard } from \"components/instruction/bpf-loader/BpfLoaderDetailsCard\";\nimport { MemoDetailsCard } from \"components/instruction/MemoDetailsCard\";\nimport { SerumDetailsCard } from \"components/instruction/SerumDetailsCard\";\nimport { StakeDetailsCard } from \"components/instruction/stake/StakeDetailsCard\";\nimport { SystemDetailsCard } from \"components/instruction/system/SystemDetailsCard\";\nimport { TokenDetailsCard } from \"components/instruction/token/TokenDetailsCard\";\nimport { TokenLendingDetailsCard } from \"components/instruction/TokenLendingDetailsCard\";\nimport { TokenSwapDetailsCard } from \"components/instruction/TokenSwapDetailsCard\";\nimport { WormholeDetailsCard } from \"components/instruction/WormholeDetailsCard\";\nimport { UnknownDetailsCard } from \"components/instruction/UnknownDetailsCard\";\nimport { BonfidaBotDetailsCard } from \"components/instruction/BonfidaBotDetails\";\nimport {\n  SignatureProps,\n  INNER_INSTRUCTIONS_START_SLOT,\n} from \"pages/TransactionDetailsPage\";\nimport { intoTransactionInstruction } from \"utils/tx\";\nimport { isSerumInstruction } from \"components/instruction/serum/types\";\nimport { isTokenLendingInstruction } from \"components/instruction/token-lending/types\";\nimport { isTokenSwapInstruction } from \"components/instruction/token-swap/types\";\nimport { isBonfidaBotInstruction } from \"components/instruction/bonfida-bot/types\";\nimport { useFetchTransactionDetails } from \"providers/transactions/parsed\";\nimport {\n  useTransactionDetails,\n  useTransactionStatus,\n} from \"providers/transactions\";\nimport { Cluster, useCluster } from \"providers/cluster\";\nimport { BpfUpgradeableLoaderDetailsCard } from \"components/instruction/bpf-upgradeable-loader/BpfUpgradeableLoaderDetailsCard\";\nimport { VoteDetailsCard } from \"components/instruction/vote/VoteDetailsCard\";\nimport { isWormholeInstruction } from \"components/instruction/wormhole/types\";\nimport { AssociatedTokenDetailsCard } from \"components/instruction/AssociatedTokenDetailsCard\";\nimport { isMangoInstruction } from \"components/instruction/mango/types\";\nimport { MangoDetailsCard } from \"components/instruction/MangoDetails\";\n\nexport type InstructionDetailsProps = {\n  tx: ParsedTransaction;\n  ix: ParsedInstruction;\n  index: number;\n  result: SignatureResult;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n};\n\nexport function InstructionsSection({ signature }: SignatureProps) {\n  const status = useTransactionStatus(signature);\n  const details = useTransactionDetails(signature);\n  const { cluster } = useCluster();\n  const fetchDetails = useFetchTransactionDetails();\n  const refreshDetails = () => fetchDetails(signature);\n\n  if (!status?.data?.info || !details?.data?.transaction) return null;\n\n  const { transaction } = details.data.transaction;\n  const { meta } = details.data.transaction;\n\n  if (transaction.message.instructions.length === 0) {\n    return <ErrorCard retry={refreshDetails} text=\"No instructions found\" />;\n  }\n\n  const innerInstructions: {\n    [index: number]: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  } = {};\n\n  if (\n    meta?.innerInstructions &&\n    (cluster !== Cluster.MainnetBeta ||\n      details.data.transaction.slot >= INNER_INSTRUCTIONS_START_SLOT)\n  ) {\n    meta.innerInstructions.forEach((parsed: ParsedInnerInstruction) => {\n      if (!innerInstructions[parsed.index]) {\n        innerInstructions[parsed.index] = [];\n      }\n\n      parsed.instructions.forEach((ix) => {\n        innerInstructions[parsed.index].push(ix);\n      });\n    });\n  }\n\n  const result = status.data.info.result;\n  const instructionDetails = transaction.message.instructions.map(\n    (instruction, index) => {\n      let innerCards: JSX.Element[] = [];\n\n      if (index in innerInstructions) {\n        innerInstructions[index].forEach((ix, childIndex) => {\n          if (typeof ix.programId === \"string\") {\n            ix.programId = new PublicKey(ix.programId);\n          }\n\n          let res = renderInstructionCard({\n            index,\n            ix,\n            result,\n            signature,\n            tx: transaction,\n            childIndex,\n          });\n\n          innerCards.push(res);\n        });\n      }\n\n      return renderInstructionCard({\n        index,\n        ix: instruction,\n        result,\n        signature,\n        tx: transaction,\n        innerCards,\n      });\n    }\n  );\n\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"header\">\n          <div className=\"header-body\">\n            <h3 className=\"mb-0\">Instruction(s)</h3>\n          </div>\n        </div>\n      </div>\n      {instructionDetails}\n    </>\n  );\n}\n\nfunction renderInstructionCard({\n  ix,\n  tx,\n  result,\n  index,\n  signature,\n  innerCards,\n  childIndex,\n}: {\n  ix: ParsedInstruction | PartiallyDecodedInstruction;\n  tx: ParsedTransaction;\n  result: SignatureResult;\n  index: number;\n  signature: TransactionSignature;\n  innerCards?: JSX.Element[];\n  childIndex?: number;\n}) {\n  const key = `${index}-${childIndex}`;\n\n  if (\"parsed\" in ix) {\n    const props = {\n      tx,\n      ix,\n      result,\n      index,\n      innerCards,\n      childIndex,\n      key,\n    };\n\n    switch (ix.program) {\n      case \"spl-token\":\n        return <TokenDetailsCard {...props} />;\n      case \"bpf-loader\":\n        return <BpfLoaderDetailsCard {...props} />;\n      case \"bpf-upgradeable-loader\":\n        return <BpfUpgradeableLoaderDetailsCard {...props} />;\n      case \"system\":\n        return <SystemDetailsCard {...props} />;\n      case \"stake\":\n        return <StakeDetailsCard {...props} />;\n      case \"spl-memo\":\n        return <MemoDetailsCard {...props} />;\n      case \"spl-associated-token-account\":\n        return <AssociatedTokenDetailsCard {...props} />;\n      case \"vote\":\n        return <VoteDetailsCard {...props} />;\n      default:\n        return <UnknownDetailsCard {...props} />;\n    }\n  }\n\n  const transactionIx = intoTransactionInstruction(tx, ix);\n\n  if (!transactionIx) {\n    return (\n      <ErrorCard\n        key={key}\n        text=\"Could not display this instruction, please report\"\n      />\n    );\n  }\n\n  const props = {\n    ix: transactionIx,\n    result,\n    index,\n    signature,\n    innerCards,\n    childIndex,\n  };\n\n  if (isBonfidaBotInstruction(transactionIx)) {\n    return <BonfidaBotDetailsCard key={key} {...props} />;\n  } else if (isMangoInstruction(transactionIx)) {\n    return <MangoDetailsCard key={key} {...props} />;\n  } else if (isSerumInstruction(transactionIx)) {\n    return <SerumDetailsCard key={key} {...props} />;\n  } else if (isTokenSwapInstruction(transactionIx)) {\n    return <TokenSwapDetailsCard key={key} {...props} />;\n  } else if (isTokenLendingInstruction(transactionIx)) {\n    return <TokenLendingDetailsCard key={key} {...props} />;\n  } else if (isWormholeInstruction(transactionIx)) {\n    return <WormholeDetailsCard key={key} {...props} />;\n  } else {\n    return <UnknownDetailsCard key={key} {...props} />;\n  }\n}\n","import React from \"react\";\nimport { SignatureProps } from \"pages/TransactionDetailsPage\";\nimport { useTransactionDetails } from \"providers/transactions\";\nimport { TransactionError } from \"@velas/web3\";\n\nconst transactionErrorMessage: Map<string, string> = new Map([\n  [\"AccountInUse\", \"Account in use\"],\n  [\"AccountLoadedTwice\", \"Account loaded twice\"],\n  [\n    \"AccountNotFound\",\n    \"Attempt to debit an account but found no record of a prior credit.\",\n  ],\n  [\"ProgramAccountNotFound\", \"Attempt to load a program that does not exist\"],\n  [\"InsufficientFundsForFee\", \"Insufficient funds for fee\"],\n  [\n    \"InvalidAccountForFee\",\n    \"This account may not be used to pay transaction fees\",\n  ],\n  [\"AlreadyProcessed\", \"This transaction has already been processed\"],\n  [\"BlockhashNotFound\", \"Blockhash not found\"],\n  [\"CallChainTooDeep\", \"Loader call chain is too deep\"],\n  [\n    \"MissingSignatureForFee\",\n    \"Transaction requires a fee but has no signature present\",\n  ],\n  [\"InvalidAccountIndex\", \"Transaction contains an invalid account reference\"],\n  [\"SignatureFailure\", \"Transaction did not pass signature verification\"],\n  [\n    \"InvalidProgramForExecution\",\n    \"This program may not be used for executing instructions\",\n  ],\n  [\n    \"SanitizeFailure\",\n    \"Transaction failed to sanitize accounts offsets correctly\",\n  ],\n  [\n    \"ClusterMaintenance\",\n    \"Transactions are currently disabled due to cluster maintenance\",\n  ],\n  [\n    \"AccountBorrowOutstanding\",\n    \"Transaction processing left an account with an outstanding borrowed reference\",\n  ],\n  [\"InstructionError\", \"Error processing Instruction {0}: {1}\"],\n]);\n\nconst instructionErrorMessage: Map<string, string> = new Map([\n  [\"GenericError\", \"generic instruction error\"],\n  [\"InvalidArgument\", \"invalid program argument\"],\n  [\"InvalidInstructionData\", \"invalid instruction data\"],\n  [\"InvalidAccountData\", \"invalid account data for instruction\"],\n  [\"AccountDataTooSmall\", \"account data too small for instruction\"],\n  [\"InsufficientFunds\", \"insufficient funds for instruction\"],\n  [\"IncorrectProgramId\", \"incorrect program id for instruction\"],\n  [\"MissingRequiredSignature\", \"missing required signature for instruction\"],\n  [\n    \"AccountAlreadyInitialized\",\n    \"instruction requires an uninitialized account\",\n  ],\n  [\"UninitializedAccount\", \"instruction requires an initialized account\"],\n  [\n    \"UnbalancedInstruction\",\n    \"sum of account balances before and after instruction do not match\",\n  ],\n  [\"ModifiedProgramId\", \"instruction modified the program id of an account\"],\n  [\n    \"ExternalAccountLamportSpend\",\n    \"instruction spent from the balance of an account it does not own\",\n  ],\n  [\n    \"ExternalAccountDataModified\",\n    \"instruction modified data of an account it does not own\",\n  ],\n  [\n    \"ReadonlyLamportChange\",\n    \"instruction changed the balance of a read-only account\",\n  ],\n  [\"ReadonlyDataModified\", \"instruction modified data of a read-only account\"],\n  [\"DuplicateAccountIndex\", \"instruction contains duplicate accounts\"],\n  [\"ExecutableModified\", \"instruction changed executable bit of an account\"],\n  [\"RentEpochModified\", \"instruction modified rent epoch of an account\"],\n  [\"NotEnoughAccountKeys\", \"insufficient account keys for instruction\"],\n  [\"AccountDataSizeChanged\", \"non-system instruction changed account size\"],\n  [\"AccountNotExecutable\", \"instruction expected an executable account\"],\n  [\n    \"AccountBorrowFailed\",\n    \"instruction tries to borrow reference for an account which is already borrowed\",\n  ],\n  [\n    \"AccountBorrowOutstanding\",\n    \"instruction left account with an outstanding borrowed reference\",\n  ],\n  [\n    \"DuplicateAccountOutOfSync\",\n    \"instruction modifications of multiply-passed account differ\",\n  ],\n  [\"Custom\", \"custom program error: {0}\"],\n  [\"InvalidError\", \"program returned invalid error code\"],\n  [\"ExecutableDataModified\", \"instruction changed executable accounts data\"],\n  [\n    \"ExecutableLamportChange\",\n    \"instruction changed the balance of a executable account\",\n  ],\n  [\"ExecutableAccountNotRentExempt\", \"executable accounts must be rent exempt\"],\n  [\"UnsupportedProgramId\", \"Unsupported program id\"],\n  [\"CallDepth\", \"Cross-program invocation call depth too deep\"],\n  [\"MissingAccount\", \"An account required by the instruction is missing\"],\n  [\n    \"ReentrancyNotAllowed\",\n    \"Cross-program invocation reentrancy not allowed for this instruction\",\n  ],\n  [\n    \"MaxSeedLengthExceeded\",\n    \"Length of the seed is too long for address generation\",\n  ],\n  [\"InvalidSeeds\", \"Provided seeds do not result in a valid address\"],\n  [\"InvalidRealloc\", \"Failed to reallocate account data\"],\n  [\"ComputationalBudgetExceeded\", \"Computational budget exceeded\"],\n  [\n    \"PrivilegeEscalation\",\n    \"Cross-program invocation with unauthorized signer or writable account\",\n  ],\n  [\n    \"ProgramEnvironmentSetupFailure\",\n    \"Failed to create program execution environment\",\n  ],\n  [\"ProgramFailedToComplete\", \"Program failed to complete\"],\n  [\"ProgramFailedToCompile\", \"Program failed to compile\"],\n  [\"Immutable\", \"Account is immutable\"],\n  [\"IncorrectAuthority\", \"Incorrect authority provided\"],\n  [\"BorshIoError\", \"Failed to serialize or deserialize account data: {0}\"],\n  [\n    \"AccountNotRentExempt\",\n    \"An account does not have enough lamports to be rent-exempt\",\n  ],\n  [\"InvalidAccountOwner\", \"Invalid account owner\"],\n  [\"ArithmeticOverflow\", \"Program arithmetic overflowed\"],\n  [\"UnsupportedSysvar\", \"Unsupported sysvar\"],\n  [\"IllegalOwner\", \"Provided owner is not allowed\"],\n]);\n\nfunction getTransactionError(\n  error?: TransactionError | null\n): string | undefined {\n  if (!error) {\n    return;\n  }\n\n  if (typeof error === \"string\") {\n    const message = transactionErrorMessage.get(error);\n    if (message) {\n      return message;\n    }\n  } else if (\"InstructionError\" in error) {\n    const out = transactionErrorMessage.get(\"InstructionError\");\n    const innerError = error[\"InstructionError\"];\n    const index = innerError[0];\n    const instructionError = innerError[1];\n\n    if (out) {\n      return out\n        .replace(\"{0}\", index)\n        .replace(\"{1}\", getInstructionError(instructionError));\n    }\n  }\n\n  return \"Unknown transaction error\";\n}\n\nfunction getInstructionError(error: TransactionError): string {\n  let out;\n  let value;\n\n  if (typeof error === \"string\") {\n    const message = instructionErrorMessage.get(error);\n    if (message) {\n      return message;\n    }\n  } else if (\"Custom\" in error) {\n    out = instructionErrorMessage.get(\"Custom\");\n    value = error[\"Custom\"][0];\n  } else if (\"BorshIoError\" in error) {\n    out = instructionErrorMessage.get(\"BorshIoError\");\n    value = error[\"BorshIoError\"][0];\n  }\n\n  if (out && value) {\n    return out.replace(\"{0}\", value);\n  }\n\n  return \"Unknown instruction error\";\n}\n\nexport function ProgramLogSection({ signature }: SignatureProps) {\n  const details = useTransactionDetails(signature);\n  const logMessages = details?.data?.transaction?.meta?.logMessages;\n\n  const transactionError = getTransactionError(\n    details?.data?.transaction?.meta?.err\n  );\n\n  if ((!logMessages || logMessages.length < 1) && !transactionError) {\n    return null;\n  }\n\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"header\">\n          <div className=\"header-body\">\n            <h3 className=\"card-header-title\">Program Log</h3>\n          </div>\n        </div>\n      </div>\n      <div className=\"card\">\n        <ul className=\"log-messages\">\n          {logMessages &&\n            logMessages.map((message, key) => (\n              <li key={key}>{message.replace(/^Program log: /, \"\")}</li>\n            ))}\n          {transactionError && (\n            <li className=\"mt-3\">Transaction failed: {transactionError}</li>\n          )}\n        </ul>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport bs58 from \"bs58\";\nimport {\n  useFetchTransactionStatus,\n  useTransactionStatus,\n  useTransactionDetails,\n} from \"providers/transactions\";\nimport { useFetchTransactionDetails } from \"providers/transactions/parsed\";\nimport { useCluster, ClusterStatus } from \"providers/cluster\";\nimport {\n  TransactionSignature,\n  SystemProgram,\n  SystemInstruction,\n} from \"@velas/web3\";\nimport { SolBalance } from \"utils\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { LoadingCard } from \"components/common/LoadingCard\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport { displayTimestamp } from \"utils/date\";\nimport { InfoTooltip } from \"components/common/InfoTooltip\";\nimport { Address } from \"components/common/Address\";\nimport { Signature } from \"components/common/Signature\";\nimport { intoTransactionInstruction } from \"utils/tx\";\nimport { FetchStatus } from \"providers/cache\";\nimport { Slot } from \"components/common/Slot\";\nimport { BigNumber } from \"bignumber.js\";\nimport { BalanceDelta } from \"components/common/BalanceDelta\";\nimport { TokenBalancesCard } from \"components/transaction/TokenBalancesCard\";\nimport { InstructionsSection } from \"components/transaction/InstructionsSection\";\nimport { ProgramLogSection } from \"components/transaction/ProgramLogSection\";\nimport { clusterPath } from \"utils/url\";\n\nconst AUTO_REFRESH_INTERVAL = 2000;\nconst ZERO_CONFIRMATION_BAILOUT = 5;\nexport const INNER_INSTRUCTIONS_START_SLOT = 46915769;\n\nexport type SignatureProps = {\n  signature: TransactionSignature;\n};\n\nexport const SignatureContext = React.createContext(\"\");\n\nenum AutoRefresh {\n  Active,\n  Inactive,\n  BailedOut,\n}\n\ntype AutoRefreshProps = {\n  autoRefresh: AutoRefresh;\n};\n\nexport function TransactionDetailsPage({ signature: raw }: SignatureProps) {\n  let signature: TransactionSignature | undefined;\n\n  try {\n    const decoded = bs58.decode(raw);\n    if (decoded.length === 64) {\n      signature = raw;\n    }\n  } catch (err) {}\n\n  const status = useTransactionStatus(signature);\n  const [zeroConfirmationRetries, setZeroConfirmationRetries] =\n    React.useState(0);\n\n  let autoRefresh = AutoRefresh.Inactive;\n\n  if (zeroConfirmationRetries >= ZERO_CONFIRMATION_BAILOUT) {\n    autoRefresh = AutoRefresh.BailedOut;\n  } else if (status?.data?.info && status.data.info.confirmations !== \"max\") {\n    autoRefresh = AutoRefresh.Active;\n  }\n\n  React.useEffect(() => {\n    if (\n      status?.status === FetchStatus.Fetched &&\n      status.data?.info &&\n      status.data.info.confirmations === 0\n    ) {\n      setZeroConfirmationRetries((retries) => retries + 1);\n    }\n  }, [status]);\n\n  React.useEffect(() => {\n    if (\n      status?.status === FetchStatus.Fetching &&\n      autoRefresh === AutoRefresh.BailedOut\n    ) {\n      setZeroConfirmationRetries(0);\n    }\n  }, [status, autoRefresh, setZeroConfirmationRetries]);\n\n  return (\n    <div className=\"container mt-n3\">\n      <div className=\"header\">\n        <div className=\"header-body\">\n          <h6 className=\"header-pretitle\">Details</h6>\n          <h2 className=\"header-title\">Transaction</h2>\n        </div>\n      </div>\n      {signature === undefined ? (\n        <ErrorCard text={`Signature \"${raw}\" is not valid`} />\n      ) : (\n        <SignatureContext.Provider value={signature}>\n          <StatusCard signature={signature} autoRefresh={autoRefresh} />\n          <AccountsCard signature={signature} autoRefresh={autoRefresh} />\n          <TokenBalancesCard signature={signature} />\n          <InstructionsSection signature={signature} />\n          <ProgramLogSection signature={signature} />\n        </SignatureContext.Provider>\n      )}\n    </div>\n  );\n}\n\nfunction StatusCard({\n  signature,\n  autoRefresh,\n}: SignatureProps & AutoRefreshProps) {\n  const fetchStatus = useFetchTransactionStatus();\n  const status = useTransactionStatus(signature);\n  const details = useTransactionDetails(signature);\n  const { firstAvailableBlock, status: clusterStatus } = useCluster();\n\n  // Fetch transaction on load\n  React.useEffect(() => {\n    if (!status && clusterStatus === ClusterStatus.Connected) {\n      fetchStatus(signature);\n    }\n  }, [signature, clusterStatus]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Effect to set and clear interval for auto-refresh\n  React.useEffect(() => {\n    if (autoRefresh === AutoRefresh.Active) {\n      let intervalHandle: NodeJS.Timeout = setInterval(\n        () => fetchStatus(signature),\n        AUTO_REFRESH_INTERVAL\n      );\n\n      return () => {\n        clearInterval(intervalHandle);\n      };\n    }\n  }, [autoRefresh, fetchStatus, signature]);\n\n  if (\n    !status ||\n    (status.status === FetchStatus.Fetching &&\n      autoRefresh === AutoRefresh.Inactive)\n  ) {\n    return <LoadingCard />;\n  } else if (status.status === FetchStatus.FetchFailed) {\n    return (\n      <ErrorCard retry={() => fetchStatus(signature)} text=\"Fetch Failed\" />\n    );\n  } else if (!status.data?.info) {\n    if (firstAvailableBlock !== undefined && firstAvailableBlock > 1) {\n      return (\n        <ErrorCard\n          retry={() => fetchStatus(signature)}\n          text=\"Not Found\"\n          subtext={`Note: Transactions processed before block ${firstAvailableBlock} are not available at this time`}\n        />\n      );\n    }\n    return <ErrorCard retry={() => fetchStatus(signature)} text=\"Not Found\" />;\n  }\n\n  const { info } = status.data;\n\n  const renderResult = () => {\n    let statusClass = \"success\";\n    let statusText = \"Success\";\n    if (info.result.err) {\n      statusClass = \"warning\";\n      statusText = \"Error\";\n    }\n\n    return (\n      <h3 className=\"mb-0\">\n        <span className={`badge badge-soft-${statusClass}`}>{statusText}</span>\n      </h3>\n    );\n  };\n\n  const fee = details?.data?.transaction?.meta?.fee;\n  const transaction = details?.data?.transaction?.transaction;\n  const blockhash = transaction?.message.recentBlockhash;\n  const isNonce = (() => {\n    if (!transaction || transaction.message.instructions.length < 1) {\n      return false;\n    }\n\n    const ix = intoTransactionInstruction(\n      transaction,\n      transaction.message.instructions[0]\n    );\n    return (\n      ix &&\n      SystemProgram.programId.equals(ix.programId) &&\n      SystemInstruction.decodeInstructionType(ix) === \"AdvanceNonceAccount\"\n    );\n  })();\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header align-items-center\">\n        <h3 className=\"card-header-title\">Overview</h3>\n        <Link\n          to={clusterPath(`/tx/${signature}/inspect`)}\n          className=\"btn btn-white btn-sm mr-2\"\n        >\n          <span className=\"fe fe-settings mr-2\"></span>\n          Inspect\n        </Link>\n        {autoRefresh === AutoRefresh.Active ? (\n          <span className=\"spinner-grow spinner-grow-sm\"></span>\n        ) : (\n          <button\n            className=\"btn btn-white btn-sm\"\n            onClick={() => fetchStatus(signature)}\n          >\n            <span className=\"fe fe-refresh-cw mr-2\"></span>\n            Refresh\n          </button>\n        )}\n      </div>\n\n      <TableCardBody>\n        <tr>\n          <td>Signature</td>\n          <td className=\"text-lg-right\">\n            <Signature signature={signature} alignRight />\n          </td>\n        </tr>\n\n        <tr>\n          <td>Result</td>\n          <td className=\"text-lg-right\">{renderResult()}</td>\n        </tr>\n\n        <tr>\n          <td>Timestamp</td>\n          <td className=\"text-lg-right\">\n            {info.timestamp !== \"unavailable\" ? (\n              <span className=\"text-monospace\">\n                {displayTimestamp(info.timestamp * 1000)}\n              </span>\n            ) : (\n              <InfoTooltip\n                bottom\n                right\n                text=\"Timestamps are only available for confirmed blocks\"\n              >\n                Unavailable\n              </InfoTooltip>\n            )}\n          </td>\n        </tr>\n\n        <tr>\n          <td>Confirmation Status</td>\n          <td className=\"text-lg-right text-uppercase\">\n            {info.confirmationStatus || \"Unknown\"}\n          </td>\n        </tr>\n\n        <tr>\n          <td>Confirmations</td>\n          <td className=\"text-lg-right text-uppercase\">{info.confirmations}</td>\n        </tr>\n\n        <tr>\n          <td>Block</td>\n          <td className=\"text-lg-right\">\n            <Slot slot={info.slot} link />\n          </td>\n        </tr>\n\n        {blockhash && (\n          <tr>\n            <td>\n              {isNonce ? (\n                \"Nonce\"\n              ) : (\n                <InfoTooltip text=\"Transactions use a previously confirmed blockhash as a nonce to prevent double spends\">\n                  Recent Blockhash\n                </InfoTooltip>\n              )}\n            </td>\n            <td className=\"text-lg-right\">{blockhash}</td>\n          </tr>\n        )}\n\n        {fee && (\n          <tr>\n            <td>Fee (XZO)</td>\n            <td className=\"text-lg-right\">\n              <SolBalance lamports={fee} />\n            </td>\n          </tr>\n        )}\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction AccountsCard({\n  signature,\n  autoRefresh,\n}: SignatureProps & AutoRefreshProps) {\n  const details = useTransactionDetails(signature);\n  const fetchDetails = useFetchTransactionDetails();\n  const fetchStatus = useFetchTransactionStatus();\n  const refreshDetails = () => fetchDetails(signature);\n  const refreshStatus = () => fetchStatus(signature);\n  const transaction = details?.data?.transaction?.transaction;\n  const message = transaction?.message;\n  const status = useTransactionStatus(signature);\n\n  // Fetch details on load\n  React.useEffect(() => {\n    if (status?.data?.info?.confirmations === \"max\" && !details) {\n      fetchDetails(signature);\n    }\n  }, [signature, details, status, fetchDetails]);\n\n  if (!status?.data?.info) {\n    return null;\n  } else if (autoRefresh === AutoRefresh.BailedOut) {\n    return (\n      <ErrorCard\n        text=\"Details are not available until the transaction reaches MAX confirmations\"\n        retry={refreshStatus}\n      />\n    );\n  } else if (autoRefresh === AutoRefresh.Active) {\n    return (\n      <ErrorCard text=\"Details are not available until the transaction reaches MAX confirmations\" />\n    );\n  } else if (!details || details.status === FetchStatus.Fetching) {\n    return <LoadingCard />;\n  } else if (details.status === FetchStatus.FetchFailed) {\n    return <ErrorCard retry={refreshDetails} text=\"Failed to fetch details\" />;\n  } else if (!details.data?.transaction || !message) {\n    return <ErrorCard text=\"Details are not available\" />;\n  }\n\n  const { meta } = details.data.transaction;\n  if (!meta) {\n    return <ErrorCard text=\"Transaction metadata is missing\" />;\n  }\n\n  const accountRows = message.accountKeys.map((account, index) => {\n    const pre = meta.preBalances[index];\n    const post = meta.postBalances[index];\n    const pubkey = account.pubkey;\n    const key = account.pubkey.toBase58();\n    const delta = new BigNumber(post).minus(new BigNumber(pre));\n\n    return (\n      <tr key={key}>\n        <td>\n          <Address pubkey={pubkey} link />\n        </td>\n        <td>\n          <BalanceDelta delta={delta} isSol />\n        </td>\n        <td>\n          <SolBalance lamports={post} />\n        </td>\n        <td>\n          {index === 0 && (\n            <span className=\"badge badge-soft-info mr-1\">Fee Payer</span>\n          )}\n          {!account.writable && (\n            <span className=\"badge badge-soft-info mr-1\">Readonly</span>\n          )}\n          {account.signer && (\n            <span className=\"badge badge-soft-info mr-1\">Signer</span>\n          )}\n          {message.instructions.find((ix) => ix.programId.equals(pubkey)) && (\n            <span className=\"badge badge-soft-info mr-1\">Program</span>\n          )}\n        </td>\n      </tr>\n    );\n  });\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title\">Account Inputs</h3>\n      </div>\n      <div className=\"table-responsive mb-0\">\n        <table className=\"table table-sm table-nowrap card-table\">\n          <thead>\n            <tr>\n              <th className=\"text-muted\">Address</th>\n              <th className=\"text-muted\">Change (XZO)</th>\n              <th className=\"text-muted\">Post Balance (XZO)</th>\n              <th className=\"text-muted\">Details</th>\n            </tr>\n          </thead>\n          <tbody className=\"list\">{accountRows}</tbody>\n        </table>\n      </div>\n    </div>\n  );\n}","import { create } from \"superstruct\";\nimport {\n  IX_TITLES,\n  TokenInstructionType,\n} from \"components/instruction/token/types\";\nimport { ParsedInfo } from \"validators\";\nimport { reportError } from \"utils/sentry\";\nimport {\n  ConfirmedSignatureInfo,\n  ParsedConfirmedTransaction,\n  ParsedInstruction,\n  PartiallyDecodedInstruction,\n} from \"@velas/web3\";\nimport { intoTransactionInstruction } from \"utils/tx\";\nimport {\n  isTokenSwapInstruction,\n  parseTokenSwapInstructionTitle,\n} from \"components/instruction/token-swap/types\";\nimport {\n  isTokenLendingInstruction,\n  parseTokenLendingInstructionTitle,\n} from \"components/instruction/token-lending/types\";\nimport {\n  isSerumInstruction,\n  parseSerumInstructionTitle,\n} from \"components/instruction/serum/types\";\nimport {\n  isBonfidaBotInstruction,\n  parseBonfidaBotInstructionTitle,\n} from \"components/instruction/bonfida-bot/types\";\nimport { TOKEN_PROGRAM_ID } from \"providers/accounts/tokens\";\n\nexport type InstructionType = {\n  name: string;\n  innerInstructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport interface InstructionItem {\n  instruction: ParsedInstruction | PartiallyDecodedInstruction;\n  inner: (ParsedInstruction | PartiallyDecodedInstruction)[];\n}\n\nexport class InstructionContainer {\n  readonly instructions: InstructionItem[];\n\n  static create(parsedTransaction: ParsedConfirmedTransaction) {\n    return new InstructionContainer(parsedTransaction);\n  }\n\n  constructor(parsedTransaction: ParsedConfirmedTransaction) {\n    this.instructions = parsedTransaction.transaction.message.instructions.map(\n      (instruction) => {\n        if (\"parsed\" in instruction) {\n          if (typeof instruction.parsed === \"object\") {\n            instruction.parsed = create(instruction.parsed, ParsedInfo);\n          } else if (typeof instruction.parsed !== \"string\") {\n            throw new Error(\"Unexpected parsed response\");\n          }\n        }\n\n        return {\n          instruction,\n          inner: [],\n        };\n      }\n    );\n\n    if (parsedTransaction.meta?.innerInstructions) {\n      for (let inner of parsedTransaction.meta.innerInstructions) {\n        this.instructions[inner.index].inner.push(...inner.instructions);\n      }\n    }\n  }\n}\n\nexport function getTokenProgramInstructionName(\n  ix: ParsedInstruction,\n  signatureInfo: ConfirmedSignatureInfo\n): string {\n  try {\n    const parsed = create(ix.parsed, ParsedInfo);\n    const { type: rawType } = parsed;\n    const type = create(rawType, TokenInstructionType);\n    return IX_TITLES[type];\n  } catch (err) {\n    reportError(err, { signature: signatureInfo.signature });\n    return \"Unknown\";\n  }\n}\n\nexport function getTokenInstructionName(\n  transaction: ParsedConfirmedTransaction,\n  ix: ParsedInstruction | PartiallyDecodedInstruction,\n  signatureInfo: ConfirmedSignatureInfo\n) {\n  let name = \"Unknown\";\n\n  let transactionInstruction;\n  if (transaction?.transaction) {\n    transactionInstruction = intoTransactionInstruction(\n      transaction.transaction,\n      ix\n    );\n  }\n\n  if (\"parsed\" in ix) {\n    if (ix.program === \"spl-token\") {\n      name = getTokenProgramInstructionName(ix, signatureInfo);\n    } else {\n      return undefined;\n    }\n  } else if (\n    transactionInstruction &&\n    isBonfidaBotInstruction(transactionInstruction)\n  ) {\n    try {\n      name = parseBonfidaBotInstructionTitle(transactionInstruction);\n    } catch (error) {\n      reportError(error, { signature: signatureInfo.signature });\n      return undefined;\n    }\n  } else if (\n    transactionInstruction &&\n    isSerumInstruction(transactionInstruction)\n  ) {\n    try {\n      name = parseSerumInstructionTitle(transactionInstruction);\n    } catch (error) {\n      reportError(error, { signature: signatureInfo.signature });\n      return undefined;\n    }\n  } else if (\n    transactionInstruction &&\n    isTokenSwapInstruction(transactionInstruction)\n  ) {\n    try {\n      name = parseTokenSwapInstructionTitle(transactionInstruction);\n    } catch (error) {\n      reportError(error, { signature: signatureInfo.signature });\n      return undefined;\n    }\n  } else if (\n    transactionInstruction &&\n    isTokenLendingInstruction(transactionInstruction)\n  ) {\n    try {\n      name = parseTokenLendingInstructionTitle(transactionInstruction);\n    } catch (error) {\n      reportError(error, { signature: signatureInfo.signature });\n      return undefined;\n    }\n  } else {\n    if (\n      ix.accounts.findIndex((account) => account.equals(TOKEN_PROGRAM_ID)) >= 0\n    ) {\n      name = \"Unknown (Inner)\";\n    } else {\n      return undefined;\n    }\n  }\n\n  return name;\n}\n\nexport function getTokenInstructionType(\n  transaction: ParsedConfirmedTransaction,\n  ix: ParsedInstruction | PartiallyDecodedInstruction,\n  signatureInfo: ConfirmedSignatureInfo,\n  index: number\n): InstructionType | undefined {\n  const innerInstructions: (ParsedInstruction | PartiallyDecodedInstruction)[] =\n    [];\n\n  if (transaction.meta?.innerInstructions) {\n    transaction.meta.innerInstructions.forEach((ix) => {\n      if (ix.index === index) {\n        ix.instructions.forEach((inner) => {\n          innerInstructions.push(inner);\n        });\n      }\n    });\n  }\n\n  let name =\n    getTokenInstructionName(transaction, ix, signatureInfo) || \"Unknown\";\n\n  return {\n    name,\n    innerInstructions,\n  };\n}\n","import React from \"react\";\nimport {\n  PublicKey,\n  ConfirmedSignatureInfo,\n  ParsedInstruction,\n  PartiallyDecodedInstruction,\n} from \"@velas/web3\";\nimport { CacheEntry, FetchStatus } from \"providers/cache\";\nimport {\n  useAccountHistories,\n  useFetchAccountHistory,\n} from \"providers/accounts/history\";\nimport {\n  useAccountOwnedTokens,\n  TokenInfoWithPubkey,\n  TOKEN_PROGRAM_ID,\n} from \"providers/accounts/tokens\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { LoadingCard } from \"components/common/LoadingCard\";\nimport { Signature } from \"components/common/Signature\";\nimport { Address } from \"components/common/Address\";\nimport { Slot } from \"components/common/Slot\";\nimport {\n  Details,\n  useFetchTransactionDetails,\n  useTransactionDetailsCache,\n} from \"providers/transactions/parsed\";\nimport { reportError } from \"utils/sentry\";\nimport { intoTransactionInstruction, displayAddress } from \"utils/tx\";\nimport {\n  isTokenSwapInstruction,\n  parseTokenSwapInstructionTitle,\n} from \"components/instruction/token-swap/types\";\nimport {\n  isTokenLendingInstruction,\n  parseTokenLendingInstructionTitle,\n} from \"components/instruction/token-lending/types\";\nimport {\n  isSerumInstruction,\n  parseSerumInstructionTitle,\n} from \"components/instruction/serum/types\";\nimport {\n  isBonfidaBotInstruction,\n  parseBonfidaBotInstructionTitle,\n} from \"components/instruction/bonfida-bot/types\";\nimport { INNER_INSTRUCTIONS_START_SLOT } from \"pages/TransactionDetailsPage\";\nimport { useCluster, Cluster } from \"providers/cluster\";\nimport { Link } from \"react-router-dom\";\nimport { Location } from \"history\";\nimport { useQuery } from \"utils/url\";\nimport { TokenInfoMap } from \"@solana/spl-token-registry\";\nimport { useTokenRegistry } from \"providers/mints/token-registry\";\nimport { getTokenProgramInstructionName } from \"utils/instruction\";\nimport { isMangoInstruction, parseMangoInstructionTitle } from \"components/instruction/mango/types\";\n\nconst TRUNCATE_TOKEN_LENGTH = 10;\nconst ALL_TOKENS = \"\";\n\ntype InstructionType = {\n  name: string;\n  innerInstructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport function TokenHistoryCard({ pubkey }: { pubkey: PublicKey }) {\n  const address = pubkey.toBase58();\n  const ownedTokens = useAccountOwnedTokens(address);\n\n  if (ownedTokens === undefined) {\n    return null;\n  }\n\n  const tokens = ownedTokens.data?.tokens;\n  if (tokens === undefined || tokens.length === 0) return null;\n\n  if (tokens.length > 25) {\n    return (\n      <ErrorCard text=\"Token transaction history is not available for accounts with over 25 token accounts\" />\n    );\n  }\n\n  return <TokenHistoryTable tokens={tokens} />;\n}\n\nconst useQueryFilter = (): string => {\n  const query = useQuery();\n  const filter = query.get(\"filter\");\n  return filter || \"\";\n};\n\ntype FilterProps = {\n  filter: string;\n  toggle: () => void;\n  show: boolean;\n  tokens: TokenInfoWithPubkey[];\n};\n\nfunction TokenHistoryTable({ tokens }: { tokens: TokenInfoWithPubkey[] }) {\n  const accountHistories = useAccountHistories();\n  const fetchAccountHistory = useFetchAccountHistory();\n  const transactionDetailsCache = useTransactionDetailsCache();\n  const [showDropdown, setDropdown] = React.useState(false);\n  const filter = useQueryFilter();\n\n  const filteredTokens = React.useMemo(\n    () =>\n      tokens.filter((token) => {\n        if (filter === ALL_TOKENS) {\n          return true;\n        }\n        return token.info.mint.toBase58() === filter;\n      }),\n    [tokens, filter]\n  );\n\n  const fetchHistories = React.useCallback(\n    (refresh?: boolean) => {\n      filteredTokens.forEach((token) => {\n        fetchAccountHistory(token.pubkey, refresh);\n      });\n    },\n    [filteredTokens, fetchAccountHistory]\n  );\n\n  // Fetch histories on load\n  React.useEffect(() => {\n    filteredTokens.forEach((token) => {\n      const address = token.pubkey.toBase58();\n      if (!accountHistories[address]) {\n        fetchAccountHistory(token.pubkey, true);\n      }\n    });\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const allFoundOldest = filteredTokens.every((token) => {\n    const history = accountHistories[token.pubkey.toBase58()];\n    return history?.data?.foundOldest === true;\n  });\n\n  const allFetchedSome = filteredTokens.every((token) => {\n    const history = accountHistories[token.pubkey.toBase58()];\n    return history?.data !== undefined;\n  });\n\n  // Find the oldest slot which we know we have the full history for\n  let oldestSlot: number | undefined = allFoundOldest ? 0 : undefined;\n\n  if (!allFoundOldest && allFetchedSome) {\n    filteredTokens.forEach((token) => {\n      const history = accountHistories[token.pubkey.toBase58()];\n      if (history?.data?.foundOldest === false) {\n        const earliest =\n          history.data.fetched[history.data.fetched.length - 1].slot;\n        if (!oldestSlot) oldestSlot = earliest;\n        oldestSlot = Math.max(oldestSlot, earliest);\n      }\n    });\n  }\n\n  const fetching = filteredTokens.some((token) => {\n    const history = accountHistories[token.pubkey.toBase58()];\n    return history?.status === FetchStatus.Fetching;\n  });\n\n  const failed = filteredTokens.some((token) => {\n    const history = accountHistories[token.pubkey.toBase58()];\n    return history?.status === FetchStatus.FetchFailed;\n  });\n\n  const sigSet = new Set();\n  const mintAndTxs = filteredTokens\n    .map((token) => ({\n      mint: token.info.mint,\n      history: accountHistories[token.pubkey.toBase58()],\n    }))\n    .filter(({ history }) => {\n      return history?.data?.fetched && history.data.fetched.length > 0;\n    })\n    .flatMap(({ mint, history }) =>\n      (history?.data?.fetched as ConfirmedSignatureInfo[]).map((tx) => ({\n        mint,\n        tx,\n      }))\n    )\n    .filter(({ tx }) => {\n      if (sigSet.has(tx.signature)) return false;\n      sigSet.add(tx.signature);\n      return true;\n    })\n    .filter(({ tx }) => {\n      return oldestSlot !== undefined && tx.slot >= oldestSlot;\n    });\n\n  React.useEffect(() => {\n    if (!fetching && mintAndTxs.length < 1 && !allFoundOldest) {\n      fetchHistories();\n    }\n  }, [fetching, mintAndTxs, allFoundOldest, fetchHistories]);\n\n  if (mintAndTxs.length === 0) {\n    if (fetching) {\n      return <LoadingCard message=\"Loading history\" />;\n    } else if (failed) {\n      return (\n        <ErrorCard\n          retry={() => fetchHistories(true)}\n          text=\"Failed to fetch transaction history\"\n        />\n      );\n    }\n    return (\n      <ErrorCard\n        retry={() => fetchHistories(true)}\n        retryText=\"Try again\"\n        text=\"No transaction history found\"\n      />\n    );\n  }\n\n  mintAndTxs.sort((a, b) => {\n    if (a.tx.slot > b.tx.slot) return -1;\n    if (a.tx.slot < b.tx.slot) return 1;\n    return 0;\n  });\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header align-items-center\">\n        <h3 className=\"card-header-title\">Token History</h3>\n        <FilterDropdown\n          filter={filter}\n          toggle={() => setDropdown((show) => !show)}\n          show={showDropdown}\n          tokens={tokens}\n        ></FilterDropdown>\n        <button\n          className=\"btn btn-white btn-sm\"\n          disabled={fetching}\n          onClick={() => fetchHistories(true)}\n        >\n          {fetching ? (\n            <>\n              <span className=\"spinner-grow spinner-grow-sm mr-2\"></span>\n              Loading\n            </>\n          ) : (\n            <>\n              <span className=\"fe fe-refresh-cw mr-2\"></span>\n              Refresh\n            </>\n          )}\n        </button>\n      </div>\n\n      <div className=\"table-responsive mb-0\">\n        <table className=\"table table-sm table-nowrap card-table\">\n          <thead>\n            <tr>\n              <th className=\"text-muted w-1\">Slot</th>\n              <th className=\"text-muted\">Result</th>\n              <th className=\"text-muted\">Token</th>\n              <th className=\"text-muted\">Instruction Type</th>\n              <th className=\"text-muted\">Transaction Signature</th>\n            </tr>\n          </thead>\n          <tbody className=\"list\">\n            {mintAndTxs.map(({ mint, tx }) => (\n              <TokenTransactionRow\n                key={tx.signature}\n                mint={mint}\n                tx={tx}\n                details={transactionDetailsCache[tx.signature]}\n              />\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      <div className=\"card-footer\">\n        {allFoundOldest ? (\n          <div className=\"text-muted text-center\">Fetched full history</div>\n        ) : (\n          <button\n            className=\"btn btn-primary w-100\"\n            onClick={() => fetchHistories()}\n            disabled={fetching}\n          >\n            {fetching ? (\n              <>\n                <span className=\"spinner-grow spinner-grow-sm mr-2\"></span>\n                Loading\n              </>\n            ) : (\n              \"Load More\"\n            )}\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nconst FilterDropdown = ({ filter, toggle, show, tokens }: FilterProps) => {\n  const { cluster } = useCluster();\n  const { tokenRegistry } = useTokenRegistry();\n\n  const buildLocation = (location: Location, filter: string) => {\n    const params = new URLSearchParams(location.search);\n    if (filter === ALL_TOKENS) {\n      params.delete(\"filter\");\n    } else {\n      params.set(\"filter\", filter);\n    }\n    return {\n      ...location,\n      search: params.toString(),\n    };\n  };\n\n  const filterOptions: string[] = [ALL_TOKENS];\n  const nameLookup: Map<string, string> = new Map();\n\n  tokens.forEach((token) => {\n    const address = token.info.mint.toBase58();\n    if (!nameLookup.has(address)) {\n      filterOptions.push(address);\n      nameLookup.set(address, formatTokenName(address, cluster, tokenRegistry));\n    }\n  });\n\n  return (\n    <div className=\"dropdown mr-2\">\n      <small className=\"mr-2\">Filter:</small>\n      <button\n        className=\"btn btn-white btn-sm dropdown-toggle\"\n        type=\"button\"\n        onClick={toggle}\n      >\n        {filter === ALL_TOKENS ? \"All Tokens\" : nameLookup.get(filter)}\n      </button>\n      <div\n        className={`token-filter dropdown-menu-right dropdown-menu${\n          show ? \" show\" : \"\"\n        }`}\n      >\n        {filterOptions.map((filterOption) => {\n          return (\n            <Link\n              key={filterOption}\n              to={(location: Location) => buildLocation(location, filterOption)}\n              className={`dropdown-item${\n                filterOption === filter ? \" active\" : \"\"\n              }`}\n              onClick={toggle}\n            >\n              {filterOption === ALL_TOKENS\n                ? \"All Tokens\"\n                : formatTokenName(filterOption, cluster, tokenRegistry)}\n            </Link>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nconst TokenTransactionRow = React.memo(\n  ({\n    mint,\n    tx,\n    details,\n  }: {\n    mint: PublicKey;\n    tx: ConfirmedSignatureInfo;\n    details: CacheEntry<Details> | undefined;\n  }) => {\n    const fetchDetails = useFetchTransactionDetails();\n    const { cluster } = useCluster();\n\n    // Fetch details on load\n    React.useEffect(() => {\n      if (!details) fetchDetails(tx.signature);\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n    let statusText: string;\n    let statusClass: string;\n    if (tx.err) {\n      statusClass = \"warning\";\n      statusText = \"Failed\";\n    } else {\n      statusClass = \"success\";\n      statusText = \"Success\";\n    }\n\n    const instructions =\n      details?.data?.transaction?.transaction.message.instructions;\n    if (!instructions)\n      return (\n        <tr key={tx.signature}>\n          <td className=\"w-1\">\n            <Slot slot={tx.slot} link />\n          </td>\n\n          <td>\n            <span className={`badge badge-soft-${statusClass}`}>\n              {statusText}\n            </span>\n          </td>\n\n          <td>\n            <Address pubkey={mint} link truncate />\n          </td>\n\n          <td>\n            <span className=\"spinner-grow spinner-grow-sm mr-2\"></span>\n            Loading\n          </td>\n\n          <td>\n            <Signature signature={tx.signature} link />\n          </td>\n        </tr>\n      );\n\n    let tokenInstructionNames: InstructionType[] = [];\n\n    if (details?.data?.transaction) {\n      const transaction = details.data.transaction;\n\n      tokenInstructionNames = instructions\n        .map((ix, index): InstructionType | undefined => {\n          let name = \"Unknown\";\n\n          const innerInstructions: (\n            | ParsedInstruction\n            | PartiallyDecodedInstruction\n          )[] = [];\n\n          if (\n            transaction.meta?.innerInstructions &&\n            (cluster !== Cluster.MainnetBeta ||\n              transaction.slot >= INNER_INSTRUCTIONS_START_SLOT)\n          ) {\n            transaction.meta.innerInstructions.forEach((ix) => {\n              if (ix.index === index) {\n                ix.instructions.forEach((inner) => {\n                  innerInstructions.push(inner);\n                });\n              }\n            });\n          }\n\n          let transactionInstruction;\n          if (transaction?.transaction) {\n            transactionInstruction = intoTransactionInstruction(\n              transaction.transaction,\n              ix\n            );\n          }\n\n          if (\"parsed\" in ix) {\n            if (ix.program === \"spl-token\") {\n              name = getTokenProgramInstructionName(ix, tx);\n            } else {\n              return undefined;\n            }\n          } else if (\n            transactionInstruction &&\n            isSerumInstruction(transactionInstruction)\n          ) {\n            try {\n              name = parseSerumInstructionTitle(transactionInstruction);\n            } catch (error) {\n              reportError(error, { signature: tx.signature });\n              return undefined;\n            }\n          } else if (\n            transactionInstruction &&\n            isTokenSwapInstruction(transactionInstruction)\n          ) {\n            try {\n              name = parseTokenSwapInstructionTitle(transactionInstruction);\n            } catch (error) {\n              reportError(error, { signature: tx.signature });\n              return undefined;\n            }\n          } else if (\n            transactionInstruction &&\n            isTokenLendingInstruction(transactionInstruction)\n          ) {\n            try {\n              name = parseTokenLendingInstructionTitle(transactionInstruction);\n            } catch (error) {\n              reportError(error, { signature: tx.signature });\n              return undefined;\n            }\n          } else if (\n            transactionInstruction &&\n            isBonfidaBotInstruction(transactionInstruction)\n          ) {\n            try {\n              name = parseBonfidaBotInstructionTitle(transactionInstruction);\n            } catch (error) {\n              reportError(error, { signature: tx.signature });\n              return undefined;\n            }\n          } else if (\n            transactionInstruction &&\n            isMangoInstruction(transactionInstruction)\n          ) {\n            try {\n              name = parseMangoInstructionTitle(transactionInstruction);\n            } catch (error) {\n              reportError(error, { signature: tx.signature });\n              return undefined;\n            }\n          } else {\n            if (\n              ix.accounts.findIndex((account) =>\n                account.equals(TOKEN_PROGRAM_ID)\n              ) >= 0\n            ) {\n              name = \"Unknown (Inner)\";\n            } else {\n              return undefined;\n            }\n          }\n\n          return {\n            name,\n            innerInstructions,\n          };\n        })\n        .filter((name) => name !== undefined) as InstructionType[];\n    }\n\n    return (\n      <>\n        {tokenInstructionNames.map((instructionType, index) => {\n          return (\n            <tr key={index}>\n              <td className=\"w-1\">\n                <Slot slot={tx.slot} link />\n              </td>\n\n              <td>\n                <span className={`badge badge-soft-${statusClass}`}>\n                  {statusText}\n                </span>\n              </td>\n\n              <td className=\"forced-truncate\">\n                <Address pubkey={mint} link truncateUnknown />\n              </td>\n\n              <td>\n                <InstructionDetails instructionType={instructionType} tx={tx} />\n              </td>\n\n              <td className=\"forced-truncate\">\n                <Signature signature={tx.signature} link truncate />\n              </td>\n            </tr>\n          );\n        })}\n      </>\n    );\n  }\n);\n\nfunction InstructionDetails({\n  instructionType,\n  tx,\n}: {\n  instructionType: InstructionType;\n  tx: ConfirmedSignatureInfo;\n}) {\n  const [expanded, setExpanded] = React.useState(false);\n\n  let instructionTypes = instructionType.innerInstructions\n    .map((ix) => {\n      if (\"parsed\" in ix && ix.program === \"spl-token\") {\n        return getTokenProgramInstructionName(ix, tx);\n      }\n      return undefined;\n    })\n    .filter((type) => type !== undefined);\n\n  return (\n    <>\n      <p className=\"tree\">\n        {instructionTypes.length > 0 && (\n          <span\n            onClick={(e) => {\n              e.preventDefault();\n              setExpanded(!expanded);\n            }}\n            className={`c-pointer fe mr-2 ${\n              expanded ? \"fe-minus-square\" : \"fe-plus-square\"\n            }`}\n          ></span>\n        )}\n        {instructionType.name}\n      </p>\n      {expanded && (\n        <ul className=\"tree\">\n          {instructionTypes.map((type, index) => {\n            return <li key={index}>{type}</li>;\n          })}\n        </ul>\n      )}\n    </>\n  );\n}\n\nfunction formatTokenName(\n  pubkey: string,\n  cluster: Cluster,\n  tokenRegistry: TokenInfoMap\n): string {\n  let display = displayAddress(pubkey, cluster, tokenRegistry);\n\n  if (display === pubkey) {\n    display = display.slice(0, TRUNCATE_TOKEN_LENGTH) + \"\\u2026\";\n  }\n\n  return display;\n}\n","import React from \"react\";\nimport { useCluster, Cluster } from \"providers/cluster\";\nimport * as Cache from \"providers/cache\";\nimport { ActionType, FetchStatus } from \"providers/cache\";\nimport {\n  PublicKey,\n  Connection,\n  TokenAccountBalancePair,\n  ParsedAccountData,\n} from \"@velas/web3\";\nimport { TokenAccountInfo, TokenAccount } from \"validators/accounts/token\";\nimport { ParsedInfo } from \"validators\";\nimport { create } from \"superstruct\";\nimport { reportError } from \"utils/sentry\";\n\ntype LargestAccounts = {\n  largest: TokenAccountBalancePairWithOwner[];\n};\n\ntype State = Cache.State<LargestAccounts>;\ntype Dispatch = Cache.Dispatch<LargestAccounts>;\n\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype ProviderProps = { children: React.ReactNode };\nexport function LargestAccountsProvider({ children }: ProviderProps) {\n  const { url } = useCluster();\n  const [state, dispatch] = Cache.useReducer<LargestAccounts>(url);\n\n  // Clear cache whenever cluster is changed\n  React.useEffect(() => {\n    dispatch({ type: ActionType.Clear, url });\n  }, [dispatch, url]);\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        {children}\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\ntype OptionalOwner = {\n  owner?: PublicKey;\n};\n\nexport type TokenAccountBalancePairWithOwner = TokenAccountBalancePair &\n  OptionalOwner;\n\nasync function fetchLargestAccounts(\n  dispatch: Dispatch,\n  pubkey: PublicKey,\n  cluster: Cluster,\n  url: string\n) {\n  dispatch({\n    type: ActionType.Update,\n    key: pubkey.toBase58(),\n    status: Cache.FetchStatus.Fetching,\n    url,\n  });\n\n  let data;\n  let fetchStatus;\n  try {\n    data = {\n      largest: (\n        await new Connection(url, \"confirmed\").getTokenLargestAccounts(pubkey)\n      ).value,\n    };\n\n    data.largest = await Promise.all(\n      data.largest.map(\n        async (account): Promise<TokenAccountBalancePairWithOwner> => {\n          try {\n            const accountInfo = (\n              await new Connection(url, \"confirmed\").getParsedAccountInfo(\n                account.address\n              )\n            ).value;\n            if (accountInfo && \"parsed\" in accountInfo.data) {\n              const info = createParsedAccountInfo(accountInfo.data);\n              return {\n                ...account,\n                owner: info.owner,\n              };\n            }\n          } catch (error) {\n            if (cluster !== Cluster.Custom) {\n              reportError(error, { url });\n            }\n          }\n          return account;\n        }\n      )\n    );\n\n    fetchStatus = FetchStatus.Fetched;\n  } catch (error) {\n    if (cluster !== Cluster.Custom) {\n      reportError(error, { url });\n    }\n    fetchStatus = FetchStatus.FetchFailed;\n  }\n  dispatch({\n    type: ActionType.Update,\n    status: fetchStatus,\n    data,\n    key: pubkey.toBase58(),\n    url,\n  });\n}\n\nexport function useFetchTokenLargestAccounts() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(\n      `useFetchTokenLargestAccounts must be used within a MintsProvider`\n    );\n  }\n\n  const { cluster, url } = useCluster();\n  return React.useCallback(\n    (pubkey: PublicKey) => {\n      fetchLargestAccounts(dispatch, pubkey, cluster, url);\n    },\n    [dispatch, cluster, url]\n  );\n}\n\nexport function useTokenLargestTokens(\n  address: string\n): Cache.CacheEntry<LargestAccounts> | undefined {\n  const context = React.useContext(StateContext);\n\n  if (!context) {\n    throw new Error(\n      `useTokenLargestTokens must be used within a MintsProvider`\n    );\n  }\n\n  return context.entries[address];\n}\n\nfunction createParsedAccountInfo(\n  parsedData: ParsedAccountData\n): TokenAccountInfo {\n  try {\n    const data = create(parsedData.parsed, ParsedInfo);\n    const parsed = create(data, TokenAccount);\n    return create(parsed.info, TokenAccountInfo);\n  } catch (error) {\n    throw error;\n  }\n}\n","import React from \"react\";\nimport { PublicKey } from \"@velas/web3\";\nimport { LoadingCard } from \"components/common/LoadingCard\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { Address } from \"components/common/Address\";\nimport {\n  useTokenLargestTokens,\n  useFetchTokenLargestAccounts,\n  TokenAccountBalancePairWithOwner,\n} from \"providers/mints/largest\";\nimport { FetchStatus } from \"providers/cache\";\nimport { useMintAccountInfo } from \"providers/accounts\";\nimport { normalizeTokenAmount } from \"utils\";\nimport { useTokenRegistry } from \"providers/mints/token-registry\";\nimport BigNumber from \"bignumber.js\";\n\nexport function TokenLargestAccountsCard({ pubkey }: { pubkey: PublicKey }) {\n  const mintAddress = pubkey.toBase58();\n  const mintInfo = useMintAccountInfo(mintAddress);\n  const largestAccounts = useTokenLargestTokens(mintAddress);\n  const fetchLargestAccounts = useFetchTokenLargestAccounts();\n  const refreshLargest = React.useCallback(\n    () => fetchLargestAccounts(pubkey),\n    [pubkey, fetchLargestAccounts]\n  );\n  const { tokenRegistry } = useTokenRegistry();\n  const unit = tokenRegistry.get(mintAddress)?.symbol;\n  const unitLabel = unit ? `(${unit})` : \"\";\n\n  React.useEffect(() => {\n    if (mintInfo) refreshLargest();\n  }, [mintInfo, refreshLargest]);\n\n  // Largest accounts hasn't started fetching\n  if (largestAccounts === undefined) return null;\n\n  // This is not a mint account\n  if (mintInfo === undefined) return null;\n\n  if (largestAccounts?.data === undefined) {\n    if (largestAccounts.status === FetchStatus.Fetching) {\n      return <LoadingCard message=\"Loading largest accounts\" />;\n    }\n\n    return (\n      <ErrorCard\n        retry={refreshLargest}\n        text=\"Failed to fetch largest accounts\"\n      />\n    );\n  } else if (largestAccounts.status === FetchStatus.Fetching) {\n    return <LoadingCard message=\"Refreshing largest accounts\" />;\n  }\n\n  const accounts = largestAccounts.data.largest;\n  if (accounts.length === 0) {\n    return <ErrorCard text=\"No holders found\" />;\n  }\n\n  // Find largest fixed point in accounts array\n  const balanceFixedPoint = accounts.reduce(\n    (prev: number, current: TokenAccountBalancePairWithOwner) => {\n      const amount = `${current.uiAmountString}`;\n      const length = amount.length;\n      const decimalIndex = amount.indexOf(\".\");\n      if (decimalIndex >= 0 && length - decimalIndex - 1 > prev) {\n        return length - decimalIndex - 1;\n      }\n      return prev;\n    },\n    0\n  );\n\n  const supplyTotal = normalizeTokenAmount(mintInfo.supply, mintInfo.decimals);\n\n  return (\n    <>\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <div className=\"row align-items-center\">\n            <div className=\"col\">\n              <h4 className=\"card-header-title\">Largest Accounts</h4>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"table-responsive mb-0\">\n          <table className=\"table table-sm card-table\">\n            <thead>\n              <tr>\n                <th className=\"text-muted\">Rank</th>\n                <th className=\"text-muted\">Address</th>\n                <th className=\"text-muted\">Owner</th>\n                <th className=\"text-muted text-right\">Balance {unitLabel}</th>\n                <th className=\"text-muted text-right\">% of Total Supply</th>\n              </tr>\n            </thead>\n            <tbody className=\"list\">\n              {accounts.map((account, index) =>\n                renderAccountRow(account, index, balanceFixedPoint, supplyTotal)\n              )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst renderAccountRow = (\n  account: TokenAccountBalancePairWithOwner,\n  index: number,\n  balanceFixedPoint: number,\n  supply: number\n) => {\n  let percent = \"-\";\n  if (supply > 0 && account.uiAmountString) {\n    let uiAmountPercent = new BigNumber(account.uiAmountString)\n      .times(100)\n      .dividedBy(supply);\n\n    percent = `${uiAmountPercent.toFormat(3)}%`;\n\n    if (\n      parseFloat(percent) === 0 &&\n      new BigNumber(account.uiAmountString).gt(0)\n    ) {\n      percent = `~${percent}`;\n    }\n  }\n  return (\n    <tr key={index}>\n      <td>\n        <span className=\"badge badge-soft-gray badge-pill\">{index + 1}</span>\n      </td>\n      <td className=\"td\">\n        <Address pubkey={account.address} link truncate />\n      </td>\n      <td>\n        {account.owner && <Address pubkey={account.owner} link truncate />}\n      </td>\n      <td className=\"text-right text-monospace\">\n        {account.uiAmountString &&\n          new BigNumber(account.uiAmountString).toFormat(balanceFixedPoint)}\n      </td>\n      <td className=\"text-right text-monospace\">{percent}</td>\n    </tr>\n  );\n};\n","import React from \"react\";\nimport { Address } from \"./Address\";\nimport { Account } from \"providers/accounts\";\nimport { SolBalance } from \"utils\";\n\ntype AccountHeaderProps = {\n  title: string;\n  refresh: Function;\n};\n\ntype AccountProps = {\n  account: Account;\n};\n\nexport function AccountHeader({ title, refresh }: AccountHeaderProps) {\n  return (\n    <div className=\"card-header align-items-center\">\n      <h3 className=\"card-header-title\">{title}</h3>\n      <button className=\"btn btn-white btn-sm\" onClick={() => refresh()}>\n        <span className=\"fe fe-refresh-cw mr-2\"></span>\n        Refresh\n      </button>\n    </div>\n  );\n}\n\nexport function AccountAddressRow({ account }: AccountProps) {\n  return (\n    <tr>\n      <td>Address</td>\n      <td className=\"text-lg-right\">\n        <Address pubkey={account.pubkey} alignRight raw />\n      </td>\n    </tr>\n  );\n}\n\nexport function AccountBalanceRow({ account }: AccountProps) {\n  const { lamports } = account;\n  return (\n    <tr>\n      <td>Balance (XZO)</td>\n      <td className=\"text-lg-right text-uppercase\">\n        <SolBalance lamports={lamports} />\n      </td>\n    </tr>\n  );\n}\n\nexport function AccountOwnerRow({ account }: AccountProps) {\n  if (account.details) {\n    return (\n      <tr>\n        <td>Owner</td>\n        <td className=\"text-lg-right\">\n          <Address pubkey={account.details.owner} alignRight link />\n        </td>\n      </tr>\n    );\n  }\n\n  return <></>;\n}\n","import React from \"react\";\nimport { Account, useFetchAccountInfo } from \"providers/accounts\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport { Address } from \"components/common/Address\";\nimport { VoteAccount } from \"validators/accounts/vote\";\nimport { displayTimestamp } from \"utils/date\";\nimport {\n  AccountHeader,\n  AccountAddressRow,\n  AccountBalanceRow,\n} from \"components/common/Account\";\nimport { Slot } from \"components/common/Slot\";\n\nexport function VoteAccountSection({\n  account,\n  voteAccount,\n}: {\n  account: Account;\n  voteAccount: VoteAccount;\n}) {\n  const refresh = useFetchAccountInfo();\n  const rootSlot = voteAccount.info.rootSlot;\n  return (\n    <div className=\"card\">\n      <AccountHeader\n        title=\"Vote Account\"\n        refresh={() => refresh(account.pubkey)}\n      />\n\n      <TableCardBody>\n        <AccountAddressRow account={account} />\n        <AccountBalanceRow account={account} />\n\n        <tr>\n          <td>\n            Authorized Voter\n            {voteAccount.info.authorizedVoters.length > 1 ? \"s\" : \"\"}\n          </td>\n          <td className=\"text-lg-right\">\n            {voteAccount.info.authorizedVoters.map((voter) => {\n              return (\n                <Address\n                  pubkey={voter.authorizedVoter}\n                  key={voter.authorizedVoter.toString()}\n                  alignRight\n                  raw\n                  link\n                />\n              );\n            })}\n          </td>\n        </tr>\n\n        <tr>\n          <td>Authorized Withdrawer</td>\n          <td className=\"text-lg-right\">\n            <Address\n              pubkey={voteAccount.info.authorizedWithdrawer}\n              alignRight\n              raw\n              link\n            />\n          </td>\n        </tr>\n\n        <tr>\n          <td>Last Timestamp</td>\n          <td className=\"text-lg-right text-monospace\">\n            {displayTimestamp(voteAccount.info.lastTimestamp.timestamp * 1000)}\n          </td>\n        </tr>\n\n        <tr>\n          <td>Commission</td>\n          <td className=\"text-lg-right\">{voteAccount.info.commission + \"%\"}</td>\n        </tr>\n\n        <tr>\n          <td>Root Slot</td>\n          <td className=\"text-lg-right\">\n            {rootSlot !== null ? <Slot slot={rootSlot} link /> : \"N/A\"}\n          </td>\n        </tr>\n      </TableCardBody>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Account, useFetchAccountInfo } from \"providers/accounts\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport { Address } from \"components/common/Address\";\nimport { NonceAccount } from \"validators/accounts/nonce\";\nimport {\n  AccountHeader,\n  AccountAddressRow,\n  AccountBalanceRow,\n} from \"components/common/Account\";\n\nexport function NonceAccountSection({\n  account,\n  nonceAccount,\n}: {\n  account: Account;\n  nonceAccount: NonceAccount;\n}) {\n  const refresh = useFetchAccountInfo();\n  return (\n    <div className=\"card\">\n      <AccountHeader\n        title=\"Nonce Account\"\n        refresh={() => refresh(account.pubkey)}\n      />\n\n      <TableCardBody>\n        <AccountAddressRow account={account} />\n        <AccountBalanceRow account={account} />\n\n        <tr>\n          <td>Authority</td>\n          <td className=\"text-lg-right\">\n            <Address pubkey={nonceAccount.info.authority} alignRight raw link />\n          </td>\n        </tr>\n\n        <tr>\n          <td>Blockhash</td>\n          <td className=\"text-lg-right\">\n            <code>{nonceAccount.info.blockhash}</code>\n          </td>\n        </tr>\n\n        <tr>\n          <td>Fee</td>\n          <td className=\"text-lg-right\">\n            {nonceAccount.info.feeCalculator.lamportsPerSignature} lamports per\n            signature\n          </td>\n        </tr>\n      </TableCardBody>\n    </div>\n  );\n}\n","import { Slot } from \"components/common/Slot\";\nimport React from \"react\";\nimport { VoteAccount, Vote } from \"validators/accounts/vote\";\n\nexport function VotesCard({ voteAccount }: { voteAccount: VoteAccount }) {\n  return (\n    <>\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <div className=\"row align-items-center\">\n            <div className=\"col\">\n              <h3 className=\"card-header-title\">Vote History</h3>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"table-responsive mb-0\">\n          <table className=\"table table-sm table-nowrap card-table\">\n            <thead>\n              <tr>\n                <th className=\"w-1 text-muted\">Slot</th>\n                <th className=\"text-muted\">Confirmation Count</th>\n              </tr>\n            </thead>\n            <tbody className=\"list\">\n              {voteAccount.info.votes.length > 0 &&\n                voteAccount.info.votes\n                  .reverse()\n                  .map((vote: Vote, index) => renderAccountRow(vote, index))}\n            </tbody>\n          </table>\n        </div>\n\n        <div className=\"card-footer\">\n          <div className=\"text-muted text-center\">\n            {voteAccount.info.votes.length > 0 ? \"\" : \"No votes found\"}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst renderAccountRow = (vote: Vote, index: number) => {\n  return (\n    <tr key={index}>\n      <td className=\"w-1 text-monospace\">\n        <Slot slot={vote.slot} link />\n      </td>\n      <td className=\"text-monospace\">{vote.confirmationCount}</td>\n    </tr>\n  );\n};\n","import React from \"react\";\nimport { Account, useFetchAccountInfo } from \"providers/accounts\";\nimport {\n  SysvarAccount,\n  SysvarClockAccount,\n  SysvarEpochScheduleAccount,\n  SysvarFeesAccount,\n  SysvarRecentBlockhashesAccount,\n  SysvarRentAccount,\n  SysvarRewardsAccount,\n  SysvarSlotHashesAccount,\n  SysvarSlotHistoryAccount,\n  SysvarStakeHistoryAccount,\n} from \"validators/accounts/sysvar\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport {\n  AccountHeader,\n  AccountAddressRow,\n  AccountBalanceRow,\n} from \"components/common/Account\";\nimport { displayTimestamp } from \"utils/date\";\nimport { Slot } from \"components/common/Slot\";\n\nexport function SysvarAccountSection({\n  account,\n  sysvarAccount,\n}: {\n  account: Account;\n  sysvarAccount: SysvarAccount;\n}) {\n  switch (sysvarAccount.type) {\n    case \"clock\":\n      return (\n        <SysvarAccountClockCard\n          account={account}\n          sysvarAccount={sysvarAccount}\n        />\n      );\n    case \"rent\":\n      return (\n        <SysvarAccountRentCard\n          account={account}\n          sysvarAccount={sysvarAccount}\n        />\n      );\n    case \"rewards\":\n      return (\n        <SysvarAccountRewardsCard\n          account={account}\n          sysvarAccount={sysvarAccount}\n        />\n      );\n    case \"epochSchedule\":\n      return (\n        <SysvarAccountEpochScheduleCard\n          account={account}\n          sysvarAccount={sysvarAccount}\n        />\n      );\n    case \"fees\":\n      return (\n        <SysvarAccountFeesCard\n          account={account}\n          sysvarAccount={sysvarAccount}\n        />\n      );\n    case \"recentBlockhashes\":\n      return (\n        <SysvarAccountRecentBlockhashesCard\n          account={account}\n          sysvarAccount={sysvarAccount}\n        />\n      );\n    case \"slotHashes\":\n      return (\n        <SysvarAccountSlotHashes\n          account={account}\n          sysvarAccount={sysvarAccount}\n        />\n      );\n    case \"slotHistory\":\n      return (\n        <SysvarAccountSlotHistory\n          account={account}\n          sysvarAccount={sysvarAccount}\n        />\n      );\n    case \"stakeHistory\":\n      return (\n        <SysvarAccountStakeHistory\n          account={account}\n          sysvarAccount={sysvarAccount}\n        />\n      );\n  }\n}\n\nfunction SysvarAccountRecentBlockhashesCard({\n  account,\n}: {\n  account: Account;\n  sysvarAccount: SysvarRecentBlockhashesAccount;\n}) {\n  const refresh = useFetchAccountInfo();\n  return (\n    <div className=\"card\">\n      <AccountHeader\n        title=\"Sysvar: Recent Blockhashes\"\n        refresh={() => refresh(account.pubkey)}\n      />\n\n      <TableCardBody>\n        <AccountAddressRow account={account} />\n        <AccountBalanceRow account={account} />\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction SysvarAccountSlotHashes({\n  account,\n}: {\n  account: Account;\n  sysvarAccount: SysvarSlotHashesAccount;\n}) {\n  const refresh = useFetchAccountInfo();\n  return (\n    <div className=\"card\">\n      <AccountHeader\n        title=\"Sysvar: Slot Hashes\"\n        refresh={() => refresh(account.pubkey)}\n      />\n\n      <TableCardBody>\n        <AccountAddressRow account={account} />\n        <AccountBalanceRow account={account} />\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction SysvarAccountSlotHistory({\n  account,\n  sysvarAccount,\n}: {\n  account: Account;\n  sysvarAccount: SysvarSlotHistoryAccount;\n}) {\n  const refresh = useFetchAccountInfo();\n  const history = Array.from(\n    {\n      length: 100,\n    },\n    (v, k) => sysvarAccount.info.nextSlot - k\n  );\n  return (\n    <div className=\"card\">\n      <AccountHeader\n        title=\"Sysvar: Slot History\"\n        refresh={() => refresh(account.pubkey)}\n      />\n\n      <TableCardBody>\n        <AccountAddressRow account={account} />\n        <AccountBalanceRow account={account} />\n\n        <tr>\n          <td className=\"align-top\">\n            Slot History{\" \"}\n            <span className=\"text-muted\">(previous 100 slots)</span>\n          </td>\n          <td className=\"text-lg-right text-monospace\">\n            {history.map((val) => (\n              <p key={val} className=\"mb-0\">\n                <Slot slot={val} link />\n              </p>\n            ))}\n          </td>\n        </tr>\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction SysvarAccountStakeHistory({\n  account,\n}: {\n  account: Account;\n  sysvarAccount: SysvarStakeHistoryAccount;\n}) {\n  const refresh = useFetchAccountInfo();\n  return (\n    <div className=\"card\">\n      <AccountHeader\n        title=\"Sysvar: Stake History\"\n        refresh={() => refresh(account.pubkey)}\n      />\n\n      <TableCardBody>\n        <AccountAddressRow account={account} />\n        <AccountBalanceRow account={account} />\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction SysvarAccountFeesCard({\n  account,\n  sysvarAccount,\n}: {\n  account: Account;\n  sysvarAccount: SysvarFeesAccount;\n}) {\n  const refresh = useFetchAccountInfo();\n  return (\n    <div className=\"card\">\n      <AccountHeader\n        title=\"Sysvar: Fees\"\n        refresh={() => refresh(account.pubkey)}\n      />\n\n      <TableCardBody>\n        <AccountAddressRow account={account} />\n        <AccountBalanceRow account={account} />\n\n        <tr>\n          <td>Lamports Per Signature</td>\n          <td className=\"text-lg-right\">\n            {sysvarAccount.info.feeCalculator.lamportsPerSignature}\n          </td>\n        </tr>\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction SysvarAccountEpochScheduleCard({\n  account,\n  sysvarAccount,\n}: {\n  account: Account;\n  sysvarAccount: SysvarEpochScheduleAccount;\n}) {\n  const refresh = useFetchAccountInfo();\n  return (\n    <div className=\"card\">\n      <AccountHeader\n        title=\"Sysvar: Epoch Schedule\"\n        refresh={() => refresh(account.pubkey)}\n      />\n\n      <TableCardBody>\n        <AccountAddressRow account={account} />\n        <AccountBalanceRow account={account} />\n\n        <tr>\n          <td>Slots Per Epoch</td>\n          <td className=\"text-lg-right\">{sysvarAccount.info.slotsPerEpoch}</td>\n        </tr>\n\n        <tr>\n          <td>Leader Schedule Slot Offset</td>\n          <td className=\"text-lg-right\">\n            {sysvarAccount.info.leaderScheduleSlotOffset}\n          </td>\n        </tr>\n\n        <tr>\n          <td>Epoch Warmup Enabled</td>\n          <td className=\"text-lg-right\">\n            <code>{sysvarAccount.info.warmup ? \"true\" : \"false\"}</code>\n          </td>\n        </tr>\n\n        <tr>\n          <td>First Normal Epoch</td>\n          <td className=\"text-lg-right\">\n            {sysvarAccount.info.firstNormalEpoch}\n          </td>\n        </tr>\n\n        <tr>\n          <td>First Normal Slot</td>\n          <td className=\"text-lg-right\">\n            <Slot slot={sysvarAccount.info.firstNormalSlot} />\n          </td>\n        </tr>\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction SysvarAccountClockCard({\n  account,\n  sysvarAccount,\n}: {\n  account: Account;\n  sysvarAccount: SysvarClockAccount;\n}) {\n  const refresh = useFetchAccountInfo();\n  return (\n    <div className=\"card\">\n      <AccountHeader\n        title=\"Sysvar: Clock\"\n        refresh={() => refresh(account.pubkey)}\n      />\n\n      <TableCardBody>\n        <AccountAddressRow account={account} />\n        <AccountBalanceRow account={account} />\n\n        <tr>\n          <td>Timestamp</td>\n          <td className=\"text-lg-right text-monospace\">\n            {displayTimestamp(sysvarAccount.info.unixTimestamp * 1000)}\n          </td>\n        </tr>\n\n        <tr>\n          <td>Epoch</td>\n          <td className=\"text-lg-right\">{sysvarAccount.info.epoch}</td>\n        </tr>\n\n        <tr>\n          <td>Leader Schedule Epoch</td>\n          <td className=\"text-lg-right\">\n            {sysvarAccount.info.leaderScheduleEpoch}\n          </td>\n        </tr>\n\n        <tr>\n          <td>Slot</td>\n          <td className=\"text-lg-right\">\n            <Slot slot={sysvarAccount.info.slot} link />\n          </td>\n        </tr>\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction SysvarAccountRentCard({\n  account,\n  sysvarAccount,\n}: {\n  account: Account;\n  sysvarAccount: SysvarRentAccount;\n}) {\n  const refresh = useFetchAccountInfo();\n  return (\n    <div className=\"card\">\n      <AccountHeader\n        title=\"Sysvar: Rent\"\n        refresh={() => refresh(account.pubkey)}\n      />\n\n      <TableCardBody>\n        <AccountAddressRow account={account} />\n        <AccountBalanceRow account={account} />\n\n        <tr>\n          <td>Burn Percent</td>\n          <td className=\"text-lg-right\">\n            {sysvarAccount.info.burnPercent + \"%\"}\n          </td>\n        </tr>\n\n        <tr>\n          <td>Exemption Threshold</td>\n          <td className=\"text-lg-right\">\n            {sysvarAccount.info.exemptionThreshold} years\n          </td>\n        </tr>\n\n        <tr>\n          <td>Lamports Per Byte Year</td>\n          <td className=\"text-lg-right\">\n            {sysvarAccount.info.lamportsPerByteYear}\n          </td>\n        </tr>\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction SysvarAccountRewardsCard({\n  account,\n  sysvarAccount,\n}: {\n  account: Account;\n  sysvarAccount: SysvarRewardsAccount;\n}) {\n  const refresh = useFetchAccountInfo();\n\n  const validatorPointValueFormatted = new Intl.NumberFormat(\"en-US\", {\n    maximumSignificantDigits: 20,\n  }).format(sysvarAccount.info.validatorPointValue);\n\n  return (\n    <div className=\"card\">\n      <AccountHeader\n        title=\"Sysvar: Rewards\"\n        refresh={() => refresh(account.pubkey)}\n      />\n\n      <TableCardBody>\n        <AccountAddressRow account={account} />\n        <AccountBalanceRow account={account} />\n\n        <tr>\n          <td>Validator Point Value</td>\n          <td className=\"text-lg-right text-monospace\">\n            {validatorPointValueFormatted} lamports\n          </td>\n        </tr>\n      </TableCardBody>\n    </div>\n  );\n}\n","import { Slot } from \"components/common/Slot\";\nimport React from \"react\";\nimport {\n  SysvarAccount,\n  SlotHashesInfo,\n  SlotHashEntry,\n} from \"validators/accounts/sysvar\";\n\nexport function SlotHashesCard({\n  sysvarAccount,\n}: {\n  sysvarAccount: SysvarAccount;\n}) {\n  const slotHashes = sysvarAccount.info as SlotHashesInfo;\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <div className=\"row align-items-center\">\n          <div className=\"col\">\n            <h3 className=\"card-header-title\">Slot Hashes</h3>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"table-responsive mb-0\">\n        <table className=\"table table-sm table-nowrap card-table\">\n          <thead>\n            <tr>\n              <th className=\"w-1 text-muted\">Slot</th>\n              <th className=\"text-muted\">Blockhash</th>\n            </tr>\n          </thead>\n          <tbody className=\"list\">\n            {slotHashes.length > 0 &&\n              slotHashes.map((entry: SlotHashEntry, index) => {\n                return renderAccountRow(entry, index);\n              })}\n          </tbody>\n        </table>\n      </div>\n\n      <div className=\"card-footer\">\n        <div className=\"text-muted text-center\">\n          {slotHashes.length > 0 ? \"\" : \"No hashes found\"}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst renderAccountRow = (entry: SlotHashEntry, index: number) => {\n  return (\n    <tr key={index}>\n      <td className=\"w-1 text-monospace\">\n        <Slot slot={entry.slot} link />\n      </td>\n      <td className=\"text-monospace\">{entry.hash}</td>\n    </tr>\n  );\n};\n","import React from \"react\";\nimport { SolBalance } from \"utils\";\nimport {\n  SysvarAccount,\n  StakeHistoryInfo,\n  StakeHistoryEntry,\n} from \"validators/accounts/sysvar\";\n\nexport function StakeHistoryCard({\n  sysvarAccount,\n}: {\n  sysvarAccount: SysvarAccount;\n}) {\n  const stakeHistory = sysvarAccount.info as StakeHistoryInfo;\n  return (\n    <>\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <div className=\"row align-items-center\">\n            <div className=\"col\">\n              <h3 className=\"card-header-title\">Stake History</h3>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"table-responsive mb-0\">\n          <table className=\"table table-sm table-nowrap card-table\">\n            <thead>\n              <tr>\n                <th className=\"w-1 text-muted\">Epoch</th>\n                <th className=\"text-muted\">Effective (XZO)</th>\n                <th className=\"text-muted\">Activating (XZO)</th>\n                <th className=\"text-muted\">Deactivating (XZO)</th>\n              </tr>\n            </thead>\n            <tbody className=\"list\">\n              {stakeHistory.length > 0 &&\n                stakeHistory.map((entry: StakeHistoryEntry, index) => {\n                  return renderAccountRow(entry, index);\n                })}\n            </tbody>\n          </table>\n        </div>\n\n        <div className=\"card-footer\">\n          <div className=\"text-muted text-center\">\n            {stakeHistory.length > 0 ? \"\" : \"No stake history found\"}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst renderAccountRow = (entry: StakeHistoryEntry, index: number) => {\n  return (\n    <tr key={index}>\n      <td className=\"w-1 text-monospace\">{entry.epoch}</td>\n      <td className=\"text-monospace\">\n        <SolBalance lamports={entry.stakeHistory.effective} />\n      </td>\n      <td className=\"text-monospace\">\n        <SolBalance lamports={entry.stakeHistory.activating} />\n      </td>\n      <td className=\"text-monospace\">\n        <SolBalance lamports={entry.stakeHistory.deactivating} />\n      </td>\n    </tr>\n  );\n};\n","import React from \"react\";\nimport {\n  RecentBlockhashesInfo,\n  RecentBlockhashesEntry,\n} from \"validators/accounts/sysvar\";\n\nexport function BlockhashesCard({\n  blockhashes,\n}: {\n  blockhashes: RecentBlockhashesInfo;\n}) {\n  return (\n    <>\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <div className=\"row align-items-center\">\n            <div className=\"col\">\n              <h3 className=\"card-header-title\">Blockhashes</h3>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"table-responsive mb-0\">\n          <table className=\"table table-sm table-nowrap card-table\">\n            <thead>\n              <tr>\n                <th className=\"w-1 text-muted\">Recency</th>\n                <th className=\"w-1 text-muted\">Blockhash</th>\n                <th className=\"text-muted\">Fee Calculator</th>\n              </tr>\n            </thead>\n            <tbody className=\"list\">\n              {blockhashes.length > 0 &&\n                blockhashes.map((entry: RecentBlockhashesEntry, index) => {\n                  return renderAccountRow(entry, index);\n                })}\n            </tbody>\n          </table>\n        </div>\n\n        <div className=\"card-footer\">\n          <div className=\"text-muted text-center\">\n            {blockhashes.length > 0 ? \"\" : \"No blockhashes found\"}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst renderAccountRow = (entry: RecentBlockhashesEntry, index: number) => {\n  return (\n    <tr key={index}>\n      <td className=\"w-1\">{index + 1}</td>\n      <td className=\"w-1 text-monospace\">{entry.blockhash}</td>\n      <td className=\"\">\n        {entry.feeCalculator.lamportsPerSignature} lamports per signature\n      </td>\n    </tr>\n  );\n};\n","import React from \"react\";\nimport { Account, useFetchAccountInfo } from \"providers/accounts\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport {\n  ConfigAccount,\n  StakeConfigInfoAccount,\n  ValidatorInfoAccount,\n} from \"validators/accounts/config\";\nimport {\n  AccountAddressRow,\n  AccountBalanceRow,\n  AccountHeader,\n} from \"components/common/Account\";\nimport { PublicKey } from \"@velas/web3\";\nimport { Address } from \"components/common/Address\";\n\nconst MAX_SLASH_PENALTY = Math.pow(2, 8);\n\nexport function ConfigAccountSection({\n  account,\n  configAccount,\n}: {\n  account: Account;\n  configAccount: ConfigAccount;\n}) {\n  switch (configAccount.type) {\n    case \"stakeConfig\":\n      return (\n        <StakeConfigCard account={account} configAccount={configAccount} />\n      );\n    case \"validatorInfo\":\n      return (\n        <ValidatorInfoCard account={account} configAccount={configAccount} />\n      );\n  }\n}\n\nfunction StakeConfigCard({\n  account,\n  configAccount,\n}: {\n  account: Account;\n  configAccount: StakeConfigInfoAccount;\n}) {\n  const refresh = useFetchAccountInfo();\n\n  const warmupCooldownFormatted = new Intl.NumberFormat(\"en-US\", {\n    style: \"percent\",\n    maximumFractionDigits: 2,\n  }).format(configAccount.info.warmupCooldownRate);\n\n  const slashPenaltyFormatted = new Intl.NumberFormat(\"en-US\", {\n    style: \"percent\",\n    maximumFractionDigits: 2,\n  }).format(configAccount.info.slashPenalty / MAX_SLASH_PENALTY);\n\n  return (\n    <div className=\"card\">\n      <AccountHeader\n        title=\"Stake Config\"\n        refresh={() => refresh(account.pubkey)}\n      />\n\n      <TableCardBody>\n        <AccountAddressRow account={account} />\n        <AccountBalanceRow account={account} />\n\n        <tr>\n          <td>Warmup / Cooldown Rate</td>\n          <td className=\"text-lg-right\">{warmupCooldownFormatted}</td>\n        </tr>\n\n        <tr>\n          <td>Slash Penalty</td>\n          <td className=\"text-lg-right\">{slashPenaltyFormatted}</td>\n        </tr>\n      </TableCardBody>\n    </div>\n  );\n}\n\nfunction ValidatorInfoCard({\n  account,\n  configAccount,\n}: {\n  account: Account;\n  configAccount: ValidatorInfoAccount;\n}) {\n  const refresh = useFetchAccountInfo();\n  return (\n    <div className=\"card\">\n      <AccountHeader\n        title=\"Validator Info\"\n        refresh={() => refresh(account.pubkey)}\n      />\n\n      <TableCardBody>\n        <AccountAddressRow account={account} />\n        <AccountBalanceRow account={account} />\n\n        {configAccount.info.configData.name && (\n          <tr>\n            <td>Name</td>\n            <td className=\"text-lg-right\">\n              {configAccount.info.configData.name}\n            </td>\n          </tr>\n        )}\n\n        {configAccount.info.configData.keybaseUsername && (\n          <tr>\n            <td>Keybase Username</td>\n            <td className=\"text-lg-right\">\n              {configAccount.info.configData.keybaseUsername}\n            </td>\n          </tr>\n        )}\n\n        {configAccount.info.configData.website && (\n          <tr>\n            <td>Website</td>\n            <td className=\"text-lg-right\">\n              <a\n                href={configAccount.info.configData.website}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {configAccount.info.configData.website}\n              </a>\n            </td>\n          </tr>\n        )}\n\n        {configAccount.info.configData.details && (\n          <tr>\n            <td>Details</td>\n            <td className=\"text-lg-right\">\n              {configAccount.info.configData.details}\n            </td>\n          </tr>\n        )}\n\n        {configAccount.info.keys && configAccount.info.keys.length > 1 && (\n          <tr>\n            <td>Signer</td>\n            <td className=\"text-lg-right\">\n              <Address\n                pubkey={new PublicKey(configAccount.info.keys[1].pubkey)}\n                link\n                alignRight\n              />\n            </td>\n          </tr>\n        )}\n      </TableCardBody>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport { SolBalance } from \"utils\";\nimport { Account, useFetchAccountInfo } from \"providers/accounts\";\nimport { Address } from \"components/common/Address\";\nimport {\n  ProgramAccountInfo,\n  ProgramBufferAccountInfo,\n  ProgramDataAccountInfo,\n  UpgradeableLoaderAccount,\n} from \"validators/accounts/upgradeable-program\";\nimport { Slot } from \"components/common/Slot\";\nimport { addressLabel } from \"utils/tx\";\nimport { useCluster } from \"providers/cluster\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { UnknownAccountCard } from \"components/account/UnknownAccountCard\";\n\nexport function UpgradeableLoaderAccountSection({\n  account,\n  parsedData,\n  programData,\n}: {\n  account: Account;\n  parsedData: UpgradeableLoaderAccount;\n  programData: ProgramDataAccountInfo | undefined;\n}) {\n  switch (parsedData.type) {\n    case \"program\": {\n      if (programData === undefined) {\n        return <ErrorCard text=\"Invalid Upgradeable Program account\" />;\n      }\n      return (\n        <UpgradeableProgramSection\n          account={account}\n          programAccount={parsedData.info}\n          programData={programData}\n        />\n      );\n    }\n    case \"programData\": {\n      return (\n        <UpgradeableProgramDataSection\n          account={account}\n          programData={parsedData.info}\n        />\n      );\n    }\n    case \"buffer\": {\n      return (\n        <UpgradeableProgramBufferSection\n          account={account}\n          programBuffer={parsedData.info}\n        />\n      );\n    }\n    case \"uninitialized\": {\n      return <UnknownAccountCard account={account} />;\n    }\n  }\n}\n\nexport function UpgradeableProgramSection({\n  account,\n  programAccount,\n  programData,\n}: {\n  account: Account;\n  programAccount: ProgramAccountInfo;\n  programData: ProgramDataAccountInfo;\n}) {\n  const refresh = useFetchAccountInfo();\n  const { cluster } = useCluster();\n  const label = addressLabel(account.pubkey.toBase58(), cluster);\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title mb-0 d-flex align-items-center\">\n          Program Account\n        </h3>\n        <button\n          className=\"btn btn-white btn-sm\"\n          onClick={() => refresh(account.pubkey)}\n        >\n          <span className=\"fe fe-refresh-cw mr-2\"></span>\n          Refresh\n        </button>\n      </div>\n\n      <TableCardBody>\n        <tr>\n          <td>Address</td>\n          <td className=\"text-lg-right\">\n            <Address pubkey={account.pubkey} alignRight raw />\n          </td>\n        </tr>\n        {label && (\n          <tr>\n            <td>Address Label</td>\n            <td className=\"text-lg-right\">{label}</td>\n          </tr>\n        )}\n        <tr>\n          <td>Balance (XZO)</td>\n          <td className=\"text-lg-right text-uppercase\">\n            <SolBalance lamports={account.lamports || 0} />\n          </td>\n        </tr>\n        <tr>\n          <td>Executable</td>\n          <td className=\"text-lg-right\">Yes</td>\n        </tr>\n        <tr>\n          <td>Executable Data</td>\n          <td className=\"text-lg-right\">\n            <Address pubkey={programAccount.programData} alignRight link />\n          </td>\n        </tr>\n        <tr>\n          <td>Upgradeable</td>\n          <td className=\"text-lg-right\">\n            {programData.authority !== null ? \"Yes\" : \"No\"}\n          </td>\n        </tr>\n        <tr>\n          <td>Last Deployed Slot</td>\n          <td className=\"text-lg-right\">\n            <Slot slot={programData.slot} link />\n          </td>\n        </tr>\n        {programData.authority !== null && (\n          <tr>\n            <td>Upgrade Authority</td>\n            <td className=\"text-lg-right\">\n              <Address pubkey={programData.authority} alignRight link />\n            </td>\n          </tr>\n        )}\n      </TableCardBody>\n    </div>\n  );\n}\n\nexport function UpgradeableProgramDataSection({\n  account,\n  programData,\n}: {\n  account: Account;\n  programData: ProgramDataAccountInfo;\n}) {\n  const refresh = useFetchAccountInfo();\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title mb-0 d-flex align-items-center\">\n          Program Executable Data Account\n        </h3>\n        <button\n          className=\"btn btn-white btn-sm\"\n          onClick={() => refresh(account.pubkey)}\n        >\n          <span className=\"fe fe-refresh-cw mr-2\"></span>\n          Refresh\n        </button>\n      </div>\n\n      <TableCardBody>\n        <tr>\n          <td>Address</td>\n          <td className=\"text-lg-right\">\n            <Address pubkey={account.pubkey} alignRight raw />\n          </td>\n        </tr>\n        <tr>\n          <td>Balance (XZO)</td>\n          <td className=\"text-lg-right text-uppercase\">\n            <SolBalance lamports={account.lamports || 0} />\n          </td>\n        </tr>\n        {account.details?.space !== undefined && (\n          <tr>\n            <td>Data (Bytes)</td>\n            <td className=\"text-lg-right\">{account.details.space}</td>\n          </tr>\n        )}\n        <tr>\n          <td>Upgradeable</td>\n          <td className=\"text-lg-right\">\n            {programData.authority !== null ? \"Yes\" : \"No\"}\n          </td>\n        </tr>\n        <tr>\n          <td>Last Deployed Slot</td>\n          <td className=\"text-lg-right\">\n            <Slot slot={programData.slot} link />\n          </td>\n        </tr>\n        {programData.authority !== null && (\n          <tr>\n            <td>Upgrade Authority</td>\n            <td className=\"text-lg-right\">\n              <Address pubkey={programData.authority} alignRight link />\n            </td>\n          </tr>\n        )}\n      </TableCardBody>\n    </div>\n  );\n}\n\nexport function UpgradeableProgramBufferSection({\n  account,\n  programBuffer,\n}: {\n  account: Account;\n  programBuffer: ProgramBufferAccountInfo;\n}) {\n  const refresh = useFetchAccountInfo();\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title mb-0 d-flex align-items-center\">\n          Program Deploy Buffer Account\n        </h3>\n        <button\n          className=\"btn btn-white btn-sm\"\n          onClick={() => refresh(account.pubkey)}\n        >\n          <span className=\"fe fe-refresh-cw mr-2\"></span>\n          Refresh\n        </button>\n      </div>\n\n      <TableCardBody>\n        <tr>\n          <td>Address</td>\n          <td className=\"text-lg-right\">\n            <Address pubkey={account.pubkey} alignRight raw />\n          </td>\n        </tr>\n        <tr>\n          <td>Balance (XZO)</td>\n          <td className=\"text-lg-right text-uppercase\">\n            <SolBalance lamports={account.lamports || 0} />\n          </td>\n        </tr>\n        {account.details?.space !== undefined && (\n          <tr>\n            <td>Data (Bytes)</td>\n            <td className=\"text-lg-right\">{account.details.space}</td>\n          </tr>\n        )}\n        {programBuffer.authority !== null && (\n          <tr>\n            <td>Deploy Authority</td>\n            <td className=\"text-lg-right\">\n              <Address pubkey={programBuffer.authority} alignRight link />\n            </td>\n          </tr>\n        )}\n        {account.details && (\n          <tr>\n            <td>Owner</td>\n            <td className=\"text-lg-right\">\n              <Address pubkey={account.details.owner} alignRight link />\n            </td>\n          </tr>\n        )}\n      </TableCardBody>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { ConfirmedSignatureInfo, TransactionError } from \"@velas/web3\";\n\nexport type TransactionRow = {\n  slot: number;\n  signature: string;\n  err: TransactionError | null;\n  blockTime: number | null | undefined;\n  statusClass: string;\n  statusText: string;\n  signatureInfo: ConfirmedSignatureInfo;\n};\n\nexport function HistoryCardHeader({\n  title,\n  refresh,\n  fetching,\n}: {\n  title: string;\n  refresh: Function;\n  fetching: boolean;\n}) {\n  return (\n    <div className=\"card-header align-items-center\">\n      <h3 className=\"card-header-title\">{title}</h3>\n      <button\n        className=\"btn btn-white btn-sm\"\n        disabled={fetching}\n        onClick={() => refresh()}\n      >\n        {fetching ? (\n          <>\n            <span className=\"spinner-grow spinner-grow-sm mr-2\"></span>\n            Loading\n          </>\n        ) : (\n          <>\n            <span className=\"fe fe-refresh-cw mr-2\"></span>\n            Refresh\n          </>\n        )}\n      </button>\n    </div>\n  );\n}\n\nexport function HistoryCardFooter({\n  fetching,\n  foundOldest,\n  loadMore,\n}: {\n  fetching: boolean;\n  foundOldest: boolean;\n  loadMore: Function;\n}) {\n  return (\n    <div className=\"card-footer\">\n      {foundOldest ? (\n        <div className=\"text-muted text-center\">Fetched full history</div>\n      ) : (\n        <button\n          className=\"btn btn-primary w-100\"\n          onClick={() => loadMore()}\n          disabled={fetching}\n        >\n          {fetching ? (\n            <>\n              <span className=\"spinner-grow spinner-grow-sm mr-2\"></span>\n              Loading\n            </>\n          ) : (\n            \"Load More\"\n          )}\n        </button>\n      )}\n    </div>\n  );\n}\n\nexport function getTransactionRows(\n  transactions: ConfirmedSignatureInfo[]\n): TransactionRow[] {\n  const transactionRows: TransactionRow[] = [];\n  for (var i = 0; i < transactions.length; i++) {\n    const slot = transactions[i].slot;\n    const slotTransactions = [transactions[i]];\n    while (i + 1 < transactions.length) {\n      const nextSlot = transactions[i + 1].slot;\n      if (nextSlot !== slot) break;\n      slotTransactions.push(transactions[++i]);\n    }\n\n    for (let slotTransaction of slotTransactions) {\n      let statusText;\n      let statusClass;\n      if (slotTransaction.err) {\n        statusClass = \"warning\";\n        statusText = \"Failed\";\n      } else {\n        statusClass = \"success\";\n        statusText = \"Success\";\n      }\n      transactionRows.push({\n        slot,\n        signature: slotTransaction.signature,\n        err: slotTransaction.err,\n        blockTime: slotTransaction.blockTime,\n        statusClass,\n        statusText,\n        signatureInfo: slotTransaction,\n      });\n    }\n  }\n\n  return transactionRows;\n}\n","import React from \"react\";\nimport { Signature } from \"components/common/Signature\";\nimport { Slot } from \"components/common/Slot\";\nimport Moment from \"react-moment\";\nimport { PublicKey } from \"@velas/web3\";\nimport {\n  useAccountHistory,\n  useFetchAccountHistory,\n} from \"providers/accounts/history\";\nimport {\n  getTransactionRows,\n  HistoryCardFooter,\n  HistoryCardHeader,\n} from \"../HistoryCardComponents\";\nimport { FetchStatus } from \"providers/cache\";\nimport { LoadingCard } from \"components/common/LoadingCard\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\n\nexport function TransactionHistoryCard({ pubkey }: { pubkey: PublicKey }) {\n  const address = pubkey.toBase58();\n  const history = useAccountHistory(address);\n  const fetchAccountHistory = useFetchAccountHistory();\n  const refresh = () => fetchAccountHistory(pubkey, false, true);\n  const loadMore = () => fetchAccountHistory(pubkey, false);\n\n  const transactionRows = React.useMemo(() => {\n    if (history?.data?.fetched) {\n      return getTransactionRows(history.data.fetched);\n    }\n    return [];\n  }, [history]);\n\n  React.useEffect(() => {\n    if (!history) {\n      refresh();\n    }\n  }, [address]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  if (!history) {\n    return null;\n  }\n\n  if (history?.data === undefined) {\n    if (history.status === FetchStatus.Fetching) {\n      return <LoadingCard message=\"Loading history\" />;\n    }\n\n    return (\n      <ErrorCard retry={refresh} text=\"Failed to fetch transaction history\" />\n    );\n  }\n\n  const hasTimestamps = transactionRows.some((element) => element.blockTime);\n  const detailsList: React.ReactNode[] = transactionRows.map(\n    ({ slot, signature, blockTime, statusClass, statusText }) => {\n      return (\n        <tr key={signature}>\n          <td>\n            <Signature signature={signature} link truncate />\n          </td>\n\n          <td className=\"w-1\">\n            <Slot slot={slot} link />\n          </td>\n\n          {hasTimestamps && (\n            <td className=\"text-muted\">\n              {blockTime ? <Moment date={blockTime * 1000} fromNow /> : \"---\"}\n            </td>\n          )}\n\n          <td>\n            <span className={`badge badge-soft-${statusClass}`}>\n              {statusText}\n            </span>\n          </td>\n        </tr>\n      );\n    }\n  );\n\n  const fetching = history.status === FetchStatus.Fetching;\n  return (\n    <div className=\"card\">\n      <HistoryCardHeader\n        fetching={fetching}\n        refresh={() => refresh()}\n        title=\"Transaction History\"\n      />\n      <div className=\"table-responsive mb-0\">\n        <table className=\"table table-sm table-nowrap card-table\">\n          <thead>\n            <tr>\n              <th className=\"text-muted w-1\">Transaction Signature</th>\n              <th className=\"text-muted w-1\">Slot</th>\n              {hasTimestamps && <th className=\"text-muted w-1\">Age</th>}\n              <th className=\"text-muted\">Result</th>\n            </tr>\n          </thead>\n          <tbody className=\"list\">{detailsList}</tbody>\n        </table>\n      </div>\n      <HistoryCardFooter\n        fetching={fetching}\n        foundOldest={history.data.foundOldest}\n        loadMore={() => loadMore()}\n      />\n    </div>\n  );\n}\n","import { ParsedConfirmedTransaction } from \"@velas/web3\";\n\nexport type MintDetails = {\n  decimals: number;\n  mint: string;\n};\n\nexport function extractMintDetails(\n  parsedTransaction: ParsedConfirmedTransaction,\n  mintMap: Map<string, MintDetails>\n) {\n  if (parsedTransaction.meta?.preTokenBalances) {\n    parsedTransaction.meta.preTokenBalances.forEach((balance) => {\n      const account =\n        parsedTransaction.transaction.message.accountKeys[balance.accountIndex];\n      mintMap.set(account.pubkey.toBase58(), {\n        decimals: balance.uiTokenAmount.decimals,\n        mint: balance.mint,\n      });\n    });\n  }\n\n  if (parsedTransaction.meta?.postTokenBalances) {\n    parsedTransaction.meta.postTokenBalances.forEach((balance) => {\n      const account =\n        parsedTransaction.transaction.message.accountKeys[balance.accountIndex];\n      mintMap.set(account.pubkey.toBase58(), {\n        decimals: balance.uiTokenAmount.decimals,\n        mint: balance.mint,\n      });\n    });\n  }\n}\n","import React from \"react\";\nimport {\n  ParsedConfirmedTransaction,\n  ParsedInstruction,\n  PartiallyDecodedInstruction,\n  PublicKey,\n} from \"@velas/web3\";\nimport { useAccountHistory } from \"providers/accounts\";\nimport { useTokenRegistry } from \"providers/mints/token-registry\";\nimport { create } from \"superstruct\";\nimport {\n  TokenInstructionType,\n  Transfer,\n  TransferChecked,\n} from \"components/instruction/token/types\";\nimport { InstructionContainer } from \"utils/instruction\";\nimport { Signature } from \"components/common/Signature\";\nimport { Address } from \"components/common/Address\";\nimport { normalizeTokenAmount } from \"utils\";\nimport {\n  getTransactionRows,\n  HistoryCardFooter,\n  HistoryCardHeader,\n} from \"../HistoryCardComponents\";\nimport { LoadingCard } from \"components/common/LoadingCard\";\nimport { useFetchAccountHistory } from \"providers/accounts/history\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { FetchStatus } from \"providers/cache\";\nimport Moment from \"react-moment\";\nimport { extractMintDetails, MintDetails } from \"./common\";\nimport { Cluster, useCluster } from \"providers/cluster\";\nimport { reportError } from \"utils/sentry\";\n\ntype IndexedTransfer = {\n  index: number;\n  childIndex?: number;\n  transfer: Transfer | TransferChecked;\n};\n\nexport function TokenTransfersCard({ pubkey }: { pubkey: PublicKey }) {\n  const { cluster } = useCluster();\n  const address = pubkey.toBase58();\n  const history = useAccountHistory(address);\n  const fetchAccountHistory = useFetchAccountHistory();\n  const refresh = () => fetchAccountHistory(pubkey, true, true);\n  const loadMore = () => fetchAccountHistory(pubkey, true);\n\n  const { tokenRegistry } = useTokenRegistry();\n\n  const mintDetails = React.useMemo(\n    () => tokenRegistry.get(address),\n    [address, tokenRegistry]\n  );\n\n  const transactionRows = React.useMemo(() => {\n    if (history?.data?.fetched) {\n      return getTransactionRows(history.data.fetched);\n    }\n    return [];\n  }, [history]);\n\n  React.useEffect(() => {\n    if (!history || !history.data?.transactionMap?.size) {\n      refresh();\n    }\n  }, [address]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const { hasTimestamps, detailsList } = React.useMemo(() => {\n    const detailedHistoryMap =\n      history?.data?.transactionMap ||\n      new Map<string, ParsedConfirmedTransaction>();\n    const hasTimestamps = transactionRows.some((element) => element.blockTime);\n    const detailsList: React.ReactNode[] = [];\n    const mintMap = new Map<string, MintDetails>();\n\n    transactionRows.forEach(\n      ({ signature, blockTime, statusText, statusClass }) => {\n        const parsed = detailedHistoryMap.get(signature);\n        if (!parsed) return;\n\n        // Extract mint information from token deltas\n        // (used to filter out non-checked tokens transfers not belonging to this mint)\n        extractMintDetails(parsed, mintMap);\n\n        // Extract all transfers from transaction\n        let transfers: IndexedTransfer[] = [];\n        InstructionContainer.create(parsed).instructions.forEach(\n          ({ instruction, inner }, index) => {\n            const transfer = getTransfer(instruction, cluster, signature);\n            if (transfer) {\n              transfers.push({\n                transfer,\n                index,\n              });\n            }\n            inner.forEach((instruction, childIndex) => {\n              const transfer = getTransfer(instruction, cluster, signature);\n              if (transfer) {\n                transfers.push({\n                  transfer,\n                  index,\n                  childIndex,\n                });\n              }\n            });\n          }\n        );\n\n        // Filter out transfers not belonging to this mint\n        transfers = transfers.filter(({ transfer }) => {\n          const sourceKey = transfer.source.toBase58();\n          const destinationKey = transfer.destination.toBase58();\n\n          if (\"tokenAmount\" in transfer && transfer.mint.equals(pubkey)) {\n            return true;\n          } else if (\n            mintMap.has(sourceKey) &&\n            mintMap.get(sourceKey)?.mint === address\n          ) {\n            return true;\n          } else if (\n            mintMap.has(destinationKey) &&\n            mintMap.get(destinationKey)?.mint === address\n          ) {\n            return true;\n          }\n\n          return false;\n        });\n\n        transfers.forEach(({ transfer, index, childIndex }) => {\n          let units = \"Tokens\";\n          let amountString = \"\";\n\n          if (mintDetails?.symbol) {\n            units = mintDetails.symbol;\n          }\n\n          if (\"tokenAmount\" in transfer) {\n            amountString = transfer.tokenAmount.uiAmountString;\n          } else {\n            let decimals = 0;\n\n            if (mintDetails?.decimals) {\n              decimals = mintDetails.decimals;\n            } else if (mintMap.has(transfer.source.toBase58())) {\n              decimals = mintMap.get(transfer.source.toBase58())?.decimals || 0;\n            } else if (mintMap.has(transfer.destination.toBase58())) {\n              decimals =\n                mintMap.get(transfer.destination.toBase58())?.decimals || 0;\n            }\n\n            amountString = new Intl.NumberFormat(\"en-US\", {\n              minimumFractionDigits: decimals,\n              maximumFractionDigits: decimals,\n            }).format(normalizeTokenAmount(transfer.amount, decimals));\n          }\n\n          detailsList.push(\n            <tr key={signature + index + (childIndex || \"\")}>\n              <td>\n                <Signature signature={signature} link truncateChars={24} />\n              </td>\n\n              {hasTimestamps && (\n                <td className=\"text-muted\">\n                  {blockTime && <Moment date={blockTime * 1000} fromNow />}\n                </td>\n              )}\n\n              <td>\n                <Address pubkey={transfer.source} link truncateChars={16} />\n              </td>\n\n              <td>\n                <Address\n                  pubkey={transfer.destination}\n                  link\n                  truncateChars={16}\n                />\n              </td>\n\n              <td>\n                {amountString} {units}\n              </td>\n\n              <td>\n                <span className={`badge badge-soft-${statusClass}`}>\n                  {statusText}\n                </span>\n              </td>\n            </tr>\n          );\n        });\n      }\n    );\n\n    return {\n      hasTimestamps,\n      detailsList,\n    };\n  }, [history, transactionRows, mintDetails, pubkey, address, cluster]);\n\n  if (!history) {\n    return null;\n  }\n\n  if (history?.data === undefined) {\n    if (history.status === FetchStatus.Fetching) {\n      return <LoadingCard message=\"Loading token transfers\" />;\n    }\n\n    return <ErrorCard retry={refresh} text=\"Failed to fetch token transfers\" />;\n  }\n\n  const fetching = history.status === FetchStatus.Fetching;\n  return (\n    <div className=\"card\">\n      <HistoryCardHeader\n        fetching={fetching}\n        refresh={() => refresh()}\n        title=\"Token Transfers\"\n      />\n      <div className=\"table-responsive mb-0\">\n        <table className=\"table table-sm table-nowrap card-table\">\n          <thead>\n            <tr>\n              <th className=\"text-muted\">Transaction Signature</th>\n              {hasTimestamps && <th className=\"text-muted\">Age</th>}\n              <th className=\"text-muted\">Source</th>\n              <th className=\"text-muted\">Destination</th>\n              <th className=\"text-muted\">Amount</th>\n              <th className=\"text-muted\">Result</th>\n            </tr>\n          </thead>\n          <tbody className=\"list\">{detailsList}</tbody>\n        </table>\n      </div>\n      <HistoryCardFooter\n        fetching={fetching}\n        foundOldest={history.data.foundOldest}\n        loadMore={() => loadMore()}\n      />\n    </div>\n  );\n}\n\nfunction getTransfer(\n  instruction: ParsedInstruction | PartiallyDecodedInstruction,\n  cluster: Cluster,\n  signature: string\n): Transfer | TransferChecked | undefined {\n  if (\"parsed\" in instruction && instruction.program === \"spl-token\") {\n    try {\n      const { type: rawType } = instruction.parsed;\n      const type = create(rawType, TokenInstructionType);\n\n      if (type === \"transferChecked\") {\n        return create(instruction.parsed.info, TransferChecked);\n      } else if (type === \"transfer\") {\n        return create(instruction.parsed.info, Transfer);\n      }\n    } catch (error) {\n      if (cluster === Cluster.MainnetBeta) {\n        reportError(error, {\n          signature,\n        });\n      }\n    }\n  }\n  return undefined;\n}\n","import React from \"react\";\nimport {\n  ParsedConfirmedTransaction,\n  ParsedInstruction,\n  PartiallyDecodedInstruction,\n  PublicKey,\n} from \"@velas/web3\";\nimport { useAccountHistory } from \"providers/accounts\";\nimport { Signature } from \"components/common/Signature\";\nimport {\n  getTokenInstructionName,\n  InstructionContainer,\n} from \"utils/instruction\";\nimport { Address } from \"components/common/Address\";\nimport { LoadingCard } from \"components/common/LoadingCard\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { FetchStatus } from \"providers/cache\";\nimport { useFetchAccountHistory } from \"providers/accounts/history\";\nimport {\n  getTransactionRows,\n  HistoryCardFooter,\n  HistoryCardHeader,\n} from \"../HistoryCardComponents\";\nimport { extractMintDetails, MintDetails } from \"./common\";\nimport Moment from \"react-moment\";\n\nexport function TokenInstructionsCard({ pubkey }: { pubkey: PublicKey }) {\n  const address = pubkey.toBase58();\n  const history = useAccountHistory(address);\n  const fetchAccountHistory = useFetchAccountHistory();\n  const refresh = () => fetchAccountHistory(pubkey, true, true);\n  const loadMore = () => fetchAccountHistory(pubkey, true);\n\n  const transactionRows = React.useMemo(() => {\n    if (history?.data?.fetched) {\n      return getTransactionRows(history.data.fetched);\n    }\n    return [];\n  }, [history]);\n\n  React.useEffect(() => {\n    if (!history || !history.data?.transactionMap?.size) {\n      refresh();\n    }\n  }, [address]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const { hasTimestamps, detailsList } = React.useMemo(() => {\n    const detailedHistoryMap =\n      history?.data?.transactionMap ||\n      new Map<string, ParsedConfirmedTransaction>();\n    const hasTimestamps = transactionRows.some((element) => element.blockTime);\n    const detailsList: React.ReactNode[] = [];\n    const mintMap = new Map<string, MintDetails>();\n\n    transactionRows.forEach(\n      ({ signatureInfo, signature, blockTime, statusClass, statusText }) => {\n        const parsed = detailedHistoryMap.get(signature);\n        if (!parsed) return;\n\n        extractMintDetails(parsed, mintMap);\n\n        let instructions: (ParsedInstruction | PartiallyDecodedInstruction)[] =\n          [];\n\n        InstructionContainer.create(parsed).instructions.forEach(\n          ({ instruction, inner }, index) => {\n            if (isRelevantInstruction(pubkey, address, mintMap, instruction)) {\n              instructions.push(instruction);\n            }\n            instructions.push(\n              ...inner.filter((instruction) =>\n                isRelevantInstruction(pubkey, address, mintMap, instruction)\n              )\n            );\n          }\n        );\n\n        instructions.forEach((ix, index) => {\n          const programId = ix.programId;\n\n          const instructionName = getTokenInstructionName(\n            parsed,\n            ix,\n            signatureInfo\n          );\n\n          if (instructionName) {\n            detailsList.push(\n              <tr key={signature + index}>\n                <td>\n                  <Signature signature={signature} link truncateChars={48} />\n                </td>\n\n                {hasTimestamps && (\n                  <td className=\"text-muted\">\n                    {blockTime && <Moment date={blockTime * 1000} fromNow />}\n                  </td>\n                )}\n\n                <td>{instructionName}</td>\n\n                <td>\n                  <Address\n                    pubkey={programId}\n                    link\n                    truncate\n                    truncateChars={16}\n                  />\n                </td>\n\n                <td>\n                  <span className={`badge badge-soft-${statusClass}`}>\n                    {statusText}\n                  </span>\n                </td>\n              </tr>\n            );\n          }\n        });\n      }\n    );\n\n    return {\n      hasTimestamps,\n      detailsList,\n    };\n  }, [history, transactionRows, address, pubkey]);\n\n  if (!history) {\n    return null;\n  }\n\n  if (history?.data === undefined) {\n    if (history.status === FetchStatus.Fetching) {\n      return <LoadingCard message=\"Loading token instructions\" />;\n    }\n\n    return (\n      <ErrorCard retry={refresh} text=\"Failed to fetch token instructions\" />\n    );\n  }\n\n  const fetching = history.status === FetchStatus.Fetching;\n  return (\n    <div className=\"card\">\n      <HistoryCardHeader\n        fetching={fetching}\n        refresh={() => refresh()}\n        title=\"Token Instructions\"\n      />\n      <div className=\"table-responsive mb-0\">\n        <table className=\"table table-sm table-nowrap card-table\">\n          <thead>\n            <tr>\n              <th className=\"text-muted w-1\">Transaction Signature</th>\n              {hasTimestamps && <th className=\"text-muted\">Age</th>}\n              <th className=\"text-muted\">Instruction</th>\n              <th className=\"text-muted\">Program</th>\n              <th className=\"text-muted\">Result</th>\n            </tr>\n          </thead>\n          <tbody className=\"list\">{detailsList}</tbody>\n        </table>\n      </div>\n      <HistoryCardFooter\n        fetching={fetching}\n        foundOldest={history.data.foundOldest}\n        loadMore={() => loadMore()}\n      />\n    </div>\n  );\n}\n\nfunction isRelevantInstruction(\n  pubkey: PublicKey,\n  address: string,\n  mintMap: Map<string, MintDetails>,\n  instruction: ParsedInstruction | PartiallyDecodedInstruction\n) {\n  if (\"accounts\" in instruction) {\n    return instruction.accounts.some(\n      (account) =>\n        account.equals(pubkey) ||\n        mintMap.get(account.toBase58())?.mint === address\n    );\n  } else if (\n    typeof instruction.parsed === \"object\" &&\n    \"info\" in instruction.parsed\n  ) {\n    return Object.entries(instruction.parsed.info).some(\n      ([key, value]) =>\n        value === address ||\n        (typeof value === \"string\" && mintMap.get(value)?.mint === address)\n    );\n  }\n  return false;\n}\n","import React from \"react\";\nimport { PublicKey } from \"@velas/web3\";\nimport { useFetchRewards, useRewards } from \"providers/accounts/rewards\";\nimport { LoadingCard } from \"components/common/LoadingCard\";\nimport { FetchStatus } from \"providers/cache\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { Slot } from \"components/common/Slot\";\nimport { lamportsToSolString } from \"utils\";\nimport { useAccountInfo } from \"providers/accounts\";\nimport BN from \"bn.js\";\n\nconst MAX_EPOCH = new BN(2).pow(new BN(64)).sub(new BN(1));\n\nexport function RewardsCard({ pubkey }: { pubkey: PublicKey }) {\n  const address = React.useMemo(() => pubkey.toBase58(), [pubkey]);\n  const info = useAccountInfo(address);\n  const account = info?.data;\n  const data = account?.details?.data?.parsed.info;\n\n  const highestEpoch = React.useMemo(() => {\n    if (data.stake && !data.stake.delegation.deactivationEpoch.eq(MAX_EPOCH)) {\n      return data.stake.delegation.deactivationEpoch.toNumber();\n    }\n  }, [data]);\n\n  const rewards = useRewards(address);\n  const fetchRewards = useFetchRewards();\n  const loadMore = () => fetchRewards(pubkey, highestEpoch);\n\n  React.useEffect(() => {\n    if (!rewards) {\n      fetchRewards(pubkey, highestEpoch);\n    }\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  if (!rewards) {\n    return null;\n  }\n\n  if (rewards?.data === undefined) {\n    if (rewards.status === FetchStatus.Fetching) {\n      return <LoadingCard message=\"Loading rewards\" />;\n    }\n\n    return <ErrorCard retry={loadMore} text=\"Failed to fetch rewards\" />;\n  }\n\n  const rewardsList = rewards.data.rewards.map((reward) => {\n    if (!reward) {\n      return null;\n    }\n\n    return (\n      <tr key={reward.epoch}>\n        <td>{reward.epoch}</td>\n        <td>\n          <Slot slot={reward.effectiveSlot} link />\n        </td>\n        <td>{lamportsToSolString(reward.amount)}</td>\n        <td>{lamportsToSolString(reward.postBalance)}</td>\n      </tr>\n    );\n  });\n  const rewardsFound = rewardsList.some((r) => r);\n  const { foundOldest, lowestFetchedEpoch, highestFetchedEpoch } = rewards.data;\n  const fetching = rewards.status === FetchStatus.Fetching;\n\n  return (\n    <>\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <div className=\"row align-items-center\">\n            <div className=\"col\">\n              <h3 className=\"card-header-title\">Rewards</h3>\n            </div>\n          </div>\n        </div>\n\n        {rewardsFound ? (\n          <div className=\"table-responsive mb-0\">\n            <table className=\"table table-sm table-nowrap card-table\">\n              <thead>\n                <tr>\n                  <th className=\"w-1 text-muted\">Epoch</th>\n                  <th className=\"text-muted\">Effective Slot</th>\n                  <th className=\"text-muted\">Reward Amount</th>\n                  <th className=\"text-muted\">Post Balance</th>\n                </tr>\n              </thead>\n              <tbody className=\"list\">{rewardsList}</tbody>\n            </table>\n          </div>\n        ) : (\n          <div className=\"card-body\">\n            No rewards issued between epochs {lowestFetchedEpoch} and{\" \"}\n            {highestFetchedEpoch}\n          </div>\n        )}\n\n        <div className=\"card-footer\">\n          {foundOldest ? (\n            <div className=\"text-muted text-center\">\n              Fetched full reward history\n            </div>\n          ) : (\n            <button\n              className=\"btn btn-primary w-100\"\n              onClick={() => loadMore()}\n              disabled={fetching}\n            >\n              {fetching ? (\n                <>\n                  <span className=\"spinner-grow spinner-grow-sm mr-2\"></span>\n                  Loading\n                </>\n              ) : (\n                \"Load More\"\n              )}\n            </button>\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport { PublicKey } from \"@velas/web3\";\nimport { CacheEntry, FetchStatus } from \"providers/cache\";\nimport {\n  useFetchAccountInfo,\n  useAccountInfo,\n  Account,\n  ProgramData,\n} from \"providers/accounts\";\nimport { StakeAccountSection } from \"components/account/StakeAccountSection\";\nimport { TokenAccountSection } from \"components/account/TokenAccountSection\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { LoadingCard } from \"components/common/LoadingCard\";\nimport { useCluster, ClusterStatus } from \"providers/cluster\";\nimport { NavLink, Redirect, useLocation } from \"react-router-dom\";\nimport { clusterPath } from \"utils/url\";\nimport { UnknownAccountCard } from \"components/account/UnknownAccountCard\";\nimport { OwnedTokensCard } from \"components/account/OwnedTokensCard\";\nimport { TokenHistoryCard } from \"components/account/TokenHistoryCard\";\nimport { TokenLargestAccountsCard } from \"components/account/TokenLargestAccountsCard\";\nimport { VoteAccountSection } from \"components/account/VoteAccountSection\";\nimport { NonceAccountSection } from \"components/account/NonceAccountSection\";\nimport { VotesCard } from \"components/account/VotesCard\";\nimport { SysvarAccountSection } from \"components/account/SysvarAccountSection\";\nimport { SlotHashesCard } from \"components/account/SlotHashesCard\";\nimport { StakeHistoryCard } from \"components/account/StakeHistoryCard\";\nimport { BlockhashesCard } from \"components/account/BlockhashesCard\";\nimport { ConfigAccountSection } from \"components/account/ConfigAccountSection\";\nimport { useFlaggedAccounts } from \"providers/accounts/flagged-accounts\";\nimport { UpgradeableLoaderAccountSection } from \"components/account/UpgradeableLoaderAccountSection\";\nimport { useTokenRegistry } from \"providers/mints/token-registry\";\nimport { Identicon } from \"components/common/Identicon\";\nimport { TransactionHistoryCard } from \"components/account/history/TransactionHistoryCard\";\nimport { TokenTransfersCard } from \"components/account/history/TokenTransfersCard\";\nimport { TokenInstructionsCard } from \"components/account/history/TokenInstructionsCard\";\nimport { RewardsCard } from \"components/account/RewardsCard\";\n\nconst IDENTICON_WIDTH = 64;\n\nconst TABS_LOOKUP: { [id: string]: Tab[] } = {\n  \"spl-token:mint\": [\n    {\n      slug: \"transfers\",\n      title: \"Transfers\",\n      path: \"/transfers\",\n    },\n    {\n      slug: \"instructions\",\n      title: \"Instructions\",\n      path: \"/instructions\",\n    },\n    {\n      slug: \"largest\",\n      title: \"Distribution\",\n      path: \"/largest\",\n    },\n  ],\n  stake: [\n    {\n      slug: \"rewards\",\n      title: \"Rewards\",\n      path: \"/rewards\",\n    },\n  ],\n  vote: [\n    {\n      slug: \"vote-history\",\n      title: \"Vote History\",\n      path: \"/vote-history\",\n    },\n    {\n      slug: \"rewards\",\n      title: \"Rewards\",\n      path: \"/rewards\",\n    },\n  ],\n  \"sysvar:recentBlockhashes\": [\n    {\n      slug: \"blockhashes\",\n      title: \"Blockhashes\",\n      path: \"/blockhashes\",\n    },\n  ],\n  \"sysvar:slotHashes\": [\n    {\n      slug: \"slot-hashes\",\n      title: \"Slot Hashes\",\n      path: \"/slot-hashes\",\n    },\n  ],\n  \"sysvar:stakeHistory\": [\n    {\n      slug: \"stake-history\",\n      title: \"Stake History\",\n      path: \"/stake-history\",\n    },\n  ],\n};\n\nconst TOKEN_TABS_HIDDEN = [\n  \"spl-token:mint\",\n  \"config\",\n  \"vote\",\n  \"sysvar\",\n  \"config\",\n];\n\ntype Props = { address: string; tab?: string };\nexport function AccountDetailsPage({ address, tab }: Props) {\n  const fetchAccount = useFetchAccountInfo();\n  const { status } = useCluster();\n  const info = useAccountInfo(address);\n  let pubkey: PublicKey | undefined;\n\n  try {\n    pubkey = new PublicKey(address);\n  } catch (err) {}\n\n  // Fetch account on load\n  React.useEffect(() => {\n    if (!info && status === ClusterStatus.Connected && pubkey) {\n      fetchAccount(pubkey);\n    }\n  }, [address, status]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <div className=\"container mt-n3\">\n      <div className=\"header\">\n        <div className=\"header-body\">\n          <AccountHeader address={address} info={info} />\n        </div>\n      </div>\n      {!pubkey ? (\n        <ErrorCard text={`Address \"${address}\" is not valid`} />\n      ) : (\n        <DetailsSections pubkey={pubkey} tab={tab} info={info} />\n      )}\n    </div>\n  );\n}\n\nexport function AccountHeader({\n  address,\n  info,\n}: {\n  address: string;\n  info?: CacheEntry<Account>;\n}) {\n  const { tokenRegistry } = useTokenRegistry();\n  const tokenDetails = tokenRegistry.get(address);\n  const account = info?.data;\n  const data = account?.details?.data;\n  const isToken = data?.program === \"spl-token\" && data?.parsed.type === \"mint\";\n\n  if (tokenDetails || isToken) {\n    return (\n      <div className=\"row align-items-end\">\n        <div className=\"col-auto\">\n          <div className=\"avatar avatar-lg header-avatar-top\">\n            {tokenDetails?.logoURI ? (\n              <img\n                src={tokenDetails.logoURI}\n                alt=\"token logo\"\n                className=\"avatar-img rounded-circle border border-4 border-body\"\n              />\n            ) : (\n              <Identicon\n                address={address}\n                className=\"avatar-img rounded-circle border border-body identicon-wrapper\"\n                style={{ width: IDENTICON_WIDTH }}\n              />\n            )}\n          </div>\n        </div>\n\n        <div className=\"col mb-3 ml-n3 ml-md-n2\">\n          <h6 className=\"header-pretitle\">Token</h6>\n          <h2 className=\"header-title\">\n            {tokenDetails?.name || \"Unknown Token\"}\n          </h2>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <h6 className=\"header-pretitle\">Details</h6>\n      <h2 className=\"header-title\">Account</h2>\n    </>\n  );\n}\n\nfunction DetailsSections({\n  pubkey,\n  tab,\n  info,\n}: {\n  pubkey: PublicKey;\n  tab?: string;\n  info?: CacheEntry<Account>;\n}) {\n  const fetchAccount = useFetchAccountInfo();\n  const address = pubkey.toBase58();\n  const location = useLocation();\n  const { flaggedAccounts } = useFlaggedAccounts();\n\n  if (!info || info.status === FetchStatus.Fetching) {\n    return <LoadingCard />;\n  } else if (\n    info.status === FetchStatus.FetchFailed ||\n    info.data?.lamports === undefined\n  ) {\n    return <ErrorCard retry={() => fetchAccount(pubkey)} text=\"Fetch Failed\" />;\n  }\n\n  const account = info.data;\n  const data = account?.details?.data;\n  const tabs = getTabs(data);\n\n  let moreTab: MoreTabs = \"history\";\n  if (tab && tabs.filter(({ slug }) => slug === tab).length === 0) {\n    return <Redirect to={{ ...location, pathname: `/address/${address}` }} />;\n  } else if (tab) {\n    moreTab = tab as MoreTabs;\n  }\n\n  return (\n    <>\n      {flaggedAccounts.has(address) && (\n        <div className=\"alert alert-danger alert-scam\" role=\"alert\">\n          Warning! This account has been flagged by the community as a scam\n          account. Please be cautious sending assets to this account.\n        </div>\n      )}\n      {<InfoSection account={account} />}\n      {<MoreSection account={account} tab={moreTab} tabs={tabs} />}\n    </>\n  );\n}\n\nfunction InfoSection({ account }: { account: Account }) {\n  const data = account?.details?.data;\n\n  if (data && data.program === \"bpf-upgradeable-loader\") {\n    return (\n      <UpgradeableLoaderAccountSection\n        account={account}\n        parsedData={data.parsed}\n        programData={data.programData}\n      />\n    );\n  } else if (data && data.program === \"stake\") {\n    return (\n      <StakeAccountSection\n        account={account}\n        stakeAccount={data.parsed.info}\n        activation={data.activation}\n        stakeAccountType={data.parsed.type}\n      />\n    );\n  } else if (data && data.program === \"spl-token\") {\n    return <TokenAccountSection account={account} tokenAccount={data.parsed} />;\n  } else if (data && data.program === \"nonce\") {\n    return <NonceAccountSection account={account} nonceAccount={data.parsed} />;\n  } else if (data && data.program === \"vote\") {\n    return <VoteAccountSection account={account} voteAccount={data.parsed} />;\n  } else if (data && data.program === \"sysvar\") {\n    return (\n      <SysvarAccountSection account={account} sysvarAccount={data.parsed} />\n    );\n  } else if (data && data.program === \"config\") {\n    return (\n      <ConfigAccountSection account={account} configAccount={data.parsed} />\n    );\n  } else {\n    return <UnknownAccountCard account={account} />;\n  }\n}\n\ntype Tab = {\n  slug: MoreTabs;\n  title: string;\n  path: string;\n};\n\nexport type MoreTabs =\n  | \"history\"\n  | \"tokens\"\n  | \"largest\"\n  | \"vote-history\"\n  | \"slot-hashes\"\n  | \"stake-history\"\n  | \"blockhashes\"\n  | \"transfers\"\n  | \"instructions\"\n  | \"rewards\";\n\nfunction MoreSection({\n  account,\n  tab,\n  tabs,\n}: {\n  account: Account;\n  tab: MoreTabs;\n  tabs: Tab[];\n}) {\n  const pubkey = account.pubkey;\n  const address = account.pubkey.toBase58();\n  const data = account?.details?.data;\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"header\">\n          <div className=\"header-body pt-0\">\n            <ul className=\"nav nav-tabs nav-overflow header-tabs\">\n              {tabs.map(({ title, slug, path }) => (\n                <li key={slug} className=\"nav-item\">\n                  <NavLink\n                    className=\"nav-link\"\n                    to={clusterPath(`/address/${address}${path}`)}\n                    exact\n                  >\n                    {title}\n                  </NavLink>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      </div>\n      {tab === \"tokens\" && (\n        <>\n          <OwnedTokensCard pubkey={pubkey} />\n          <TokenHistoryCard pubkey={pubkey} />\n        </>\n      )}\n      {tab === \"history\" && <TransactionHistoryCard pubkey={pubkey} />}\n      {tab === \"transfers\" && <TokenTransfersCard pubkey={pubkey} />}\n      {tab === \"instructions\" && <TokenInstructionsCard pubkey={pubkey} />}\n      {tab === \"largest\" && <TokenLargestAccountsCard pubkey={pubkey} />}\n      {tab === \"rewards\" && <RewardsCard pubkey={pubkey} />}\n      {tab === \"vote-history\" && data?.program === \"vote\" && (\n        <VotesCard voteAccount={data.parsed} />\n      )}\n      {tab === \"slot-hashes\" &&\n        data?.program === \"sysvar\" &&\n        data.parsed.type === \"slotHashes\" && (\n          <SlotHashesCard sysvarAccount={data.parsed} />\n        )}\n      {tab === \"stake-history\" &&\n        data?.program === \"sysvar\" &&\n        data.parsed.type === \"stakeHistory\" && (\n          <StakeHistoryCard sysvarAccount={data.parsed} />\n        )}\n      {tab === \"blockhashes\" &&\n        data?.program === \"sysvar\" &&\n        data.parsed.type === \"recentBlockhashes\" && (\n          <BlockhashesCard blockhashes={data.parsed.info} />\n        )}\n    </>\n  );\n}\n\nfunction getTabs(data?: ProgramData): Tab[] {\n  const tabs: Tab[] = [\n    {\n      slug: \"history\",\n      title: \"History\",\n      path: \"\",\n    },\n  ];\n\n  let programTypeKey = \"\";\n  if (data && \"parsed\" in data && \"type\" in data.parsed) {\n    programTypeKey = `${data.program}:${data.parsed.type}`;\n  }\n\n  if (data && data.program in TABS_LOOKUP) {\n    tabs.push(...TABS_LOOKUP[data.program]);\n  }\n\n  if (data && programTypeKey in TABS_LOOKUP) {\n    tabs.push(...TABS_LOOKUP[programTypeKey]);\n  }\n\n  if (\n    !data ||\n    !(\n      TOKEN_TABS_HIDDEN.includes(data.program) ||\n      TOKEN_TABS_HIDDEN.includes(programTypeKey)\n    )\n  ) {\n    tabs.push({\n      slug: \"tokens\",\n      title: \"Tokens\",\n      path: \"/tokens\",\n    });\n  }\n\n  return tabs;\n}\n","import React from \"react\";\nimport bs58 from \"bs58\";\nimport * as nacl from \"tweetnacl\";\nimport { Message, PublicKey } from \"@velas/web3\";\nimport { Signature } from \"components/common/Signature\";\nimport { Address } from \"components/common/Address\";\n\nexport function TransactionSignatures({\n  signatures,\n  message,\n  rawMessage,\n}: {\n  signatures: (string | null)[];\n  message: Message;\n  rawMessage: Uint8Array;\n}) {\n  const signatureRows = React.useMemo(() => {\n    return signatures.map((signature, index) => {\n      const publicKey = message.accountKeys[index];\n\n      let verified;\n      if (signature) {\n        const key = publicKey.toBytes();\n        const rawSignature = bs58.decode(signature);\n        verified = verifySignature({\n          message: rawMessage,\n          signature: rawSignature,\n          key,\n        });\n      }\n\n      const props = {\n        index,\n        signature,\n        signer: publicKey,\n        verified,\n      };\n\n      return <SignatureRow key={publicKey.toBase58()} {...props} />;\n    });\n  }, [signatures, message, rawMessage]);\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title\">Signatures</h3>\n      </div>\n      <div className=\"table-responsive mb-0\">\n        <table className=\"table table-sm table-nowrap card-table\">\n          <thead>\n            <tr>\n              <th className=\"text-muted\">#</th>\n              <th className=\"text-muted\">Signature</th>\n              <th className=\"text-muted\">Signer</th>\n              <th className=\"text-muted\">Validity</th>\n              <th className=\"text-muted\">Details</th>\n            </tr>\n          </thead>\n          <tbody className=\"list\">{signatureRows}</tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nfunction verifySignature({\n  message,\n  signature,\n  key,\n}: {\n  message: Uint8Array;\n  signature: Uint8Array;\n  key: Uint8Array;\n}): boolean {\n  return nacl.sign.detached.verify(message, signature, key);\n}\n\nfunction SignatureRow({\n  signature,\n  signer,\n  verified,\n  index,\n}: {\n  signature: string | null;\n  signer: PublicKey;\n  verified?: boolean;\n  index: number;\n}) {\n  return (\n    <tr>\n      <td>\n        <span className=\"badge badge-soft-info mr-1\">{index + 1}</span>\n      </td>\n      <td>\n        {signature ? (\n          <Signature signature={signature} truncateChars={40} />\n        ) : (\n          \"Missing Signature\"\n        )}\n      </td>\n      <td>\n        <Address pubkey={signer} link />\n      </td>\n      <td>\n        {verified === undefined ? (\n          \"N/A\"\n        ) : verified ? (\n          <span className=\"badge badge-soft-success mr-1\">Valid</span>\n        ) : (\n          <span className=\"badge badge-soft-warning mr-1\">Invalid</span>\n        )}\n      </td>\n      <td>\n        {index === 0 && (\n          <span className=\"badge badge-soft-info mr-1\">Fee Payer</span>\n        )}\n      </td>\n    </tr>\n  );\n}\n","import React from \"react\";\nimport { PublicKey, SystemProgram } from \"@velas/web3\";\nimport { Address } from \"components/common/Address\";\nimport {\n  Account,\n  useAccountInfo,\n  useFetchAccountInfo,\n} from \"providers/accounts\";\nimport { ClusterStatus, useCluster } from \"providers/cluster\";\nimport { addressLabel } from \"utils/tx\";\nimport { lamportsToSolString } from \"utils\";\n\ntype AccountValidator = (account: Account) => string | undefined;\n\nexport const createFeePayerValidator = (\n  feeLamports: number\n): AccountValidator => {\n  return (account: Account): string | undefined => {\n    if (account.details === undefined) return \"Account doesn't exist\";\n    if (!account.details.owner.equals(SystemProgram.programId))\n      return \"Only system-owned accounts can pay fees\";\n    // TODO: Actually nonce accounts can pay fees too\n    if (account.details.space > 0)\n      return \"Only unallocated accounts can pay fees\";\n    if (account.lamports < feeLamports) {\n      return \"Insufficient funds for fees\";\n    }\n    return;\n  };\n};\n\nexport const programValidator = (account: Account): string | undefined => {\n  if (account.details === undefined) return \"Account doesn't exist\";\n  if (!account.details.executable)\n    return \"Only executable accounts can be invoked\";\n  return;\n};\n\nexport function AddressWithContext({\n  pubkey,\n  validator,\n}: {\n  pubkey: PublicKey;\n  validator?: AccountValidator;\n}) {\n  return (\n    <div className=\"d-flex align-items-end flex-column\">\n      <Address pubkey={pubkey} link />\n      <AccountInfo pubkey={pubkey} validator={validator} />\n    </div>\n  );\n}\n\nfunction AccountInfo({\n  pubkey,\n  validator,\n}: {\n  pubkey: PublicKey;\n  validator?: AccountValidator;\n}) {\n  const address = pubkey.toBase58();\n  const fetchAccount = useFetchAccountInfo();\n  const info = useAccountInfo(address);\n  const { cluster, status } = useCluster();\n\n  // Fetch account on load\n  React.useEffect(() => {\n    if (!info && status === ClusterStatus.Connected && pubkey) {\n      fetchAccount(pubkey);\n    }\n  }, [address, status]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  if (!info?.data)\n    return (\n      <span className=\"text-muted\">\n        <span className=\"spinner-grow spinner-grow-sm mr-2\"></span>\n        Loading\n      </span>\n    );\n\n  const errorMessage = validator && validator(info.data);\n  if (errorMessage) return <span className=\"text-warning\">{errorMessage}</span>;\n\n  if (info.data.details?.executable) {\n    return <span className=\"text-muted\">Executable Program</span>;\n  }\n\n  const owner = info.data.details?.owner;\n  const ownerAddress = owner?.toBase58();\n  const ownerLabel = ownerAddress && addressLabel(ownerAddress, cluster);\n\n  return (\n    <span className=\"text-muted\">\n      {ownerAddress\n        ? `Owned by ${\n            ownerLabel || ownerAddress\n          }. Balance is ${lamportsToSolString(info.data.lamports)} XZO`\n        : \"Account doesn't exist\"}\n    </span>\n  );\n}\n","import React from \"react\";\nimport { Message, PublicKey } from \"@velas/web3\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport { AddressWithContext } from \"./AddressWithContext\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\n\nexport function AccountsCard({ message }: { message: Message }) {\n  const [expanded, setExpanded] = React.useState(true);\n\n  const { validMessage, error } = React.useMemo(() => {\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts,\n    } = message.header;\n\n    if (numReadonlySignedAccounts >= numRequiredSignatures) {\n      return { validMessage: undefined, error: \"Invalid header\" };\n    } else if (numReadonlyUnsignedAccounts >= message.accountKeys.length) {\n      return { validMessage: undefined, error: \"Invalid header\" };\n    } else if (message.accountKeys.length === 0) {\n      return { validMessage: undefined, error: \"Message has no accounts\" };\n    }\n\n    return {\n      validMessage: message,\n      error: undefined,\n    };\n  }, [message]);\n\n  const accountRows = React.useMemo(() => {\n    const message = validMessage;\n    if (!message) return;\n    return message.accountKeys.map((publicKey, accountIndex) => {\n      const {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      } = message.header;\n\n      let readOnly = false;\n      let signer = false;\n      if (accountIndex < numRequiredSignatures) {\n        signer = true;\n        if (accountIndex >= numRequiredSignatures - numReadonlySignedAccounts) {\n          readOnly = true;\n        }\n      } else if (\n        accountIndex >=\n        message.accountKeys.length - numReadonlyUnsignedAccounts\n      ) {\n        readOnly = true;\n      }\n\n      const props = {\n        accountIndex,\n        publicKey,\n        signer,\n        readOnly,\n      };\n\n      return <AccountRow key={accountIndex} {...props} />;\n    });\n  }, [validMessage]);\n\n  if (error) {\n    return <ErrorCard text={`Unable to display accounts. ${error}`} />;\n  }\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title\">\n          {`Account List (${message.accountKeys.length})`}\n        </h3>\n        <button\n          className={`btn btn-sm d-flex ${\n            expanded ? \"btn-black active\" : \"btn-white\"\n          }`}\n          onClick={() => setExpanded((e) => !e)}\n        >\n          {expanded ? \"Collapse\" : \"Expand\"}\n        </button>\n      </div>\n      {expanded && <TableCardBody>{accountRows}</TableCardBody>}\n    </div>\n  );\n}\n\nfunction AccountRow({\n  accountIndex,\n  publicKey,\n  signer,\n  readOnly,\n}: {\n  accountIndex: number;\n  publicKey: PublicKey;\n  signer: boolean;\n  readOnly: boolean;\n}) {\n  return (\n    <tr>\n      <td>\n        <div className=\"d-flex align-items-start flex-column\">\n          Account #{accountIndex + 1}\n          <span className=\"mt-1\">\n            {signer && (\n              <span className=\"badge badge-soft-info mr-1\">Signer</span>\n            )}\n            {!readOnly && (\n              <span className=\"badge badge-soft-danger\">Writable</span>\n            )}\n          </span>\n        </div>\n      </td>\n      <td className=\"text-lg-right\">\n        <AddressWithContext pubkey={publicKey} />\n      </td>\n    </tr>\n  );\n}\n","import React from \"react\";\nimport { Message } from \"@velas/web3\";\nimport type { TransactionData } from \"./InspectorPage\";\nimport { useQuery } from \"utils/url\";\nimport { useHistory, useLocation } from \"react-router\";\nimport base58 from \"bs58\";\n\nfunction deserializeTransaction(bytes: Uint8Array): {\n  message: Message;\n  signatures: string[];\n} | null {\n  const SIGNATURE_LENGTH = 64;\n  const signatures = [];\n  try {\n    const signaturesLen = bytes[0];\n    bytes = bytes.slice(1);\n    for (let i = 0; i < signaturesLen; i++) {\n      const rawSignature = bytes.slice(0, SIGNATURE_LENGTH);\n      bytes = bytes.slice(SIGNATURE_LENGTH);\n      signatures.push(base58.encode(rawSignature));\n    }\n\n    const requiredSignatures = bytes[0];\n    if (requiredSignatures !== signaturesLen) {\n      throw new Error(\"Signature length mismatch\");\n    }\n  } catch (err) {\n    // Errors above indicate that the bytes do not encode a transaction.\n    return null;\n  }\n\n  const message = Message.from(bytes);\n  return { message, signatures };\n}\n\nexport const MIN_MESSAGE_LENGTH =\n  3 + // header\n  1 + // accounts length\n  32 + // accounts, must have at least one address for fees\n  32 + // recent blockhash\n  1; // instructions length\n\nconst MIN_TRANSACTION_LENGTH =\n  1 + // signatures length\n  64 + // signatures, must have at least one for fees\n  MIN_MESSAGE_LENGTH;\n\nconst MAX_TRANSACTION_SIGNATURES =\n  Math.floor((1232 - MIN_TRANSACTION_LENGTH) / (64 + 32)) + 1;\n\nexport function RawInput({\n  value,\n  setTransactionData,\n}: {\n  value?: string;\n  setTransactionData: (param: TransactionData | undefined) => void;\n}) {\n  const rawTransactionInput = React.useRef<HTMLTextAreaElement>(null);\n  const [error, setError] = React.useState<string>();\n  const [rows, setRows] = React.useState(3);\n  const query = useQuery();\n  const history = useHistory();\n  const location = useLocation();\n\n  const onInput = React.useCallback(() => {\n    const base64 = rawTransactionInput.current?.value;\n    if (base64) {\n      // Clear url params when input is detected\n      if (query.get(\"message\")) {\n        query.delete(\"message\");\n        history.push({ ...location, search: query.toString() });\n      } else if (query.get(\"transaction\")) {\n        query.delete(\"transaction\");\n        history.push({ ...location, search: query.toString() });\n      }\n\n      // Dynamically expand height based on input length\n      setRows(Math.max(3, Math.min(10, Math.round(base64.length / 150))));\n\n      let buffer;\n      try {\n        buffer = Uint8Array.from(atob(base64), (c) => c.charCodeAt(0));\n      } catch (err) {\n        console.error(err);\n        setError(\"Input must be base64 encoded\");\n        return;\n      }\n\n      try {\n        if (buffer.length < MIN_MESSAGE_LENGTH) {\n          throw new Error(\"Input is not long enough to be valid.\");\n        } else if (buffer[0] > MAX_TRANSACTION_SIGNATURES) {\n          throw new Error(`Input starts with invalid byte: \"${buffer[0]}\"`);\n        }\n\n        const tx = deserializeTransaction(buffer);\n        if (tx) {\n          const message = tx.message;\n          const rawMessage = message.serialize();\n          setTransactionData({\n            rawMessage,\n            message,\n            signatures: tx.signatures,\n          });\n        } else {\n          const message = Message.from(buffer);\n          setTransactionData({\n            rawMessage: buffer,\n            message,\n          });\n        }\n\n        setError(undefined);\n        return;\n      } catch (err) {\n        if (err instanceof Error) setError(err.message);\n      }\n    } else {\n      setError(undefined);\n    }\n  }, [setTransactionData, history, query, location]);\n\n  React.useEffect(() => {\n    const input = rawTransactionInput.current;\n    if (input && value) {\n      input.value = value;\n      onInput();\n    }\n  }, [value]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const placeholder = \"Paste raw base64 encoded transaction message\";\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h3 className=\"card-header-title\">Encoded Transaction Message</h3>\n      </div>\n      <div className=\"card-body\">\n        <textarea\n          rows={rows}\n          onInput={onInput}\n          ref={rawTransactionInput}\n          className=\"form-control form-control-flush form-control-auto text-monospace\"\n          placeholder={placeholder}\n        ></textarea>\n        <div className=\"row align-items-center\">\n          <div className=\"col d-flex align-items-center\">\n            {error && (\n              <>\n                <span className=\"text-warning small mr-2\">\n                  <i className=\"fe fe-alert-circle\"></i>\n                </span>\n\n                <span className=\"text-warning\">{error}</span>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n      <div className=\"card-footer\">\n        <h3>Instructions</h3>\n        <ul>\n          <li className=\"mb-2\">\n            <strong>CLI: </strong>Use <code>--dump-transaction-message</code>{\" \"}\n            flag\n          </li>\n          <li className=\"mb-2\">\n            <strong>Rust: </strong>Add <code>base64</code> crate dependency and{\" \"}\n            <code>\n              println!(\"{}\", base64::encode(&transaction.message_data()));\n            </code>\n          </li>\n          <li>\n            <strong>JavaScript: </strong>Add{\" \"}\n            <code>console.log(tx.serializeMessage().toString(\"base64\"));</code>\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport bs58 from \"bs58\";\nimport { CompiledInstruction, Message } from \"@velas/web3\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport { AddressWithContext, programValidator } from \"./AddressWithContext\";\nimport { useCluster } from \"providers/cluster\";\nimport { programLabel } from \"utils/tx\";\n\nexport function InstructionsSection({ message }: { message: Message }) {\n  return (\n    <>\n      {message.instructions.map((ix, index) => {\n        return <InstructionCard key={index} {...{ message, ix, index }} />;\n      })}\n    </>\n  );\n}\n\nfunction InstructionCard({\n  message,\n  ix,\n  index,\n}: {\n  message: Message;\n  ix: CompiledInstruction;\n  index: number;\n}) {\n  const [expanded, setExpanded] = React.useState(false);\n  const { cluster } = useCluster();\n  const programId = message.accountKeys[ix.programIdIndex];\n  const programName = programLabel(programId.toBase58(), cluster) || \"Unknown\";\n\n  let data: string = \"No data\";\n  if (ix.data) {\n    data = \"\";\n\n    const chunks = [];\n    const hexString = bs58.decode(ix.data).toString(\"hex\");\n    for (let i = 0; i < hexString.length; i += 2) {\n      chunks.push(hexString.slice(i, i + 2));\n    }\n\n    data = chunks.join(\" \");\n  }\n\n  return (\n    <div className=\"card\" id={`instruction-index-${index + 1}`} key={index}>\n      <div className={`card-header${!expanded ? \" border-bottom-none\" : \"\"}`}>\n        <h3 className=\"card-header-title mb-0 d-flex align-items-center\">\n          <span className={`badge badge-soft-info mr-2`}>#{index + 1}</span>\n          {programName} Instruction\n        </h3>\n\n        <button\n          className={`btn btn-sm d-flex ${\n            expanded ? \"btn-black active\" : \"btn-white\"\n          }`}\n          onClick={() => setExpanded((e) => !e)}\n        >\n          {expanded ? \"Collapse\" : \"Expand\"}\n        </button>\n      </div>\n      {expanded && (\n        <TableCardBody>\n          <tr>\n            <td>Program</td>\n            <td className=\"text-lg-right\">\n              <AddressWithContext\n                pubkey={message.accountKeys[ix.programIdIndex]}\n                validator={programValidator}\n              />\n            </td>\n          </tr>\n          {ix.accounts.map((accountIndex, index) => {\n            return (\n              <tr key={index}>\n                <td>\n                  <div className=\"d-flex align-items-start flex-column\">\n                    Account #{index + 1}\n                    <span className=\"mt-1\">\n                      {accountIndex < message.header.numRequiredSignatures && (\n                        <span className=\"badge badge-soft-info mr-2\">\n                          Signer\n                        </span>\n                      )}\n                      {message.isAccountWritable(accountIndex) && (\n                        <span className=\"badge badge-soft-danger mr-2\">\n                          Writable\n                        </span>\n                      )}\n                    </span>\n                  </div>\n                </td>\n                <td className=\"text-lg-right\">\n                  <AddressWithContext\n                    pubkey={message.accountKeys[accountIndex]}\n                  />\n                </td>\n              </tr>\n            );\n          })}\n          <tr>\n            <td>\n              Instruction Data <span className=\"text-muted\">(Hex)</span>\n            </td>\n            <td className=\"text-lg-right\">\n              <pre className=\"d-inline-block text-left mb-0 data-wrap\">\n                {data}\n              </pre>\n            </td>\n          </tr>\n        </TableCardBody>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Message, PACKET_DATA_SIZE } from \"@velas/web3\";\n\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport { SolBalance } from \"utils\";\nimport { useQuery } from \"utils/url\";\nimport { useHistory, useLocation } from \"react-router\";\nimport {\n  useFetchRawTransaction,\n  useRawTransactionDetails,\n} from \"providers/transactions/raw\";\nimport { FetchStatus } from \"providers/cache\";\nimport { LoadingCard } from \"components/common/LoadingCard\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { TransactionSignatures } from \"./SignaturesCard\";\nimport { AccountsCard } from \"./AccountsCard\";\nimport {\n  AddressWithContext,\n  createFeePayerValidator,\n} from \"./AddressWithContext\";\nimport { SimulatorCard } from \"./SimulatorCard\";\nimport { MIN_MESSAGE_LENGTH, RawInput } from \"./RawInputCard\";\nimport { InstructionsSection } from \"./InstructionsSection\";\nimport base58 from \"bs58\";\n\nexport type TransactionData = {\n  rawMessage: Uint8Array;\n  message: Message;\n  signatures?: (string | null)[];\n};\n\n// Decode a url param and return the result. If decoding fails, return whether\n// the param should be deleted.\nfunction decodeParam(params: URLSearchParams, name: string): string | boolean {\n  const param = params.get(name);\n  if (param === null) return false;\n  try {\n    return decodeURIComponent(param);\n  } catch (err) {\n    return true;\n  }\n}\n\n// Decode a signatures param and throw an error on failure\nfunction decodeSignatures(signaturesParam: string): (string | null)[] {\n  let signatures;\n  try {\n    signatures = JSON.parse(signaturesParam);\n  } catch (err) {\n    throw new Error(\"Signatures param is not valid JSON\");\n  }\n\n  if (!Array.isArray(signatures)) {\n    throw new Error(\"Signatures param is not a JSON array\");\n  }\n\n  const validSignatures: (string | null)[] = [];\n  for (const signature of signatures) {\n    if (signature === null) {\n      validSignatures.push(signature);\n      continue;\n    }\n\n    if (typeof signature !== \"string\") {\n      throw new Error(\"Signature is not a string\");\n    }\n\n    try {\n      base58.decode(signature);\n      validSignatures.push(signature);\n    } catch (err) {\n      throw new Error(\"Signature is not valid base58\");\n    }\n  }\n\n  return validSignatures;\n}\n\n// Decodes url params into transaction data if possible. If decoding fails,\n// URL params are returned as a string that will prefill the transaction\n// message input field for debugging. Returns a tuple of [result, shouldRefreshUrl]\nfunction decodeUrlParams(\n  params: URLSearchParams\n): [TransactionData | string, boolean] {\n  const messageParam = decodeParam(params, \"message\");\n  const signaturesParam = decodeParam(params, \"signatures\");\n\n  let refreshUrl = false;\n  if (signaturesParam === true) {\n    params.delete(\"signatures\");\n    refreshUrl = true;\n  }\n\n  if (typeof messageParam === \"boolean\") {\n    if (messageParam) {\n      params.delete(\"message\");\n      params.delete(\"signatures\");\n      refreshUrl = true;\n    }\n    return [\"\", refreshUrl];\n  }\n\n  let signatures: (string | null)[] | undefined = undefined;\n  if (typeof signaturesParam === \"string\") {\n    try {\n      signatures = decodeSignatures(signaturesParam);\n    } catch (err) {\n      params.delete(\"signatures\");\n      refreshUrl = true;\n    }\n  }\n\n  try {\n    const buffer = Uint8Array.from(atob(messageParam), (c) => c.charCodeAt(0));\n\n    if (buffer.length < MIN_MESSAGE_LENGTH) {\n      throw new Error(\"message buffer is too short\");\n    }\n\n    const message = Message.from(buffer);\n    const data = {\n      message,\n      rawMessage: buffer,\n      signatures,\n    };\n    return [data, refreshUrl];\n  } catch (err) {\n    params.delete(\"message\");\n    refreshUrl = true;\n    return [messageParam, true];\n  }\n}\n\nexport function TransactionInspectorPage({\n  signature,\n}: {\n  signature?: string;\n}) {\n  const [transaction, setTransaction] = React.useState<TransactionData>();\n  const query = useQuery();\n  const history = useHistory();\n  const location = useLocation();\n  const [paramString, setParamString] = React.useState<string>();\n\n  // Sync message with url search params\n  React.useEffect(() => {\n    if (signature) return;\n    if (transaction) {\n      let shouldRefreshUrl = false;\n\n      if (transaction.signatures !== undefined) {\n        const signaturesParam = encodeURIComponent(\n          JSON.stringify(transaction.signatures)\n        );\n        if (query.get(\"signatures\") !== signaturesParam) {\n          shouldRefreshUrl = true;\n          query.set(\"signatures\", signaturesParam);\n        }\n      }\n\n      const base64 = btoa(\n        String.fromCharCode.apply(null, [...transaction.rawMessage])\n      );\n      const newParam = encodeURIComponent(base64);\n      if (query.get(\"message\") !== newParam) {\n        shouldRefreshUrl = true;\n        query.set(\"message\", newParam);\n      }\n\n      if (shouldRefreshUrl) {\n        history.push({ ...location, search: query.toString() });\n      }\n    }\n  }, [query, transaction, signature, history, location]);\n\n  const reset = React.useCallback(() => {\n    query.delete(\"message\");\n    history.push({ ...location, search: query.toString() });\n    setTransaction(undefined);\n  }, [query, location, history]);\n\n  // Decode the message url param whenever it changes\n  React.useEffect(() => {\n    if (transaction || signature) return;\n\n    const [result, refreshUrl] = decodeUrlParams(query);\n    if (refreshUrl) {\n      history.push({ ...location, search: query.toString() });\n    }\n\n    if (typeof result === \"string\") {\n      setParamString(result);\n    } else {\n      setTransaction(result);\n    }\n  }, [query, transaction, signature, history, location]);\n\n  return (\n    <div className=\"container mt-4\">\n      <div className=\"header\">\n        <div className=\"header-body\">\n          <h2 className=\"header-title\">Transaction Inspector</h2>\n        </div>\n      </div>\n      {signature ? (\n        <PermalinkView signature={signature} reset={reset} />\n      ) : transaction ? (\n        <LoadedView transaction={transaction} onClear={reset} />\n      ) : (\n        <RawInput value={paramString} setTransactionData={setTransaction} />\n      )}\n    </div>\n  );\n}\n\nfunction PermalinkView({\n  signature,\n}: {\n  signature: string;\n  reset: () => void;\n}) {\n  const details = useRawTransactionDetails(signature);\n  const fetchTransaction = useFetchRawTransaction();\n  const refreshTransaction = () => fetchTransaction(signature);\n  const history = useHistory();\n  const location = useLocation();\n  const transaction = details?.data?.raw;\n  const reset = React.useCallback(() => {\n    history.push({ ...location, pathname: \"/tx/inspector\" });\n  }, [history, location]);\n\n  // Fetch details on load\n  React.useEffect(() => {\n    if (!details) fetchTransaction(signature);\n  }, [signature, details, fetchTransaction]);\n\n  if (!details || details.status === FetchStatus.Fetching) {\n    return <LoadingCard />;\n  } else if (details.status === FetchStatus.FetchFailed) {\n    return (\n      <ErrorCard\n        retry={refreshTransaction}\n        text=\"Failed to fetch transaction\"\n      />\n    );\n  } else if (!transaction) {\n    return (\n      <ErrorCard\n        text=\"Transaction was not found\"\n        retry={reset}\n        retryText=\"Reset\"\n      />\n    );\n  }\n\n  const { message, signatures } = transaction;\n  const tx = { message, rawMessage: message.serialize(), signatures };\n\n  return <LoadedView transaction={tx} onClear={reset} />;\n}\n\nfunction LoadedView({\n  transaction,\n  onClear,\n}: {\n  transaction: TransactionData;\n  onClear: () => void;\n}) {\n  const { message, rawMessage, signatures } = transaction;\n\n  return (\n    <>\n      <OverviewCard message={message} raw={rawMessage} onClear={onClear} />\n      <SimulatorCard message={message} />\n      {signatures && (\n        <TransactionSignatures\n          message={message}\n          signatures={signatures}\n          rawMessage={rawMessage}\n        />\n      )}\n      <AccountsCard message={message} />\n      <InstructionsSection message={message} />\n    </>\n  );\n}\n\nconst DEFAULT_FEES = {\n  lamportsPerSignature: 5000,\n};\n\nfunction OverviewCard({\n  message,\n  raw,\n  onClear,\n}: {\n  message: Message;\n  raw: Uint8Array;\n  onClear: () => void;\n}) {\n  const fee =\n    message.header.numRequiredSignatures * DEFAULT_FEES.lamportsPerSignature;\n  const feePayerValidator = createFeePayerValidator(fee);\n\n  const size = React.useMemo(() => {\n    const sigBytes = 1 + 64 * message.header.numRequiredSignatures;\n    return sigBytes + raw.length;\n  }, [message, raw]);\n\n  return (\n    <>\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <h3 className=\"card-header-title\">Transaction Overview</h3>\n          <button className=\"btn btn-sm d-flex btn-white\" onClick={onClear}>\n            Clear\n          </button>\n        </div>\n        <TableCardBody>\n          <tr>\n            <td>Serialized Size</td>\n            <td className=\"text-lg-right\">\n              <div className=\"d-flex align-items-end flex-column\">\n                {size} bytes\n                <span\n                  className={\n                    size <= PACKET_DATA_SIZE ? \"text-muted\" : \"text-warning\"\n                  }\n                >\n                  Max transaction size is {PACKET_DATA_SIZE} bytes\n                </span>\n              </div>\n            </td>\n          </tr>\n          <tr>\n            <td>Fees</td>\n            <td className=\"text-lg-right\">\n              <div className=\"d-flex align-items-end flex-column\">\n                <SolBalance lamports={fee} />\n                <span className=\"text-muted\">\n                  {`Each signature costs ${DEFAULT_FEES.lamportsPerSignature} lamports`}\n                </span>\n              </div>\n            </td>\n          </tr>\n          <tr>\n            <td>\n              <div className=\"d-flex align-items-start flex-column\">\n                Fee payer\n                <span className=\"mt-1\">\n                  <span className=\"badge badge-soft-info mr-2\">Signer</span>\n                  <span className=\"badge badge-soft-danger mr-2\">Writable</span>\n                </span>\n              </div>\n            </td>\n            <td className=\"text-right\">\n              {message.accountKeys.length === 0 ? (\n                \"No Fee Payer\"\n              ) : (\n                <AddressWithContext\n                  pubkey={message.accountKeys[0]}\n                  validator={feePayerValidator}\n                />\n              )}\n            </td>\n          </tr>\n        </TableCardBody>\n      </div>\n    </>\n  );\n}\n","import { EpochInfo, PerfSample } from \"@velas/web3\";\nimport { ClusterStatsStatus } from \"./solanaClusterStats\";\n\nexport type DashboardInfo = {\n  status: ClusterStatsStatus;\n  avgSlotTime_1h: number;\n  avgSlotTime_1min: number;\n  epochInfo: EpochInfo;\n  blockTime?: number;\n  lastBlockTime?: BlockTimeInfo;\n};\n\nexport type BlockTimeInfo = {\n  blockTime: number;\n  slot: number;\n};\n\nexport enum DashboardInfoActionType {\n  SetPerfSamples,\n  SetEpochInfo,\n  SetLastBlockTime,\n  SetError,\n  Reset,\n}\n\nexport type DashboardInfoActionSetPerfSamples = {\n  type: DashboardInfoActionType.SetPerfSamples;\n  data: PerfSample[];\n};\n\nexport type DashboardInfoActionSetEpochInfo = {\n  type: DashboardInfoActionType.SetEpochInfo;\n  data: EpochInfo;\n};\n\nexport type DashboardInfoActionReset = {\n  type: DashboardInfoActionType.Reset;\n  data: DashboardInfo;\n};\n\nexport type DashboardInfoActionSetError = {\n  type: DashboardInfoActionType.SetError;\n  data: string;\n};\n\nexport type DashboardInfoActionSetLastBlockTime = {\n  type: DashboardInfoActionType.SetLastBlockTime;\n  data: BlockTimeInfo;\n};\n\nexport type DashboardInfoAction =\n  | DashboardInfoActionSetPerfSamples\n  | DashboardInfoActionSetEpochInfo\n  | DashboardInfoActionReset\n  | DashboardInfoActionSetError\n  | DashboardInfoActionSetLastBlockTime;\n\nexport function dashboardInfoReducer(\n  state: DashboardInfo,\n  action: DashboardInfoAction\n) {\n  switch (action.type) {\n    case DashboardInfoActionType.SetLastBlockTime: {\n      const blockTime = state.blockTime || action.data.blockTime;\n      return {\n        ...state,\n        lastBlockTime: action.data,\n        blockTime,\n      };\n    }\n\n    case DashboardInfoActionType.SetPerfSamples: {\n      if (action.data.length < 1) {\n        return state;\n      }\n\n      const samples = action.data\n        .filter((sample) => {\n          return sample.numSlots !== 0;\n        })\n        .map((sample) => {\n          return sample.samplePeriodSecs / sample.numSlots;\n        })\n        .slice(0, 60);\n\n      const samplesInHour = samples.length < 60 ? samples.length : 60;\n      const avgSlotTime_1h =\n        samples.reduce((sum: number, cur: number) => {\n          return sum + cur;\n        }, 0) / samplesInHour;\n\n      const status =\n        state.epochInfo.absoluteSlot !== 0\n          ? ClusterStatsStatus.Ready\n          : ClusterStatsStatus.Loading;\n\n      return {\n        ...state,\n        avgSlotTime_1h,\n        avgSlotTime_1min: samples[0],\n        status,\n      };\n    }\n\n    case DashboardInfoActionType.SetEpochInfo: {\n      const status =\n        state.avgSlotTime_1h !== 0\n          ? ClusterStatsStatus.Ready\n          : ClusterStatsStatus.Loading;\n\n      let blockTime = state.blockTime;\n\n      // interpolate blocktime based on last known blocktime and average slot time\n      if (\n        state.lastBlockTime &&\n        state.avgSlotTime_1h !== 0 &&\n        action.data.absoluteSlot >= state.lastBlockTime.slot\n      ) {\n        blockTime =\n          state.lastBlockTime.blockTime +\n          (action.data.absoluteSlot - state.lastBlockTime.slot) *\n            Math.floor(state.avgSlotTime_1h * 1000);\n      }\n\n      return {\n        ...state,\n        epochInfo: action.data,\n        status,\n        blockTime,\n      };\n    }\n\n    case DashboardInfoActionType.SetError:\n      return {\n        ...state,\n        status: ClusterStatsStatus.Error,\n      };\n\n    case DashboardInfoActionType.Reset:\n      return {\n        ...action.data,\n      };\n\n    default:\n      return state;\n  }\n}\n","import { PerfSample } from \"@velas/web3\";\nimport { ClusterStatsStatus } from \"./solanaClusterStats\";\n\nexport type PerformanceInfo = {\n  status: ClusterStatsStatus;\n  avgTps: number;\n  historyMaxTps: number;\n  perfHistory: {\n    short: (number | null)[];\n    medium: (number | null)[];\n    long: (number | null)[];\n  };\n  transactionCount: number;\n};\n\nexport enum PerformanceInfoActionType {\n  SetTransactionCount,\n  SetPerfSamples,\n  SetError,\n  Reset,\n}\n\nexport type PerformanceInfoActionSetTransactionCount = {\n  type: PerformanceInfoActionType.SetTransactionCount;\n  data: number;\n};\n\nexport type PerformanceInfoActionSetPerfSamples = {\n  type: PerformanceInfoActionType.SetPerfSamples;\n  data: PerfSample[];\n};\n\nexport type PerformanceInfoActionSetError = {\n  type: PerformanceInfoActionType.SetError;\n  data: string;\n};\n\nexport type PerformanceInfoActionReset = {\n  type: PerformanceInfoActionType.Reset;\n  data: PerformanceInfo;\n};\n\nexport type PerformanceInfoAction =\n  | PerformanceInfoActionSetTransactionCount\n  | PerformanceInfoActionSetPerfSamples\n  | PerformanceInfoActionSetError\n  | PerformanceInfoActionReset;\n\nexport function performanceInfoReducer(\n  state: PerformanceInfo,\n  action: PerformanceInfoAction\n) {\n  switch (action.type) {\n    case PerformanceInfoActionType.SetPerfSamples: {\n      if (action.data.length < 1) {\n        return state;\n      }\n\n      let short = action.data\n        .filter((sample) => {\n          return sample.numTransactions !== 0;\n        })\n        .map((sample) => {\n          return sample.numTransactions / sample.samplePeriodSecs;\n        });\n\n      const avgTps = short[0];\n      const medium = downsampleByFactor(short, 4);\n      const long = downsampleByFactor(medium, 3);\n\n      const perfHistory = {\n        short: round(short.slice(0, 30)).reverse(),\n        medium: round(medium.slice(0, 30)).reverse(),\n        long: round(long.slice(0, 30)).reverse(),\n      };\n\n      const historyMaxTps = Math.max(\n        Math.max(...perfHistory.short),\n        Math.max(...perfHistory.medium),\n        Math.max(...perfHistory.long)\n      );\n\n      const status =\n        state.transactionCount !== 0\n          ? ClusterStatsStatus.Ready\n          : ClusterStatsStatus.Loading;\n\n      return {\n        ...state,\n        historyMaxTps,\n        avgTps,\n        perfHistory,\n        status,\n      };\n    }\n\n    case PerformanceInfoActionType.SetTransactionCount: {\n      const status =\n        state.avgTps !== 0\n          ? ClusterStatsStatus.Ready\n          : ClusterStatsStatus.Loading;\n\n      return {\n        ...state,\n        transactionCount: action.data,\n        status,\n      };\n    }\n\n    case PerformanceInfoActionType.SetError:\n      return {\n        ...state,\n        status: ClusterStatsStatus.Error,\n      };\n\n    case PerformanceInfoActionType.Reset:\n      return {\n        ...action.data,\n      };\n\n    default:\n      return state;\n  }\n}\n\nfunction downsampleByFactor(series: number[], factor: number) {\n  return series.reduce((result: number[], num: number, i: number) => {\n    const downsampledIndex = Math.floor(i / factor);\n    if (result.length < downsampledIndex + 1) {\n      result.push(0);\n    }\n    const mean = result[downsampledIndex];\n    const differential = (num - mean) / ((i % factor) + 1);\n    result[downsampledIndex] = mean + differential;\n    return result;\n  }, []);\n}\n\nfunction round(series: number[]) {\n  return series.map((n) => Math.round(n));\n}\n","import React from \"react\";\nimport { Connection } from \"@velas/web3\";\nimport { useCluster, Cluster } from \"providers/cluster\";\nimport {\n  DashboardInfo,\n  DashboardInfoActionType,\n  dashboardInfoReducer,\n} from \"./solanaDashboardInfo\";\nimport {\n  PerformanceInfo,\n  PerformanceInfoActionType,\n  performanceInfoReducer,\n} from \"./solanaPerformanceInfo\";\nimport { reportError } from \"utils/sentry\";\n\nexport const PERF_UPDATE_SEC = 5;\nexport const SAMPLE_HISTORY_HOURS = 6;\nexport const PERFORMANCE_SAMPLE_INTERVAL = 60000;\nexport const TRANSACTION_COUNT_INTERVAL = 5000;\nexport const EPOCH_INFO_INTERVAL = 2000;\nexport const BLOCK_TIME_INTERVAL = 5000;\nexport const LOADING_TIMEOUT = 10000;\n\nexport enum ClusterStatsStatus {\n  Loading,\n  Ready,\n  Error,\n}\n\nconst initialPerformanceInfo: PerformanceInfo = {\n  status: ClusterStatsStatus.Loading,\n  avgTps: 0,\n  historyMaxTps: 0,\n  perfHistory: {\n    short: [],\n    medium: [],\n    long: [],\n  },\n  transactionCount: 0,\n};\n\nconst initialDashboardInfo: DashboardInfo = {\n  status: ClusterStatsStatus.Loading,\n  avgSlotTime_1h: 0,\n  avgSlotTime_1min: 0,\n  epochInfo: {\n    absoluteSlot: 0,\n    blockHeight: 0,\n    epoch: 0,\n    slotIndex: 0,\n    slotsInEpoch: 0,\n  },\n};\n\ntype SetActive = React.Dispatch<React.SetStateAction<boolean>>;\nconst StatsProviderContext = React.createContext<\n  | {\n      setActive: SetActive;\n      setTimedOut: Function;\n      retry: Function;\n      active: boolean;\n    }\n  | undefined\n>(undefined);\n\ntype DashboardState = { info: DashboardInfo };\nconst DashboardContext = React.createContext<DashboardState | undefined>(\n  undefined\n);\n\ntype PerformanceState = { info: PerformanceInfo };\nconst PerformanceContext = React.createContext<PerformanceState | undefined>(\n  undefined\n);\n\ntype Props = { children: React.ReactNode };\n\nfunction getConnection(url: string): Connection | undefined {\n  try {\n    return new Connection(url);\n  } catch (error) {}\n}\n\nexport function SolanaClusterStatsProvider({ children }: Props) {\n  const { cluster, url } = useCluster();\n  const [active, setActive] = React.useState(false);\n  const [dashboardInfo, dispatchDashboardInfo] = React.useReducer(\n    dashboardInfoReducer,\n    initialDashboardInfo\n  );\n  const [performanceInfo, dispatchPerformanceInfo] = React.useReducer(\n    performanceInfoReducer,\n    initialPerformanceInfo\n  );\n\n  React.useEffect(() => {\n    if (!active || !url) return;\n\n    const connection = getConnection(url);\n\n    if (!connection) return;\n\n    let lastSlot: number | null = null;\n\n    const getPerformanceSamples = async () => {\n      try {\n        const samples = await connection.getRecentPerformanceSamples(\n          60 * SAMPLE_HISTORY_HOURS\n        );\n\n        if (samples.length < 1) {\n          // no samples to work with (node has no history).\n          return; // we will allow for a timeout instead of throwing an error\n        }\n\n        dispatchPerformanceInfo({\n          type: PerformanceInfoActionType.SetPerfSamples,\n          data: samples,\n        });\n\n        dispatchDashboardInfo({\n          type: DashboardInfoActionType.SetPerfSamples,\n          data: samples,\n        });\n      } catch (error) {\n        if (cluster !== Cluster.Custom) {\n          reportError(error, { url });\n        }\n        if (error instanceof Error) {\n          dispatchPerformanceInfo({\n            type: PerformanceInfoActionType.SetError,\n            data: error.toString(),\n          });\n          dispatchDashboardInfo({\n            type: DashboardInfoActionType.SetError,\n            data: error.toString(),\n          });\n        }\n        setActive(false);\n      }\n    };\n\n    const getTransactionCount = async () => {\n      try {\n        const transactionCount = await connection.getTransactionCount();\n        dispatchPerformanceInfo({\n          type: PerformanceInfoActionType.SetTransactionCount,\n          data: transactionCount,\n        });\n      } catch (error) {\n        if (cluster !== Cluster.Custom) {\n          reportError(error, { url });\n        }\n        if (error instanceof Error) {\n          dispatchPerformanceInfo({\n            type: PerformanceInfoActionType.SetError,\n            data: error.toString(),\n          });\n        }\n        setActive(false);\n      }\n    };\n\n    const getEpochInfo = async () => {\n      try {\n        const epochInfo = await connection.getEpochInfo();\n        lastSlot = epochInfo.absoluteSlot;\n        dispatchDashboardInfo({\n          type: DashboardInfoActionType.SetEpochInfo,\n          data: epochInfo,\n        });\n      } catch (error) {\n        if (cluster !== Cluster.Custom) {\n          reportError(error, { url });\n        }\n        if (error instanceof Error) {\n          dispatchDashboardInfo({\n            type: DashboardInfoActionType.SetError,\n            data: error.toString(),\n          });\n        }\n        setActive(false);\n      }\n    };\n\n    const getBlockTime = async () => {\n      if (lastSlot) {\n        try {\n          const blockTime = await connection.getBlockTime(lastSlot);\n          if (blockTime !== null) {\n            dispatchDashboardInfo({\n              type: DashboardInfoActionType.SetLastBlockTime,\n              data: {\n                slot: lastSlot,\n                blockTime: blockTime * 1000,\n              },\n            });\n          }\n        } catch (error) {\n          // let this fail gracefully\n        }\n      }\n    };\n\n    const performanceInterval = setInterval(\n      getPerformanceSamples,\n      PERFORMANCE_SAMPLE_INTERVAL\n    );\n    const transactionCountInterval = setInterval(\n      getTransactionCount,\n      TRANSACTION_COUNT_INTERVAL\n    );\n    const epochInfoInterval = setInterval(getEpochInfo, EPOCH_INFO_INTERVAL);\n    const blockTimeInterval = setInterval(getBlockTime, BLOCK_TIME_INTERVAL);\n\n    getPerformanceSamples();\n    getTransactionCount();\n    (async () => {\n      await getEpochInfo();\n      await getBlockTime();\n    })();\n\n    return () => {\n      clearInterval(performanceInterval);\n      clearInterval(transactionCountInterval);\n      clearInterval(epochInfoInterval);\n      clearInterval(blockTimeInterval);\n    };\n  }, [active, cluster, url]);\n\n  // Reset when cluster changes\n  React.useEffect(() => {\n    return () => {\n      resetData();\n    };\n  }, [url]);\n\n  function resetData() {\n    dispatchDashboardInfo({\n      type: DashboardInfoActionType.Reset,\n      data: initialDashboardInfo,\n    });\n    dispatchPerformanceInfo({\n      type: PerformanceInfoActionType.Reset,\n      data: initialPerformanceInfo,\n    });\n  }\n\n  const setTimedOut = React.useCallback(() => {\n    dispatchDashboardInfo({\n      type: DashboardInfoActionType.SetError,\n      data: \"Cluster stats timed out\",\n    });\n    dispatchPerformanceInfo({\n      type: PerformanceInfoActionType.SetError,\n      data: \"Cluster stats timed out\",\n    });\n    console.error(\"Cluster stats timed out\");\n    setActive(false);\n  }, []);\n\n  const retry = React.useCallback(() => {\n    resetData();\n    setActive(true);\n  }, []);\n\n  return (\n    <StatsProviderContext.Provider\n      value={{ setActive, setTimedOut, retry, active }}\n    >\n      <DashboardContext.Provider value={{ info: dashboardInfo }}>\n        <PerformanceContext.Provider value={{ info: performanceInfo }}>\n          {children}\n        </PerformanceContext.Provider>\n      </DashboardContext.Provider>\n    </StatsProviderContext.Provider>\n  );\n}\n\nexport function useStatsProvider() {\n  const context = React.useContext(StatsProviderContext);\n  if (!context) {\n    throw new Error(`useContext must be used within a StatsProvider`);\n  }\n  return context;\n}\n\nexport function useDashboardInfo() {\n  const context = React.useContext(DashboardContext);\n  if (!context) {\n    throw new Error(`useDashboardInfo must be used within a StatsProvider`);\n  }\n  return context.info;\n}\n\nexport function usePerformanceInfo() {\n  const context = React.useContext(PerformanceContext);\n  if (!context) {\n    throw new Error(`usePerformanceInfo must be used within a StatsProvider`);\n  }\n  return context.info;\n}\n","import React from \"react\";\nimport { Bar } from \"react-chartjs-2\";\nimport CountUp from \"react-countup\";\nimport {\n  usePerformanceInfo,\n  PERF_UPDATE_SEC,\n  ClusterStatsStatus,\n} from \"providers/stats/solanaClusterStats\";\nimport classNames from \"classnames\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport { ChartOptions, ChartTooltipModel } from \"chart.js\";\nimport { PerformanceInfo } from \"providers/stats/solanaPerformanceInfo\";\nimport { StatsNotReady } from \"pages/ClusterStatsPage\";\n\nexport function TpsCard() {\n  return (\n    <div className=\"card\">\n      <div className=\"card-header\">\n        <h4 className=\"card-header-title\">Live Transaction Stats</h4>\n      </div>\n      <TpsCardBody />\n    </div>\n  );\n}\n\nfunction TpsCardBody() {\n  const performanceInfo = usePerformanceInfo();\n\n  if (performanceInfo.status !== ClusterStatsStatus.Ready) {\n    return (\n      <StatsNotReady\n        error={performanceInfo.status === ClusterStatsStatus.Error}\n      />\n    );\n  }\n\n  return <TpsBarChart performanceInfo={performanceInfo} />;\n}\n\ntype Series = \"short\" | \"medium\" | \"long\";\nconst SERIES: Series[] = [\"short\", \"medium\", \"long\"];\nconst SERIES_INFO = {\n  short: {\n    label: (index: number) => index,\n    interval: \"30m\",\n  },\n  medium: {\n    label: (index: number) => index * 4,\n    interval: \"2h\",\n  },\n  long: {\n    label: (index: number) => index * 12,\n    interval: \"6h\",\n  },\n};\n\nconst CUSTOM_TOOLTIP = function (this: any, tooltipModel: ChartTooltipModel) {\n  // Tooltip Element\n  let tooltipEl = document.getElementById(\"chartjs-tooltip\");\n\n  // Create element on first render\n  if (!tooltipEl) {\n    tooltipEl = document.createElement(\"div\");\n    tooltipEl.id = \"chartjs-tooltip\";\n    tooltipEl.innerHTML = `<div class=\"content\"></div>`;\n    document.body.appendChild(tooltipEl);\n  }\n\n  // Hide if no tooltip\n  if (tooltipModel.opacity === 0) {\n    tooltipEl.style.opacity = \"0\";\n    return;\n  }\n\n  // Set Text\n  if (tooltipModel.body) {\n    const { label, value } = tooltipModel.dataPoints[0];\n    const tooltipContent = tooltipEl.querySelector(\"div\");\n    if (tooltipContent) {\n      let innerHtml = `<div class=\"value\">${value} TPS</div>`;\n      innerHtml += `<div class=\"label\">${label}</div>`;\n      tooltipContent.innerHTML = innerHtml;\n    }\n  }\n\n  // Enable tooltip and set position\n  const canvas: Element = this._chart.canvas;\n  const position = canvas.getBoundingClientRect();\n  tooltipEl.style.opacity = \"1\";\n  tooltipEl.style.left =\n    position.left + window.pageXOffset + tooltipModel.caretX + \"px\";\n  tooltipEl.style.top =\n    position.top + window.pageYOffset + tooltipModel.caretY + \"px\";\n};\n\nconst CHART_OPTIONS = (historyMaxTps: number): ChartOptions => {\n  return {\n    tooltips: {\n      intersect: false, // Show tooltip when cursor in between bars\n      enabled: false, // Hide default tooltip\n      custom: CUSTOM_TOOLTIP,\n    },\n    legend: {\n      display: false,\n    },\n    scales: {\n      xAxes: [\n        {\n          ticks: {\n            display: false,\n          },\n          gridLines: {\n            display: false,\n          },\n        },\n      ],\n      yAxes: [\n        {\n          ticks: {\n            stepSize: 100,\n            fontSize: 10,\n            fontColor: \"#EEE\",\n            beginAtZero: true,\n            display: true,\n            suggestedMax: historyMaxTps,\n          },\n          gridLines: {\n            display: false,\n          },\n        },\n      ],\n    },\n    animation: {\n      duration: 0, // general animation time\n    },\n    hover: {\n      animationDuration: 0, // duration of animations when hovering an item\n    },\n    responsiveAnimationDuration: 0, // animation duration after a resize\n  };\n};\n\ntype TpsBarChartProps = { performanceInfo: PerformanceInfo };\nfunction TpsBarChart({ performanceInfo }: TpsBarChartProps) {\n  const { perfHistory, avgTps, historyMaxTps } = performanceInfo;\n  const [series, setSeries] = React.useState<Series>(\"short\");\n  const averageTps = Math.round(avgTps).toLocaleString(\"en-US\");\n  const transactionCount = <AnimatedTransactionCount info={performanceInfo} />;\n  const seriesData = perfHistory[series];\n  const chartOptions = React.useMemo(\n    () => CHART_OPTIONS(historyMaxTps),\n    [historyMaxTps]\n  );\n\n  const seriesLength = seriesData.length;\n  const chartData: Chart.ChartData = {\n    labels: seriesData.map((val, i) => {\n      return `${SERIES_INFO[series].label(seriesLength - i)}min ago`;\n    }),\n    datasets: [\n      {\n        backgroundColor: \"#00D192\",\n        hoverBackgroundColor: \"#00D192\",\n        borderWidth: 0,\n        data: seriesData.map((val) => val || 0),\n      },\n    ],\n  };\n\n  return (\n    <>\n      <TableCardBody>\n        <tr>\n          <td className=\"w-100\">Transaction count</td>\n          <td className=\"text-lg-right text-monospace\">{transactionCount} </td>\n        </tr>\n        <tr>\n          <td className=\"w-100\">Transactions per second (TPS)</td>\n          <td className=\"text-lg-right text-monospace\">{averageTps} </td>\n        </tr>\n        <tr>\n          <td className=\"w-100\">TPS max</td>\n          <td className=\"text-lg-right text-monospace\">50k+ </td>\n        </tr>\n      </TableCardBody>\n\n      <hr className=\"my-0\" />\n\n      <div className=\"card-body py-3\">\n        <div className=\"align-box-row align-items-start justify-content-between\">\n          <div className=\"d-flex justify-content-between w-100\">\n            <span className=\"mb-0 font-size-sm\">TPS history</span>\n\n            <div className=\"font-size-sm\">\n              {SERIES.map((key) => (\n                <button\n                  key={key}\n                  onClick={() => setSeries(key)}\n                  className={classNames(\"btn btn-sm btn-white ml-2\", {\n                    active: series === key,\n                  })}\n                >\n                  {SERIES_INFO[key].interval}\n                </button>\n              ))}\n            </div>\n          </div>\n\n          <div\n            id=\"perf-history\"\n            className=\"mt-3 d-flex justify-content-end flex-row w-100\"\n          >\n            <div className=\"w-100\">\n              <Bar data={chartData} options={chartOptions} height={80} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nfunction AnimatedTransactionCount({ info }: { info: PerformanceInfo }) {\n  const txCountRef = React.useRef(0);\n  const countUpRef = React.useRef({ start: 0, period: 0, lastUpdate: 0 });\n  const countUp = countUpRef.current;\n\n  const { transactionCount: txCount, avgTps } = info;\n\n  // Track last tx count to reset count up options\n  if (txCount !== txCountRef.current) {\n    if (countUp.lastUpdate > 0) {\n      // Since we overshoot below, calculate the elapsed value\n      // and start from there.\n      const elapsed = Date.now() - countUp.lastUpdate;\n      const elapsedPeriods = elapsed / (PERF_UPDATE_SEC * 1000);\n      countUp.start = Math.floor(\n        countUp.start + elapsedPeriods * countUp.period\n      );\n\n      // if counter gets ahead of actual count, just hold for a bit\n      // until txCount catches up (this will sometimes happen when a tab is\n      // sent to the background and/or connection drops)\n      countUp.period = Math.max(txCount - countUp.start, 1);\n    } else {\n      // Since this is the first tx count value, estimate the previous\n      // tx count in order to have a starting point for our animation\n      countUp.period = PERF_UPDATE_SEC * avgTps;\n      countUp.start = txCount - countUp.period;\n    }\n    countUp.lastUpdate = Date.now();\n    txCountRef.current = txCount;\n  }\n\n  // Overshoot the target tx count in case the next update is delayed\n  const COUNT_PERIODS = 3;\n  const countUpEnd = countUp.start + COUNT_PERIODS * countUp.period;\n  return (\n    <CountUp\n      start={countUp.start}\n      end={countUpEnd}\n      duration={PERF_UPDATE_SEC * COUNT_PERIODS}\n      delay={0}\n      useEasing={false}\n      preserveValue={true}\n      separator=\",\"\n    />\n  );\n}\n","import React from \"react\";\n\nimport { Supply, Connection } from \"@velas/web3\";\nimport { useCluster, ClusterStatus, Cluster } from \"./cluster\";\nimport { reportError } from \"utils/sentry\";\n\nexport enum Status {\n  Idle,\n  Disconnected,\n  Connecting,\n}\n\ntype State = Supply | Status | string;\n\ntype Dispatch = React.Dispatch<React.SetStateAction<State>>;\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype Props = { children: React.ReactNode };\nexport function SupplyProvider({ children }: Props) {\n  const [state, setState] = React.useState<State>(Status.Idle);\n  const { status: clusterStatus, cluster, url } = useCluster();\n\n  React.useEffect(() => {\n    if (state !== Status.Idle) {\n      if (clusterStatus === ClusterStatus.Connecting)\n        setState(Status.Disconnected);\n      if (clusterStatus === ClusterStatus.Connected)\n        fetch(setState, cluster, url);\n    }\n  }, [clusterStatus, cluster, url]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={setState}>\n        {children}\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nasync function fetch(dispatch: Dispatch, cluster: Cluster, url: string) {\n  dispatch(Status.Connecting);\n\n  try {\n    const connection = new Connection(url, \"finalized\");\n    const supply = (await connection.getSupply()).value;\n\n    // Update state if still connecting\n    dispatch((state) => {\n      if (state !== Status.Connecting) return state;\n      return supply;\n    });\n  } catch (err) {\n    if (cluster !== Cluster.Custom) {\n      reportError(err, { url });\n    }\n    dispatch(\"Failed to fetch supply\");\n  }\n}\n\nexport function useSupply() {\n  const state = React.useContext(StateContext);\n  if (state === undefined) {\n    throw new Error(`useSupply must be used within a SupplyProvider`);\n  }\n  return state;\n}\n\nexport function useFetchSupply() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(`useFetchSupply must be used within a SupplyProvider`);\n  }\n\n  const { cluster, url } = useCluster();\n  return React.useCallback(() => {\n    fetch(dispatch, cluster, url);\n  }, [dispatch, cluster, url]);\n}\n","import React from \"react\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport { Slot } from \"components/common/Slot\";\nimport {\n  ClusterStatsStatus,\n  useDashboardInfo,\n  usePerformanceInfo,\n  useStatsProvider,\n} from \"providers/stats/solanaClusterStats\";\nimport { lamportsToSol, slotsToHumanString } from \"utils\";\nimport { ClusterStatus, useCluster } from \"providers/cluster\";\nimport { TpsCard } from \"components/TpsCard\";\nimport { displayTimestampWithoutDate, displayTimestampUtc } from \"utils/date\";\nimport { Status, useFetchSupply, useSupply } from \"providers/supply\";\nimport { PublicKey } from \"@velas/web3\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { LoadingCard } from \"components/common/LoadingCard\";\nimport { useAccountInfo, useFetchAccountInfo } from \"providers/accounts\";\nimport { FetchStatus } from \"providers/cache\";\nimport { useVoteAccounts } from \"providers/accounts/vote-accounts\";\n// @ts-ignore\nimport * as CoinGecko from \"coingecko-api\";\n\nenum CoingeckoStatus {\n  Success,\n  FetchFailed,\n}\n\nconst CoinGeckoClient = new CoinGecko();\n\nconst CLUSTER_STATS_TIMEOUT = 5000;\nconst STAKE_HISTORY_ACCOUNT = \"SysvarStakeHistory1111111111111111111111111\";\nconst PRICE_REFRESH = 10000;\n\nexport function ClusterStatsPage() {\n  return (\n    <div className=\"container mt-4\">\n      <StakingComponent />\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <div className=\"row align-items-center\">\n            <div className=\"col\">\n              <h4 className=\"card-header-title\">Live Cluster Stats</h4>\n            </div>\n          </div>\n        </div>\n        <StatsCardBody />\n      </div>\n      <TpsCard />\n    </div>\n  );\n}\n\nfunction StakingComponent() {\n  const { status } = useCluster();\n  const supply = useSupply();\n  const fetchSupply = useFetchSupply();\n  const fetchAccount = useFetchAccountInfo();\n  const stakeInfo = useAccountInfo(STAKE_HISTORY_ACCOUNT);\n  const coinInfo = useCoinGecko(\"velas\");\n  const { fetchVoteAccounts, voteAccounts } = useVoteAccounts();\n\n  function fetchData() {\n    fetchSupply();\n    fetchAccount(new PublicKey(STAKE_HISTORY_ACCOUNT));\n    fetchVoteAccounts();\n  }\n\n  React.useEffect(() => {\n    if (status === ClusterStatus.Connected) {\n      fetchData();\n    }\n  }, [status]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const deliquentStake = React.useMemo(() => {\n    if (voteAccounts) {\n      return voteAccounts.delinquent.reduce(\n        (prev, current) => prev + current.activatedStake,\n        0\n      );\n    }\n  }, [voteAccounts]);\n\n  let stakeHistory = stakeInfo?.data?.details?.data?.parsed.info;\n\n  if (supply === Status.Disconnected) {\n    // we'll return here to prevent flicker\n    return null;\n  }\n\n  if (\n    supply === Status.Idle ||\n    supply === Status.Connecting ||\n    !stakeInfo ||\n    !stakeHistory ||\n    !coinInfo\n  ) {\n    return <LoadingCard />;\n  } else if (typeof supply === \"string\") {\n    return <ErrorCard text={supply} retry={fetchData} />;\n  } else if (\n    stakeInfo.status === FetchStatus.FetchFailed ||\n    (stakeInfo.status === FetchStatus.Fetched &&\n      (!stakeHistory.length || stakeHistory.length < 1))\n  ) {\n    return (\n      <ErrorCard text={\"Failed to fetch active stake\"} retry={fetchData} />\n    );\n  }\n\n  stakeHistory = stakeHistory[0].stakeHistory;\n\n  const circulatingPercentage = (\n    (supply.circulating / supply.total) *\n    100\n  ).toFixed(1);\n\n  let delinquentStakePercentage;\n  if (deliquentStake) {\n    delinquentStakePercentage = (\n      (deliquentStake / stakeHistory.effective) *\n      100\n    ).toFixed(1);\n  }\n\n  let solanaInfo;\n  if (coinInfo.status === CoingeckoStatus.Success) {\n    solanaInfo = coinInfo.coinInfo;\n  }\n\n  return (\n    // <div className=\"card staking-card\">\n    //   <div className=\"card-body\">\n    //     <div className=\"d-flex flex-md-row flex-column\">\n    //       <div className=\"p-2 flex-fill\">\n    //         <h4>Circulating Supply</h4>\n    //         <h1>\n    //           <em>{displayLamports(supply.circulating)}</em> /{\" \"}\n    //           <small>{displayLamports(supply.total)}</small>\n    //         </h1>\n    //         <h5>\n    //           <em>{circulatingPercentage}%</em> is circulating\n    //         </h5>\n    //       </div>\n    //       <hr className=\"hidden-sm-up\" />\n    //       <div className=\"p-2 flex-fill\">\n    //         <h4>Active Stake</h4>\n    //         <h1>\n    //           <em>{displayLamports(stakeHistory.effective)}</em> /{\" \"}\n    //           <small>{displayLamports(supply.total)}</small>\n    //         </h1>\n    //         {delinquentStakePercentage && (\n    //           <h5>\n    //             Delinquent stake: <em>{delinquentStakePercentage}%</em>\n    //           </h5>\n    //         )}\n    //       </div>\n    //       <hr className=\"hidden-sm-up\" />\n    //       {solanaInfo && (\n    //         <div className=\"p-2 flex-fill\">\n    //           <h4>\n    //             Price{\" \"}\n    //             <span className=\"ml-2 badge badge-primary rank\">\n    //               Rank #{solanaInfo.market_cap_rank}\n    //             </span>\n    //           </h4>\n    //           <h1>\n    //             <em>${solanaInfo.price.toFixed(2)}</em>{\" \"}\n    //             {solanaInfo.price_change_percentage_24h > 0 && (\n    //               <small className=\"change-positive\">\n    //                 &uarr; {solanaInfo.price_change_percentage_24h.toFixed(2)}%\n    //               </small>\n    //             )}\n    //             {solanaInfo.price_change_percentage_24h < 0 && (\n    //               <small className=\"change-negative\">\n    //                 &darr; {solanaInfo.price_change_percentage_24h.toFixed(2)}%\n    //               </small>\n    //             )}\n    //             {solanaInfo.price_change_percentage_24h === 0 && (\n    //               <small>0%</small>\n    //             )}\n    //           </h1>\n    //           <h5>\n    //             24h Vol: <em>${abbreviatedNumber(solanaInfo.volume_24)}</em>{\" \"}\n    //             MCap: <em>${abbreviatedNumber(solanaInfo.market_cap)}</em>\n    //           </h5>\n    //         </div>\n    //       )}\n    //       {coinInfo.status === CoingeckoStatus.FetchFailed && (\n    //         <div className=\"p-2 flex-fill\">\n    //           <h4>Price</h4>\n    //           <h1>\n    //             <em>$--.--</em>\n    //           </h1>\n    //           <h5>Error fetching the latest price information</h5>\n    //         </div>\n    //       )}\n    //     </div>\n    //     {solanaInfo && (\n    //       <p className=\"updated-time text-muted mb-0\">\n    //         Updated at{\" \"}\n    //         {displayTimestampWithoutDate(solanaInfo.last_updated.getTime())}\n    //       </p>\n    //     )}\n    //   </div>\n    // </div>\n    <div className=\"row staking-card\">\n      <div className=\"col-12 col-lg-4 col-xl\">\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <h4>Circulating Supply\n            <span className=\"ml-2 badge badge-primary rank\" style={{opacity: 0.0}}>{displayLamports(supply.circulating)}</span>\n            </h4>\n            <h1>\n              <em>{displayLamports(supply.circulating)}</em> /{\" \"}\n              <small>{displayLamports(supply.total)}</small>\n            </h1>\n            <h5>\n              <em>{circulatingPercentage}%</em> is circulating\n            </h5>\n          </div>\n        </div>\n      </div>\n      <div className=\"col-12 col-lg-4 col-xl\">\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <h4>Active Stake{\" \"}\n                  <span className=\"ml-2 badge badge-primary rank\" style={{opacity: 0.0}}>{displayLamports(stakeHistory.effective)}</span>\n                  </h4>\n            <h1>\n              <em>{displayLamports(stakeHistory.effective)}</em> /{\" \"}\n              <small>{displayLamports(supply.total)}</small>\n            </h1>\n            {delinquentStakePercentage && (\n              <h5>\n                Delinquent stake: <em>{delinquentStakePercentage}%</em>\n              </h5>\n            )}\n          </div>\n        </div>\n      </div>\n      <div className=\"col-12 col-lg-4 col-xl\">\n        <div className=\"card\">\n          <div className=\"card-body\">\n            {solanaInfo && (\n              <>\n                <h4>\n                  Price{\" \"}\n                  <span className=\"ml-2 badge badge-primary rank\">\n                    Rank #{solanaInfo.market_cap_rank}\n                  </span>\n                </h4>\n                <h1>\n                  <em>${solanaInfo.price.toFixed(2)}</em>{\" \"}\n                  {solanaInfo.price_change_percentage_24h > 0 && (\n                    <small className=\"change-positive\">\n                      &uarr; {solanaInfo.price_change_percentage_24h.toFixed(2)}\n                      %\n                    </small>\n                  )}\n                  {solanaInfo.price_change_percentage_24h < 0 && (\n                    <small className=\"change-negative\">\n                      &darr; {solanaInfo.price_change_percentage_24h.toFixed(2)}\n                      %\n                    </small>\n                  )}\n                  {solanaInfo.price_change_percentage_24h === 0 && (\n                    <small>0%</small>\n                  )}\n                </h1>\n                <h5>\n                  24h Vol: <em>${abbreviatedNumber(solanaInfo.volume_24)}</em>{\" \"}\n                  MCap: <em>${abbreviatedNumber(solanaInfo.market_cap)}</em>\n                </h5>\n              </>\n            )}\n            {coinInfo.status === CoingeckoStatus.FetchFailed && (\n              <>\n                <h4>Price</h4>\n                <h1>\n                  <em>$--.--</em>\n                </h1>\n                <h5>Error fetching the latest price information</h5>\n              </>\n            )}\n            {solanaInfo && (\n              <p className=\"updated-time text-muted\">\n                Updated at{\" \"}\n                {displayTimestampWithoutDate(solanaInfo.last_updated.getTime())}\n              </p>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst abbreviatedNumber = (value: number, fixed = 1) => {\n  if (value < 1e3) return value;\n  if (value >= 1e3 && value < 1e6) return +(value / 1e3).toFixed(fixed) + \"K\";\n  if (value >= 1e6 && value < 1e9) return +(value / 1e6).toFixed(fixed) + \"M\";\n  if (value >= 1e9 && value < 1e12) return +(value / 1e9).toFixed(fixed) + \"B\";\n  if (value >= 1e12) return +(value / 1e12).toFixed(fixed) + \"T\";\n};\n\nfunction displayLamports(value: number) {\n  return abbreviatedNumber(lamportsToSol(value));\n}\n\nfunction StatsCardBody() {\n  const dashboardInfo = useDashboardInfo();\n  const performanceInfo = usePerformanceInfo();\n  const { setActive } = useStatsProvider();\n  const { cluster } = useCluster();\n\n  React.useEffect(() => {\n    setActive(true);\n    return () => setActive(false);\n  }, [setActive, cluster]);\n\n  if (\n    performanceInfo.status !== ClusterStatsStatus.Ready ||\n    dashboardInfo.status !== ClusterStatsStatus.Ready\n  ) {\n    const error =\n      performanceInfo.status === ClusterStatsStatus.Error ||\n      dashboardInfo.status === ClusterStatsStatus.Error;\n    return <StatsNotReady error={error} />;\n  }\n\n  const {\n    avgSlotTime_1h,\n    avgSlotTime_1min,\n    epochInfo,\n    blockTime,\n  } = dashboardInfo;\n  const hourlySlotTime = Math.round(1000 * avgSlotTime_1h);\n  const averageSlotTime = Math.round(1000 * avgSlotTime_1min);\n  const { slotIndex, slotsInEpoch } = epochInfo;\n  const currentEpoch = epochInfo.epoch.toString();\n  const epochProgress = ((100 * slotIndex) / slotsInEpoch).toFixed(1) + \"%\";\n  const epochTimeRemaining = slotsToHumanString(\n    slotsInEpoch - slotIndex,\n    hourlySlotTime\n  );\n  const { blockHeight, absoluteSlot } = epochInfo;\n\n  return (\n    <TableCardBody>\n      <tr>\n        <td className=\"w-100\">Slot</td>\n        <td className=\"text-lg-right text-monospace\">\n          <Slot slot={absoluteSlot} link />\n        </td>\n      </tr>\n      {blockHeight !== undefined && (\n        <tr>\n          <td className=\"w-100\">Block height</td>\n          <td className=\"text-lg-right text-monospace\">\n            <Slot slot={blockHeight} />\n          </td>\n        </tr>\n      )}\n      {blockTime && (\n        <tr>\n          <td className=\"w-100\">Cluster time</td>\n          <td className=\"text-lg-right text-monospace\">\n            {displayTimestampUtc(blockTime)}\n          </td>\n        </tr>\n      )}\n       <tr>\n        <td className=\"w-100\">Native accounts</td>\n        <td className=\"text-lg-right text-monospace\">750k+</td>\n      </tr>\n      <tr>\n        <td className=\"w-100\">Slot time (1min average)</td>\n        <td className=\"text-lg-right text-monospace\">{averageSlotTime}ms</td>\n      </tr>\n      <tr>\n        <td className=\"w-100\">Slot time (1hr average)</td>\n        <td className=\"text-lg-right text-monospace\">{hourlySlotTime}ms</td>\n      </tr>\n      <tr>\n        <td className=\"w-100\">Epoch</td>\n        <td className=\"text-lg-right text-monospace\">{currentEpoch}</td>\n      </tr>\n      <tr>\n        <td className=\"w-100\">Epoch progress</td>\n        <td className=\"text-lg-right text-monospace\">{epochProgress}</td>\n      </tr>\n      <tr>\n        <td className=\"w-100\">Epoch time remaining (approx.)</td>\n        <td className=\"text-lg-right text-monospace\">~{epochTimeRemaining}</td>\n      </tr>\n    </TableCardBody>\n  );\n}\n\nexport function StatsNotReady({ error }: { error: boolean }) {\n  const { setTimedOut, retry, active } = useStatsProvider();\n  const { cluster } = useCluster();\n\n  React.useEffect(() => {\n    let timedOut = 0;\n    if (!error) {\n      timedOut = setTimeout(setTimedOut, CLUSTER_STATS_TIMEOUT);\n    }\n    return () => {\n      if (timedOut) {\n        clearTimeout(timedOut);\n      }\n    };\n  }, [setTimedOut, cluster, error]);\n\n  if (error || !active) {\n    return (\n      <div className=\"card-body text-center\">\n        There was a problem loading cluster stats.{\" \"}\n        <button\n          className=\"btn btn-white btn-sm\"\n          onClick={() => {\n            retry();\n          }}\n        >\n          <span className=\"fe fe-refresh-cw mr-2\"></span>\n          Try Again\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"card-body text-center\">\n      <span className=\"spinner-grow spinner-grow-sm mr-2\"></span>\n      Loading\n    </div>\n  );\n}\n\ninterface CoinInfo {\n  price: number;\n  volume_24: number;\n  market_cap: number;\n  price_change_percentage_24h: number;\n  market_cap_rank: number;\n  last_updated: Date;\n}\n\ninterface CoinInfoResult {\n  data: {\n    market_data: {\n      current_price: {\n        usd: number;\n      };\n      total_volume: {\n        usd: number;\n      };\n      market_cap: {\n        usd: number;\n      };\n      price_change_percentage_24h: number;\n      market_cap_rank: number;\n    };\n    last_updated: string;\n  };\n}\n\ntype CoinGeckoResult = {\n  coinInfo?: CoinInfo;\n  status: CoingeckoStatus;\n};\n\nfunction useCoinGecko(coinId: string): CoinGeckoResult | undefined {\n  const [coinInfo, setCoinInfo] = React.useState<CoinGeckoResult>();\n\n  React.useEffect(() => {\n    const getCoinInfo = () => {\n      CoinGeckoClient.coins\n        .fetch(\"velas\")\n        .then((info: CoinInfoResult) => {\n          setCoinInfo({\n            coinInfo: {\n              price: info.data.market_data.current_price.usd,\n              volume_24: info.data.market_data.total_volume.usd,\n              market_cap: info.data.market_data.market_cap.usd,\n              market_cap_rank: info.data.market_data.market_cap_rank,\n              price_change_percentage_24h:\n                info.data.market_data.price_change_percentage_24h,\n              last_updated: new Date(info.data.last_updated),\n            },\n            status: CoingeckoStatus.Success,\n          });\n        })\n        .catch((error: any) => {\n          setCoinInfo({\n            status: CoingeckoStatus.FetchFailed,\n          });\n        });\n    };\n\n    getCoinInfo();\n    const interval = setInterval(() => {\n      getCoinInfo();\n    }, PRICE_REFRESH);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [setCoinInfo]);\n\n  return coinInfo;\n}","import { Connection, VoteAccountStatus } from \"@velas/web3\";\nimport { Cluster, useCluster } from \"providers/cluster\";\nimport React from \"react\";\nimport { reportError } from \"utils/sentry\";\n\nasync function fetchVoteAccounts(\n  cluster: Cluster,\n  url: string,\n  setVoteAccounts: React.Dispatch<\n    React.SetStateAction<VoteAccountStatus | undefined>\n  >\n) {\n  try {\n    const connection = new Connection(url);\n    const result = await connection.getVoteAccounts();\n    setVoteAccounts(result);\n  } catch (error) {\n    if (cluster !== Cluster.Custom) {\n      reportError(error, { url });\n    }\n  }\n}\n\nexport function useVoteAccounts() {\n  const [voteAccounts, setVoteAccounts] = React.useState<VoteAccountStatus>();\n  const { cluster, url } = useCluster();\n\n  return {\n    fetchVoteAccounts: () => fetchVoteAccounts(cluster, url, setVoteAccounts),\n    voteAccounts,\n  };\n}\n","import React from \"react\";\n\nimport { AccountBalancePair, Connection } from \"@velas/web3\";\nimport { useCluster, ClusterStatus, Cluster } from \"./cluster\";\nimport { reportError } from \"utils/sentry\";\n\nexport enum Status {\n  Idle,\n  Disconnected,\n  Connecting,\n}\n\ntype RichLists = {\n  total: AccountBalancePair[];\n  circulating: AccountBalancePair[];\n  nonCirculating: AccountBalancePair[];\n};\n\ntype State = RichLists | Status | string;\n\ntype Dispatch = React.Dispatch<React.SetStateAction<State>>;\nconst StateContext = React.createContext<State | undefined>(undefined);\nconst DispatchContext = React.createContext<Dispatch | undefined>(undefined);\n\ntype Props = { children: React.ReactNode };\nexport function RichListProvider({ children }: Props) {\n  const [state, setState] = React.useState<State>(Status.Idle);\n  const { status: clusterStatus, cluster, url } = useCluster();\n\n  React.useEffect(() => {\n    if (state !== Status.Idle) {\n      switch (clusterStatus) {\n        case ClusterStatus.Connecting: {\n          setState(Status.Disconnected);\n          break;\n        }\n        case ClusterStatus.Connected: {\n          fetch(setState, cluster, url);\n          break;\n        }\n      }\n    }\n  }, [clusterStatus, cluster, url]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={setState}>\n        {children}\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nasync function fetch(dispatch: Dispatch, cluster: Cluster, url: string) {\n  dispatch(Status.Connecting);\n\n  try {\n    const connection = new Connection(url, \"finalized\");\n\n    const [total, circulating, nonCirculating] = (\n      await Promise.all([\n        connection.getLargestAccounts(),\n        connection.getLargestAccounts({ filter: \"circulating\" }),\n        connection.getLargestAccounts({ filter: \"nonCirculating\" }),\n      ])\n    ).map((response) => response.value);\n\n    // Update state if still connecting\n    dispatch((state) => {\n      if (state !== Status.Connecting) return state;\n      return { total, circulating, nonCirculating };\n    });\n  } catch (err) {\n    if (cluster !== Cluster.Custom) {\n      reportError(err, { url });\n    }\n    dispatch(\"Failed to fetch top accounts\");\n  }\n}\n\nexport function useRichList() {\n  const state = React.useContext(StateContext);\n  if (state === undefined) {\n    throw new Error(`useRichList must be used within a RichListProvider`);\n  }\n  return state;\n}\n\nexport function useFetchRichList() {\n  const dispatch = React.useContext(DispatchContext);\n  if (!dispatch) {\n    throw new Error(`useFetchRichList must be used within a RichListProvider`);\n  }\n\n  const { cluster, url } = useCluster();\n  return React.useCallback(() => {\n    fetch(dispatch, cluster, url);\n  }, [dispatch, cluster, url]);\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Location } from \"history\";\nimport { AccountBalancePair } from \"@velas/web3\";\nimport { useRichList, useFetchRichList, Status } from \"providers/richList\";\nimport { LoadingCard } from \"./common/LoadingCard\";\nimport { ErrorCard } from \"./common/ErrorCard\";\nimport { SolBalance } from \"utils\";\nimport { useQuery } from \"utils/url\";\nimport { useSupply } from \"providers/supply\";\nimport { Address } from \"./common/Address\";\n\ntype Filter = \"circulating\" | \"nonCirculating\" | \"all\" | null;\n\nexport function TopAccountsCard() {\n  const supply = useSupply();\n  const richList = useRichList();\n  const fetchRichList = useFetchRichList();\n  const [showDropdown, setDropdown] = React.useState(false);\n  const filter = useQueryFilter();\n\n  if (typeof supply !== \"object\") return null;\n\n  if (richList === Status.Disconnected) {\n    return <ErrorCard text=\"Not connected to the cluster\" />;\n  }\n\n  if (richList === Status.Connecting) {\n    return <LoadingCard />;\n  }\n\n  if (typeof richList === \"string\") {\n    return <ErrorCard text={richList} retry={fetchRichList} />;\n  }\n\n  let supplyCount: number;\n  let accounts, header;\n\n  if (richList !== Status.Idle) {\n    switch (filter) {\n      case \"nonCirculating\": {\n        accounts = richList.nonCirculating;\n        supplyCount = supply.nonCirculating;\n        header = \"Non-Circulating\";\n        break;\n      }\n      case \"all\": {\n        accounts = richList.total;\n        supplyCount = supply.total;\n        header = \"Total\";\n        break;\n      }\n      case \"circulating\":\n      default: {\n        accounts = richList.circulating;\n        supplyCount = supply.circulating;\n        header = \"Circulating\";\n        break;\n      }\n    }\n  }\n\n  return (\n    <>\n      {showDropdown && (\n        <div className=\"dropdown-exit\" onClick={() => setDropdown(false)} />\n      )}\n\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <div className=\"row align-items-center\">\n            <div className=\"col\">\n              <h4 className=\"card-header-title\">Largest Accounts</h4>\n            </div>\n\n            <div className=\"col-auto\">\n              <FilterDropdown\n                filter={filter}\n                toggle={() => setDropdown((show) => !show)}\n                show={showDropdown}\n              />\n            </div>\n          </div>\n        </div>\n\n        {richList === Status.Idle && (\n          <div className=\"card-body\">\n            <span\n              className=\"btn btn-white ml-3 d-none d-md-inline\"\n              onClick={fetchRichList}\n            >\n              Load Largest Accounts\n            </span>\n          </div>\n        )}\n\n        {accounts && (\n          <div className=\"table-responsive mb-0\">\n            <table className=\"table table-sm table-nowrap card-table\">\n              <thead>\n                <tr>\n                  <th className=\"text-muted\">Rank</th>\n                  <th className=\"text-muted\">Address</th>\n                  <th className=\"text-muted text-right\">Balance (XZO)</th>\n                  <th className=\"text-muted text-right\">\n                    % of {header} Supply\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"list\">\n                {accounts.map((account, index) =>\n                  renderAccountRow(account, index, supplyCount)\n                )}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nconst renderAccountRow = (\n  account: AccountBalancePair,\n  index: number,\n  supply: number\n) => {\n  return (\n    <tr key={index}>\n      <td>\n        <span className=\"badge badge-soft-light badge-pill\">{index + 1}</span>\n      </td>\n      <td>\n        <Address pubkey={account.address} link />\n      </td>\n      <td className=\"text-right\">\n        <SolBalance lamports={account.lamports} maximumFractionDigits={0} />\n      </td>\n      <td className=\"text-right\">{`${(\n        (100 * account.lamports) /\n        supply\n      ).toFixed(3)}%`}</td>\n    </tr>\n  );\n};\n\nconst useQueryFilter = (): Filter => {\n  const query = useQuery();\n  const filter = query.get(\"filter\");\n  if (\n    filter === \"circulating\" ||\n    filter === \"nonCirculating\" ||\n    filter === \"all\"\n  ) {\n    return filter;\n  } else {\n    return null;\n  }\n};\n\nconst filterTitle = (filter: Filter): string => {\n  switch (filter) {\n    case \"nonCirculating\": {\n      return \"Non-Circulating\";\n    }\n    case \"all\": {\n      return \"All\";\n    }\n    case \"circulating\":\n    default: {\n      return \"Circulating\";\n    }\n  }\n};\n\ntype DropdownProps = {\n  filter: Filter;\n  toggle: () => void;\n  show: boolean;\n};\n\nconst FilterDropdown = ({ filter, toggle, show }: DropdownProps) => {\n  const buildLocation = (location: Location, filter: Filter) => {\n    const params = new URLSearchParams(location.search);\n    if (filter === null) {\n      params.delete(\"filter\");\n    } else {\n      params.set(\"filter\", filter);\n    }\n    return {\n      ...location,\n      search: params.toString(),\n    };\n  };\n\n  const FILTERS: Filter[] = [\"all\", null, \"nonCirculating\"];\n  return (\n    <div className=\"dropdown\">\n      <button\n        className=\"btn btn-white btn-sm dropdown-toggle\"\n        type=\"button\"\n        onClick={toggle}\n      >\n        {filterTitle(filter)}\n      </button>\n      <div\n        className={`dropdown-menu-right dropdown-menu${show ? \" show\" : \"\"}`}\n      >\n        {FILTERS.map((filterOption) => {\n          return (\n            <Link\n              key={filterOption || \"null\"}\n              to={(location) => buildLocation(location, filterOption)}\n              className={`dropdown-item${\n                filterOption === filter ? \" active\" : \"\"\n              }`}\n              onClick={toggle}\n            >\n              {filterTitle(filterOption)}\n            </Link>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useSupply, useFetchSupply, Status } from \"providers/supply\";\nimport { LoadingCard } from \"./common/LoadingCard\";\nimport { ErrorCard } from \"./common/ErrorCard\";\nimport { SolBalance } from \"utils\";\nimport { TableCardBody } from \"./common/TableCardBody\";\n\nexport function SupplyCard() {\n  const supply = useSupply();\n  const fetchSupply = useFetchSupply();\n\n  // Fetch supply on load\n  React.useEffect(() => {\n    if (supply === Status.Idle) fetchSupply();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  if (supply === Status.Disconnected) {\n    return <ErrorCard text=\"Not connected to the cluster\" />;\n  }\n\n  if (supply === Status.Idle || supply === Status.Connecting)\n    return <LoadingCard />;\n\n  if (typeof supply === \"string\") {\n    return <ErrorCard text={supply} retry={fetchSupply} />;\n  }\n\n  return (\n    <div className=\"card\">\n      {renderHeader()}\n\n      <TableCardBody>\n        <tr>\n          <td className=\"w-100\">Total Supply (XZO)</td>\n          <td className=\"text-lg-right\">\n            <SolBalance lamports={supply.total} maximumFractionDigits={0} />\n          </td>\n        </tr>\n\n        <tr>\n          <td className=\"w-100\">Circulating Supply (XZO)</td>\n          <td className=\"text-lg-right\">\n            <SolBalance\n              lamports={supply.circulating}\n              maximumFractionDigits={0}\n            />\n          </td>\n        </tr>\n\n        <tr>\n          <td className=\"w-100\">Non-Circulating Supply (XZO)</td>\n          <td className=\"text-lg-right\">\n            <SolBalance\n              lamports={supply.nonCirculating}\n              maximumFractionDigits={0}\n            />\n          </td>\n        </tr>\n      </TableCardBody>\n    </div>\n  );\n}\n\nconst renderHeader = () => {\n  return (\n    <div className=\"card-header\">\n      <div className=\"row align-items-center\">\n        <div className=\"col\">\n          <h4 className=\"card-header-title\">Supply Overview</h4>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { TopAccountsCard } from \"components/TopAccountsCard\";\nimport { SupplyCard } from \"components/SupplyCard\";\n\nexport function SupplyPage() {\n  return (\n    <div className=\"container mt-4\">\n      <SupplyCard />\n      <TopAccountsCard />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { BlockResponse } from \"@velas/web3\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { Signature } from \"components/common/Signature\";\n\nconst PAGE_SIZE = 25;\n\nexport function BlockHistoryCard({ block }: { block: BlockResponse }) {\n  const [numDisplayed, setNumDisplayed] = React.useState(PAGE_SIZE);\n\n  if (block.transactions.length === 0) {\n    return <ErrorCard text=\"This block has no transactions\" />;\n  }\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header align-items-center\">\n        <h3 className=\"card-header-title\">Block Transactions</h3>\n      </div>\n\n      <div className=\"table-responsive mb-0\">\n        <table className=\"table table-sm table-nowrap card-table\">\n          <thead>\n            <tr>\n              <th className=\"text-muted\">Result</th>\n              <th className=\"text-muted\">Transaction Signature</th>\n            </tr>\n          </thead>\n          <tbody className=\"list\">\n            {block.transactions.slice(0, numDisplayed).map((tx, i) => {\n              let statusText;\n              let statusClass;\n              let signature: React.ReactNode;\n              if (tx.meta?.err || tx.transaction.signatures.length === 0) {\n                statusClass = \"warning\";\n                statusText = \"Failed\";\n              } else {\n                statusClass = \"success\";\n                statusText = \"Success\";\n              }\n\n              if (tx.transaction.signatures.length > 0) {\n                signature = (\n                  <Signature signature={tx.transaction.signatures[0]} link />\n                );\n              }\n\n              return (\n                <tr key={i}>\n                  <td>\n                    <span className={`badge badge-soft-${statusClass}`}>\n                      {statusText}\n                    </span>\n                  </td>\n\n                  <td>{signature}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n\n      {block.transactions.length > numDisplayed && (\n        <div className=\"card-footer\">\n          <button\n            className=\"btn btn-primary w-100\"\n            onClick={() =>\n              setNumDisplayed((displayed) => displayed + PAGE_SIZE)\n            }\n          >\n            Load More\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { SolBalance } from \"utils\";\nimport { BlockResponse, PublicKey } from \"@velas/web3\";\nimport { Address } from \"components/common/Address\";\n\nconst PAGE_SIZE = 10;\n\nexport function BlockRewardsCard({ block }: { block: BlockResponse }) {\n  const [rewardsDisplayed, setRewardsDisplayed] = React.useState(PAGE_SIZE);\n\n  if (!block.rewards || block.rewards.length < 1) {\n    return null;\n  }\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header align-items-center\">\n        <h3 className=\"card-header-title\">Block Rewards</h3>\n      </div>\n\n      <div className=\"table-responsive mb-0\">\n        <table className=\"table table-sm table-nowrap card-table\">\n          <thead>\n            <tr>\n              <th className=\"text-muted\">Address</th>\n              <th className=\"text-muted\">Type</th>\n              <th className=\"text-muted\">Amount</th>\n              <th className=\"text-muted\">New Balance</th>\n              <th className=\"text-muted\">Percent Change</th>\n            </tr>\n          </thead>\n          <tbody>\n            {block.rewards.map((reward, index) => {\n              if (index >= rewardsDisplayed - 1) {\n                return null;\n              }\n\n              let percentChange;\n              if (reward.postBalance !== null && reward.postBalance !== 0) {\n                percentChange = (\n                  (Math.abs(reward.lamports) /\n                    (reward.postBalance - reward.lamports)) *\n                  100\n                ).toFixed(9);\n              }\n              return (\n                <tr key={reward.pubkey + reward.rewardType}>\n                  <td>\n                    <Address pubkey={new PublicKey(reward.pubkey)} link />\n                  </td>\n                  <td>{reward.rewardType}</td>\n                  <td>\n                    <SolBalance lamports={reward.lamports} />\n                  </td>\n                  <td>\n                    {reward.postBalance ? (\n                      <SolBalance lamports={reward.postBalance} />\n                    ) : (\n                      \"-\"\n                    )}\n                  </td>\n                  <td>{percentChange ? percentChange + \"%\" : \"-\"}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n\n      {block.rewards.length > rewardsDisplayed && (\n        <div className=\"card-footer\">\n          <button\n            className=\"btn btn-primary w-100\"\n            onClick={() =>\n              setRewardsDisplayed((displayed) => displayed + PAGE_SIZE)\n            }\n          >\n            Load More\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { BlockResponse, PublicKey } from \"@velas/web3\";\nimport { Address } from \"components/common/Address\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\n\nexport function BlockProgramsCard({ block }: { block: BlockResponse }) {\n  const totalTransactions = block.transactions.length;\n  const txSuccesses = new Map<string, number>();\n  const txFrequency = new Map<string, number>();\n  const ixFrequency = new Map<string, number>();\n\n  let totalInstructions = 0;\n  block.transactions.forEach((tx) => {\n    const message = tx.transaction.message;\n    totalInstructions += message.instructions.length;\n    const programUsed = new Set<string>();\n    const trackProgram = (index: number) => {\n      if (index >= message.accountKeys.length) return;\n      const programId = message.accountKeys[index];\n      const programAddress = programId.toBase58();\n      programUsed.add(programAddress);\n      const frequency = ixFrequency.get(programAddress);\n      ixFrequency.set(programAddress, frequency ? frequency + 1 : 1);\n    };\n\n    message.instructions.forEach((ix) => trackProgram(ix.programIdIndex));\n    tx.meta?.innerInstructions?.forEach((inner) => {\n      totalInstructions += inner.instructions.length;\n      inner.instructions.forEach((innerIx) =>\n        trackProgram(innerIx.programIdIndex)\n      );\n    });\n\n    const successful = tx.meta?.err === null;\n    programUsed.forEach((programId) => {\n      const frequency = txFrequency.get(programId);\n      txFrequency.set(programId, frequency ? frequency + 1 : 1);\n      if (successful) {\n        const count = txSuccesses.get(programId);\n        txSuccesses.set(programId, count ? count + 1 : 1);\n      }\n    });\n  });\n\n  const programEntries = [];\n  for (let entry of txFrequency) {\n    programEntries.push(entry);\n  }\n\n  programEntries.sort((a, b) => {\n    if (a[1] < b[1]) return 1;\n    if (a[1] > b[1]) return -1;\n    return 0;\n  });\n\n  return (\n    <>\n      <div className=\"card\">\n        <div className=\"card-header align-items-center\">\n          <h3 className=\"card-header-title\">Block Program Stats</h3>\n        </div>\n        <TableCardBody>\n          <tr>\n            <td className=\"w-100\">Unique Programs Count</td>\n            <td className=\"text-lg-right text-monospace\">\n              {programEntries.length}\n            </td>\n          </tr>\n          <tr>\n            <td className=\"w-100\">Total Instructions</td>\n            <td className=\"text-lg-right text-monospace\">\n              {totalInstructions}\n            </td>\n          </tr>\n        </TableCardBody>\n      </div>\n      <div className=\"card\">\n        <div className=\"card-header align-items-center\">\n          <h3 className=\"card-header-title\">Block Programs</h3>\n        </div>\n\n        <div className=\"table-responsive mb-0\">\n          <table className=\"table table-sm table-nowrap card-table\">\n            <thead>\n              <tr>\n                <th className=\"text-muted\">Program</th>\n                <th className=\"text-muted\">Transaction Count</th>\n                <th className=\"text-muted\">% of Total</th>\n                <th className=\"text-muted\">Instruction Count</th>\n                <th className=\"text-muted\">% of Total</th>\n                <th className=\"text-muted\">Success Rate</th>\n              </tr>\n            </thead>\n            <tbody>\n              {programEntries.map(([programId, txFreq]) => {\n                const ixFreq = ixFrequency.get(programId) as number;\n                const successes = txSuccesses.get(programId) || 0;\n                return (\n                  <tr key={programId}>\n                    <td>\n                      <Address pubkey={new PublicKey(programId)} link />\n                    </td>\n                    <td>{txFreq}</td>\n                    <td>{((100 * txFreq) / totalTransactions).toFixed(2)}%</td>\n                    <td>{ixFreq}</td>\n                    <td>{((100 * ixFreq) / totalInstructions).toFixed(2)}%</td>\n                    <td>{((100 * successes) / txFreq).toFixed(0)}%</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport { BlockResponse, PublicKey } from \"@velas/web3\";\nimport { Address } from \"components/common/Address\";\n\ntype AccountStats = {\n  reads: number;\n  writes: number;\n};\n\nconst PAGE_SIZE = 25;\n\nexport function BlockAccountsCard({ block }: { block: BlockResponse }) {\n  const [numDisplayed, setNumDisplayed] = React.useState(10);\n  const totalTransactions = block.transactions.length;\n\n  const accountStats = React.useMemo(() => {\n    const statsMap = new Map<string, AccountStats>();\n    block.transactions.forEach((tx) => {\n      const message = tx.transaction.message;\n      const txSet = new Map<string, boolean>();\n      message.instructions.forEach((ix) => {\n        ix.accounts.forEach((index) => {\n          const address = message.accountKeys[index].toBase58();\n          txSet.set(address, message.isAccountWritable(index));\n        });\n      });\n\n      txSet.forEach((isWritable, address) => {\n        const stats = statsMap.get(address) || { reads: 0, writes: 0 };\n        if (isWritable) {\n          stats.writes++;\n        } else {\n          stats.reads++;\n        }\n        statsMap.set(address, stats);\n      });\n    });\n\n    const accountEntries = [];\n    for (let entry of statsMap) {\n      accountEntries.push(entry);\n    }\n\n    accountEntries.sort((a, b) => {\n      const aCount = a[1].reads + a[1].writes;\n      const bCount = b[1].reads + b[1].writes;\n      if (aCount < bCount) return 1;\n      if (aCount > bCount) return -1;\n      return 0;\n    });\n\n    return accountEntries;\n  }, [block]);\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-header align-items-center\">\n        <h3 className=\"card-header-title\">Block Account Usage</h3>\n      </div>\n\n      <div className=\"table-responsive mb-0\">\n        <table className=\"table table-sm table-nowrap card-table\">\n          <thead>\n            <tr>\n              <th className=\"text-muted\">Account</th>\n              <th className=\"text-muted\">Read-Write Count</th>\n              <th className=\"text-muted\">Read-Only Count</th>\n              <th className=\"text-muted\">Total Count</th>\n              <th className=\"text-muted\">% of Transactions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {accountStats\n              .slice(0, numDisplayed)\n              .map(([address, { writes, reads }]) => {\n                return (\n                  <tr key={address}>\n                    <td>\n                      <Address pubkey={new PublicKey(address)} link />\n                    </td>\n                    <td>{writes}</td>\n                    <td>{reads}</td>\n                    <td>{writes + reads}</td>\n                    <td>\n                      {((100 * (writes + reads)) / totalTransactions).toFixed(\n                        2\n                      )}\n                      %\n                    </td>\n                  </tr>\n                );\n              })}\n          </tbody>\n        </table>\n      </div>\n\n      {accountStats.length > numDisplayed && (\n        <div className=\"card-footer\">\n          <button\n            className=\"btn btn-primary w-100\"\n            onClick={() =>\n              setNumDisplayed((displayed) => displayed + PAGE_SIZE)\n            }\n          >\n            Load More\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { TableCardBody } from \"components/common/TableCardBody\";\nimport { useBlock, useFetchBlock, FetchStatus } from \"providers/block\";\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { LoadingCard } from \"components/common/LoadingCard\";\nimport { Slot } from \"components/common/Slot\";\nimport { ClusterStatus, useCluster } from \"providers/cluster\";\nimport { BlockHistoryCard } from \"./BlockHistoryCard\";\nimport { BlockRewardsCard } from \"./BlockRewardsCard\";\nimport { BlockResponse } from \"@velas/web3\";\nimport { NavLink } from \"react-router-dom\";\nimport { clusterPath } from \"utils/url\";\nimport { BlockProgramsCard } from \"./BlockProgramsCard\";\nimport { BlockAccountsCard } from \"./BlockAccountsCard\";\n\nexport function BlockOverviewCard({\n  slot,\n  tab,\n}: {\n  slot: number;\n  tab?: string;\n}) {\n  const confirmedBlock = useBlock(slot);\n  const fetchBlock = useFetchBlock();\n  const { status } = useCluster();\n  const refresh = () => fetchBlock(slot);\n\n  // Fetch block on load\n  React.useEffect(() => {\n    if (!confirmedBlock && status === ClusterStatus.Connected) refresh();\n  }, [slot, status]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  if (!confirmedBlock || confirmedBlock.status === FetchStatus.Fetching) {\n    return <LoadingCard message=\"Loading block\" />;\n  } else if (\n    confirmedBlock.data === undefined ||\n    confirmedBlock.status === FetchStatus.FetchFailed\n  ) {\n    return <ErrorCard retry={refresh} text=\"Failed to fetch block\" />;\n  } else if (confirmedBlock.data.block === undefined) {\n    return <ErrorCard retry={refresh} text={`Block ${slot} was not found`} />;\n  }\n\n  const block = confirmedBlock.data.block;\n  const committedTxs = block.transactions.filter((tx) => tx.meta?.err === null);\n\n  return (\n    <>\n      <div className=\"card\">\n        <div className=\"card-header\">\n          <h3 className=\"card-header-title mb-0 d-flex align-items-center\">\n            Overview\n          </h3>\n        </div>\n        <TableCardBody>\n          <tr>\n            <td className=\"w-100\">Slot</td>\n            <td className=\"text-lg-right text-monospace\">\n              <Slot slot={slot} />\n            </td>\n          </tr>\n          <tr>\n            <td className=\"w-100\">Blockhash</td>\n            <td className=\"text-lg-right text-monospace\">\n              <span>{block.blockhash}</span>\n            </td>\n          </tr>\n          <tr>\n            <td className=\"w-100\">Parent Slot</td>\n            <td className=\"text-lg-right text-monospace\">\n              <Slot slot={block.parentSlot} link />\n            </td>\n          </tr>\n          <tr>\n            <td className=\"w-100\">Parent Blockhash</td>\n            <td className=\"text-lg-right text-monospace\">\n              <span>{block.previousBlockhash}</span>\n            </td>\n          </tr>\n          <tr>\n            <td className=\"w-100\">Processed Transactions</td>\n            <td className=\"text-lg-right text-monospace\">\n              <span>{block.transactions.length}</span>\n            </td>\n          </tr>\n          <tr>\n            <td className=\"w-100\">Successful Transactions</td>\n            <td className=\"text-lg-right text-monospace\">\n              <span>{committedTxs.length}</span>\n            </td>\n          </tr>\n        </TableCardBody>\n      </div>\n\n      <MoreSection block={block} slot={slot} tab={tab} />\n    </>\n  );\n}\n\nconst TABS: Tab[] = [\n  {\n    slug: \"history\",\n    title: \"Transactions\",\n    path: \"\",\n  },\n  {\n    slug: \"rewards\",\n    title: \"Rewards\",\n    path: \"/rewards\",\n  },\n  {\n    slug: \"programs\",\n    title: \"Programs\",\n    path: \"/programs\",\n  },\n  {\n    slug: \"accounts\",\n    title: \"Accounts\",\n    path: \"/accounts\",\n  },\n];\n\ntype MoreTabs = \"history\" | \"rewards\" | \"programs\" | \"accounts\";\n\ntype Tab = {\n  slug: MoreTabs;\n  title: string;\n  path: string;\n};\n\nfunction MoreSection({\n  slot,\n  block,\n  tab,\n}: {\n  slot: number;\n  block: BlockResponse;\n  tab?: string;\n}) {\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"header\">\n          <div className=\"header-body pt-0\">\n            <ul className=\"nav nav-tabs nav-overflow header-tabs\">\n              {TABS.map(({ title, slug, path }) => (\n                <li key={slug} className=\"nav-item\">\n                  <NavLink\n                    className=\"nav-link\"\n                    to={clusterPath(`/block/${slot}${path}`)}\n                    exact\n                  >\n                    {title}\n                  </NavLink>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      </div>\n      {tab === undefined && <BlockHistoryCard block={block} />}\n      {tab === \"rewards\" && <BlockRewardsCard block={block} />}\n      {tab === \"accounts\" && <BlockAccountsCard block={block} />}\n      {tab === \"programs\" && <BlockProgramsCard block={block} />}\n    </>\n  );\n}\n","import React from \"react\";\n\nimport { ErrorCard } from \"components/common/ErrorCard\";\nimport { BlockOverviewCard } from \"components/block/BlockOverviewCard\";\n\n// IE11 doesn't support Number.MAX_SAFE_INTEGER\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\ntype Props = { slot: string; tab?: string };\n\nexport function BlockDetailsPage({ slot, tab }: Props) {\n  const slotNumber = Number(slot);\n  let output = <ErrorCard text={`Block ${slot} is not valid`} />;\n\n  if (\n    !isNaN(slotNumber) &&\n    slotNumber < MAX_SAFE_INTEGER &&\n    slotNumber % 1 === 0\n  ) {\n    output = <BlockOverviewCard slot={slotNumber} tab={tab} />;\n  }\n\n  return (\n    <div className=\"container mt-n3\">\n      <div className=\"header\">\n        <div className=\"header-body\">\n          <h6 className=\"header-pretitle\">Details</h6>\n          <h2 className=\"header-title\">Block</h2>\n        </div>\n      </div>\n      {output}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\n\nimport { ClusterModal } from \"components/ClusterModal\";\nimport { MessageBanner } from \"components/MessageBanner\";\nimport { Navbar } from \"components/Navbar\";\nimport { ClusterStatusBanner } from \"components/ClusterStatusButton\";\nimport { SearchBar } from \"components/SearchBar\";\n\nimport { AccountDetailsPage } from \"pages/AccountDetailsPage\";\nimport { TransactionInspectorPage } from \"pages/inspector/InspectorPage\";\nimport { ClusterStatsPage } from \"pages/ClusterStatsPage\";\nimport { SupplyPage } from \"pages/SupplyPage\";\nimport { TransactionDetailsPage } from \"pages/TransactionDetailsPage\";\nimport { BlockDetailsPage } from \"pages/BlockDetailsPage\";\n\nconst ADDRESS_ALIASES = [\"account\", \"accounts\", \"addresses\"];\nconst TX_ALIASES = [\"txs\", \"txn\", \"txns\", \"transaction\", \"transactions\"];\n\nfunction App() {\n  return (\n    <>\n      <ClusterModal />\n      <div className=\"main-content pb-4\">\n        <Navbar />\n        <MessageBanner />\n        <ClusterStatusBanner />\n        <SearchBar />\n        <Switch>\n          <Route exact path={[\"/supply\", \"/accounts\", \"accounts/top\"]}>\n            <SupplyPage />\n          </Route>\n          <Route\n            exact\n            path={TX_ALIASES.map((tx) => `/${tx}/:signature`)}\n            render={({ match, location }) => {\n              let pathname = `/tx/${match.params.signature}`;\n              return <Redirect to={{ ...location, pathname }} />;\n            }}\n          />\n          <Route\n            exact\n            path={[\"/tx/inspector\", \"/tx/:signature/inspect\"]}\n            render={({ match }) => (\n              <TransactionInspectorPage signature={match.params.signature} />\n            )}\n          />\n          <Route\n            exact\n            path={\"/tx/:signature\"}\n            render={({ match }) => (\n              <TransactionDetailsPage signature={match.params.signature} />\n            )}\n          />\n          <Route\n            exact\n            path={[\"/block/:id\", \"/block/:id/:tab\"]}\n            render={({ match }) => (\n              <BlockDetailsPage slot={match.params.id} tab={match.params.tab} />\n            )}\n          />\n          <Route\n            exact\n            path={[\n              ...ADDRESS_ALIASES.map((path) => `/${path}/:address`),\n              ...ADDRESS_ALIASES.map((path) => `/${path}/:address/:tab`),\n            ]}\n            render={({ match, location }) => {\n              let pathname = `/address/${match.params.address}`;\n              if (match.params.tab) {\n                pathname += `/${match.params.tab}`;\n              }\n              return <Redirect to={{ ...location, pathname }} />;\n            }}\n          />\n          <Route\n            exact\n            path={[\"/address/:address\", \"/address/:address/:tab\"]}\n            render={({ match }) => (\n              <AccountDetailsPage\n                address={match.params.address}\n                tab={match.params.tab}\n              />\n            )}\n          />\n          <Route exact path=\"/\">\n            <ClusterStatsPage />\n          </Route>\n          <Route\n            render={({ location }) => (\n              <Redirect to={{ ...location, pathname: \"/\" }} />\n            )}\n          />\n        </Switch>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport { SolanaClusterStatsProvider } from \"./solanaClusterStats\";\n\ntype Props = { children: React.ReactNode };\nexport function StatsProvider({ children }: Props) {\n  return <SolanaClusterStatsProvider>{children}</SolanaClusterStatsProvider>;\n}\n","import React from \"react\";\nimport { LargestAccountsProvider } from \"./largest\";\nimport { TokenRegistryProvider } from \"./token-registry\";\n\ntype ProviderProps = { children: React.ReactNode };\nexport function MintsProvider({ children }: ProviderProps) {\n  return (\n    <TokenRegistryProvider>\n      <LargestAccountsProvider>{children}</LargestAccountsProvider>\n    </TokenRegistryProvider>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport * as Sentry from \"@sentry/react\";\nimport \"./scss/theme-dark.scss\";\nimport App from \"./App\";\nimport { ClusterProvider } from \"./providers/cluster\";\nimport { RichListProvider } from \"./providers/richList\";\nimport { SupplyProvider } from \"./providers/supply\";\nimport { TransactionsProvider } from \"./providers/transactions\";\nimport { AccountsProvider } from \"./providers/accounts\";\nimport { BlockProvider } from \"./providers/block\";\nimport { StatsProvider } from \"providers/stats\";\nimport { MintsProvider } from \"providers/mints\";\n\nif (process.env.NODE_ENV === \"production\") {\n  Sentry.init({\n    dsn: \"https://5efdc15b4828434fbe949b5daed472be@o434108.ingest.sentry.io/5390542\",\n  });\n}\n\nReactDOM.render(\n  <Router>\n    <ClusterProvider>\n      <StatsProvider>\n        <SupplyProvider>\n          <RichListProvider>\n            <AccountsProvider>\n              <BlockProvider>\n                <MintsProvider>\n                  <TransactionsProvider>\n                    <App />\n                  </TransactionsProvider>\n                </MintsProvider>\n              </BlockProvider>\n            </AccountsProvider>\n          </RichListProvider>\n        </SupplyProvider>\n      </StatsProvider>\n    </ClusterProvider>\n  </Router>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}